
ADCTrainLocator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026b4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000100  20000000  000026b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000007a8  20000100  000027b4  00020100  2**2
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
  4 .comment      00000059  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
  5 .debug_info   000502b3  00000000  00000000  00020181  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00005e30  00000000  00000000  00070434  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    0000715c  00000000  00000000  00076264  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000008c0  00000000  00000000  0007d3c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00001098  00000000  00000000  0007dc80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001c6c8  00000000  00000000  0007ed18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d73b  00000000  00000000  0009b3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00082ced  00000000  00000000  000a8b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000016d8  00000000  00000000  0012b808  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:

void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
       0:	00 80 00 20 85 01 00 00 6b 01 00 00 6b 01 00 00     ... ....k...k...
	...
      2c:	6b 01 00 00 00 00 00 00 00 00 00 00 6b 01 00 00     k...........k...
      3c:	d9 01 00 00 6b 01 00 00 6b 01 00 00 6b 01 00 00     ....k...k...k...
      4c:	6b 01 00 00 6b 01 00 00 6b 01 00 00 6b 01 00 00     k...k...k...k...
      5c:	71 01 00 00 6b 01 00 00 b5 16 00 00 6b 01 00 00     q...k.......k...
      6c:	6b 01 00 00 6b 01 00 00 6b 01 00 00 c5 16 00 00     k...k...k.......
      7c:	6b 01 00 00 6b 01 00 00 6b 01 00 00 6b 01 00 00     k...k...k...k...
      8c:	6b 01 00 00 00 00 00 00 6b 01 00 00 6b 01 00 00     k.......k...k...
      9c:	6b 01 00 00 6b 01 00 00 6b 01 00 00 6b 01 00 00     k...k...k...k...
      ac:	6b 01 00 00 00 00 00 00                             k.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000100 	.word	0x20000100
      d4:	00000000 	.word	0x00000000
      d8:	000026b0 	.word	0x000026b0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000104 	.word	0x20000104
     108:	000026b0 	.word	0x000026b0
     10c:	200000fc 	.word	0x200000fc
     110:	00000000 	.word	0x00000000

00000114 <setup>:
	
public: 
char* g = "test";
};

void setup() {
     114:	b580      	push	{r7, lr}
     116:	af00      	add	r7, sp, #0
  // put your setup code here, to run once:

}
     118:	46c0      	nop			; (mov r8, r8)
     11a:	46bd      	mov	sp, r7
     11c:	bd80      	pop	{r7, pc}
	...

00000120 <_ZN4TestC1Ev>:
class Test
     120:	b580      	push	{r7, lr}
     122:	b082      	sub	sp, #8
     124:	af00      	add	r7, sp, #0
     126:	6078      	str	r0, [r7, #4]
     128:	687b      	ldr	r3, [r7, #4]
     12a:	4a03      	ldr	r2, [pc, #12]	; (138 <_ZN4TestC1Ev+0x18>)
     12c:	601a      	str	r2, [r3, #0]
     12e:	687b      	ldr	r3, [r7, #4]
     130:	0018      	movs	r0, r3
     132:	46bd      	mov	sp, r7
     134:	b002      	add	sp, #8
     136:	bd80      	pop	{r7, pc}
     138:	000021f0 	.word	0x000021f0

0000013c <loop>:

void loop() {
     13c:	b590      	push	{r4, r7, lr}
     13e:	b085      	sub	sp, #20
     140:	af00      	add	r7, sp, #0
  // put your main code here, to run repeatedly:

int i = 3;
     142:	2303      	movs	r3, #3
     144:	60fb      	str	r3, [r7, #12]
int c = i + 5;
     146:	68fb      	ldr	r3, [r7, #12]
     148:	3305      	adds	r3, #5
     14a:	60bb      	str	r3, [r7, #8]

Test *t = new Test();
     14c:	2004      	movs	r0, #4
     14e:	f000 f88d 	bl	26c <_Znwj>
     152:	0003      	movs	r3, r0
     154:	001c      	movs	r4, r3
     156:	2300      	movs	r3, #0
     158:	6023      	str	r3, [r4, #0]
     15a:	0020      	movs	r0, r4
     15c:	f7ff ffe0 	bl	120 <_ZN4TestC1Ev>
     160:	607c      	str	r4, [r7, #4]

}
     162:	46c0      	nop			; (mov r8, r8)
     164:	46bd      	mov	sp, r7
     166:	b005      	add	sp, #20
     168:	bd90      	pop	{r4, r7, pc}

0000016a <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
     16a:	be03      	bkpt	0x0003
     16c:	e7fe      	b.n	16c <Dummy_Handler+0x2>
	...

00000170 <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
     170:	4b03      	ldr	r3, [pc, #12]	; (180 <USB_Handler+0x10>)
{
     172:	b510      	push	{r4, lr}
  if (usb_isr)
     174:	681b      	ldr	r3, [r3, #0]
     176:	2b00      	cmp	r3, #0
     178:	d000      	beq.n	17c <USB_Handler+0xc>
    usb_isr();
     17a:	4798      	blx	r3
}
     17c:	bd10      	pop	{r4, pc}
     17e:	46c0      	nop			; (mov r8, r8)
     180:	2000011c 	.word	0x2000011c

00000184 <Reset_Handler>:
{
     184:	b570      	push	{r4, r5, r6, lr}
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     186:	490f      	ldr	r1, [pc, #60]	; (1c4 <Reset_Handler+0x40>)
     188:	4c0f      	ldr	r4, [pc, #60]	; (1c8 <Reset_Handler+0x44>)
     18a:	42a1      	cmp	r1, r4
     18c:	d104      	bne.n	198 <Reset_Handler+0x14>
  SystemInit();
     18e:	f000 f8bb 	bl	308 <SystemInit>
  main();
     192:	f000 f84b 	bl	22c <main>
     196:	e7fe      	b.n	196 <Reset_Handler+0x12>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     198:	4d0c      	ldr	r5, [pc, #48]	; (1cc <Reset_Handler+0x48>)
     19a:	2300      	movs	r3, #0
     19c:	428d      	cmp	r5, r1
     19e:	d0f6      	beq.n	18e <Reset_Handler+0xa>
     1a0:	18ca      	adds	r2, r1, r3
     1a2:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
     1a4:	42a2      	cmp	r2, r4
     1a6:	d305      	bcc.n	1b4 <Reset_Handler+0x30>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     1a8:	4290      	cmp	r0, r2
     1aa:	d0f0      	beq.n	18e <Reset_Handler+0xa>
     1ac:	4b08      	ldr	r3, [pc, #32]	; (1d0 <Reset_Handler+0x4c>)
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     1ae:	4909      	ldr	r1, [pc, #36]	; (1d4 <Reset_Handler+0x50>)
      *pDest = 0;
     1b0:	2200      	movs	r2, #0
     1b2:	e004      	b.n	1be <Reset_Handler+0x3a>
      *pDest = *pSrc;
     1b4:	6800      	ldr	r0, [r0, #0]
     1b6:	3304      	adds	r3, #4
     1b8:	6010      	str	r0, [r2, #0]
     1ba:	e7f1      	b.n	1a0 <Reset_Handler+0x1c>
      *pDest = 0;
     1bc:	c304      	stmia	r3!, {r2}
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     1be:	428b      	cmp	r3, r1
     1c0:	d3fc      	bcc.n	1bc <Reset_Handler+0x38>
     1c2:	e7e4      	b.n	18e <Reset_Handler+0xa>
     1c4:	20000000 	.word	0x20000000
     1c8:	20000100 	.word	0x20000100
     1cc:	000026b4 	.word	0x000026b4
     1d0:	20000100 	.word	0x20000100
     1d4:	200008a8 	.word	0x200008a8

000001d8 <SysTick_Handler>:
{
     1d8:	b510      	push	{r4, lr}
  if (sysTickHook())
     1da:	f000 f824 	bl	226 <sysTickHook>
     1de:	2800      	cmp	r0, #0
     1e0:	d101      	bne.n	1e6 <SysTick_Handler+0xe>
  SysTick_DefaultHandler();
     1e2:	f000 f815 	bl	210 <SysTick_DefaultHandler>
}
     1e6:	bd10      	pop	{r4, pc}

000001e8 <USB_SetHandler>:

void USB_SetHandler(void (*new_usb_isr)(void))
{
  usb_isr = new_usb_isr;
     1e8:	4b01      	ldr	r3, [pc, #4]	; (1f0 <USB_SetHandler+0x8>)
     1ea:	6018      	str	r0, [r3, #0]
}
     1ec:	4770      	bx	lr
     1ee:	46c0      	nop			; (mov r8, r8)
     1f0:	2000011c 	.word	0x2000011c

000001f4 <delay>:
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}

void delay( unsigned long ms )
{
     1f4:	b570      	push	{r4, r5, r6, lr}
     1f6:	1e04      	subs	r4, r0, #0
  if ( ms == 0 )
     1f8:	d007      	beq.n	20a <delay+0x16>
  {
    return ;
  }

  uint32_t start = _ulTickCount ;
     1fa:	4d04      	ldr	r5, [pc, #16]	; (20c <delay+0x18>)
     1fc:	682e      	ldr	r6, [r5, #0]

  do
  {
    yield() ;
     1fe:	f000 f811 	bl	224 <yield>
  } while ( _ulTickCount - start < ms ) ;
     202:	682b      	ldr	r3, [r5, #0]
     204:	1b9b      	subs	r3, r3, r6
     206:	429c      	cmp	r4, r3
     208:	d8f9      	bhi.n	1fe <delay+0xa>
}
     20a:	bd70      	pop	{r4, r5, r6, pc}
     20c:	20000120 	.word	0x20000120

00000210 <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
     210:	b510      	push	{r4, lr}
  // Increment tick count each ms
  _ulTickCount++;
     212:	4a03      	ldr	r2, [pc, #12]	; (220 <SysTick_DefaultHandler+0x10>)
     214:	6813      	ldr	r3, [r2, #0]
     216:	3301      	adds	r3, #1
     218:	6013      	str	r3, [r2, #0]
  tickReset();
     21a:	f000 f839 	bl	290 <tickReset>
}
     21e:	bd10      	pop	{r4, pc}
     220:	20000120 	.word	0x20000120

00000224 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
     224:	4770      	bx	lr

00000226 <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
     226:	2000      	movs	r0, #0
     228:	4770      	bx	lr

0000022a <_Z11initVariantv>:
#include "Arduino.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     22a:	4770      	bx	lr

0000022c <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
     22c:	b510      	push	{r4, lr}
  init();
     22e:	f001 f8c1 	bl	13b4 <init>

  __libc_init_array();  
     232:	f001 ff09 	bl	2048 <__libc_init_array>

  initVariant();
     236:	f7ff fff8 	bl	22a <_Z11initVariantv>

  delay(1);
     23a:	2001      	movs	r0, #1
     23c:	f7ff ffda 	bl	1f4 <delay>
#if defined(USBCON)
  USBDevice.init();
     240:	4c08      	ldr	r4, [pc, #32]	; (264 <main+0x38>)
     242:	0020      	movs	r0, r4
     244:	f000 fb2c 	bl	8a0 <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
     248:	0020      	movs	r0, r4
     24a:	f000 fba1 	bl	990 <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
     24e:	f7ff ff61 	bl	114 <setup>

  for (;;)
  {
    loop();
     252:	f7ff ff73 	bl	13c <loop>
    if (serialEventRun) serialEventRun();
     256:	4b04      	ldr	r3, [pc, #16]	; (268 <main+0x3c>)
     258:	2b00      	cmp	r3, #0
     25a:	d0fa      	beq.n	252 <main+0x26>
     25c:	e000      	b.n	260 <main+0x34>
     25e:	bf00      	nop
     260:	e7f7      	b.n	252 <main+0x26>
     262:	46c0      	nop			; (mov r8, r8)
     264:	20000124 	.word	0x20000124
     268:	00000000 	.word	0x00000000

0000026c <_Znwj>:
     26c:	b510      	push	{r4, lr}
     26e:	f001 ff0f 	bl	2090 <malloc>
     272:	bd10      	pop	{r4, pc}

00000274 <initiateReset>:
}

static int ticks = -1;

void initiateReset(int _ticks) {
	ticks = _ticks;
     274:	4b01      	ldr	r3, [pc, #4]	; (27c <initiateReset+0x8>)
     276:	6018      	str	r0, [r3, #0]
}
     278:	4770      	bx	lr
     27a:	46c0      	nop			; (mov r8, r8)
     27c:	20000000 	.word	0x20000000

00000280 <cancelReset>:

void cancelReset() {
	ticks = -1;
     280:	2201      	movs	r2, #1
     282:	4b02      	ldr	r3, [pc, #8]	; (28c <cancelReset+0xc>)
     284:	4252      	negs	r2, r2
     286:	601a      	str	r2, [r3, #0]
}
     288:	4770      	bx	lr
     28a:	46c0      	nop			; (mov r8, r8)
     28c:	20000000 	.word	0x20000000

00000290 <tickReset>:

void tickReset() {
	if (ticks == -1)
     290:	4a16      	ldr	r2, [pc, #88]	; (2ec <tickReset+0x5c>)
void tickReset() {
     292:	b510      	push	{r4, lr}
	if (ticks == -1)
     294:	6813      	ldr	r3, [r2, #0]
     296:	1c59      	adds	r1, r3, #1
     298:	d027      	beq.n	2ea <tickReset+0x5a>
		return;
	ticks--;
     29a:	3b01      	subs	r3, #1
     29c:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
     29e:	2b00      	cmp	r3, #0
     2a0:	d123      	bne.n	2ea <tickReset+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     2a2:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
     2a4:	4b12      	ldr	r3, [pc, #72]	; (2f0 <tickReset+0x60>)
     2a6:	4a13      	ldr	r2, [pc, #76]	; (2f4 <tickReset+0x64>)
     2a8:	3304      	adds	r3, #4
     2aa:	4293      	cmp	r3, r2
     2ac:	d808      	bhi.n	2c0 <tickReset+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     2ae:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     2b2:	4a11      	ldr	r2, [pc, #68]	; (2f8 <tickReset+0x68>)
     2b4:	4b11      	ldr	r3, [pc, #68]	; (2fc <tickReset+0x6c>)
     2b6:	60da      	str	r2, [r3, #12]
     2b8:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     2bc:	46c0      	nop			; (mov r8, r8)
     2be:	e7fd      	b.n	2bc <tickReset+0x2c>
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     2c0:	4a0f      	ldr	r2, [pc, #60]	; (300 <tickReset+0x70>)
	while (!nvmReady())
     2c2:	2101      	movs	r1, #1
     2c4:	0010      	movs	r0, r2
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     2c6:	7d14      	ldrb	r4, [r2, #20]
	while (!nvmReady())
     2c8:	420c      	tst	r4, r1
     2ca:	d0fc      	beq.n	2c6 <tickReset+0x36>
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     2cc:	2120      	movs	r1, #32
     2ce:	8b14      	ldrh	r4, [r2, #24]
     2d0:	31ff      	adds	r1, #255	; 0xff
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     2d2:	089b      	lsrs	r3, r3, #2
     2d4:	005b      	lsls	r3, r3, #1
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     2d6:	4321      	orrs	r1, r4
     2d8:	8311      	strh	r1, [r2, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     2da:	61d3      	str	r3, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
     2dc:	4b09      	ldr	r3, [pc, #36]	; (304 <tickReset+0x74>)
     2de:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
     2e0:	2301      	movs	r3, #1
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     2e2:	7d02      	ldrb	r2, [r0, #20]
	while (!nvmReady())
     2e4:	421a      	tst	r2, r3
     2e6:	d0fc      	beq.n	2e2 <tickReset+0x52>
     2e8:	e7e1      	b.n	2ae <tickReset+0x1e>
		banzai();
}
     2ea:	bd10      	pop	{r4, pc}
     2ec:	20000000 	.word	0x20000000
     2f0:	00000000 	.word	0x00000000
     2f4:	00000203 	.word	0x00000203
     2f8:	05fa0004 	.word	0x05fa0004
     2fc:	e000ed00 	.word	0xe000ed00
     300:	41004000 	.word	0x41004000
     304:	ffffa502 	.word	0xffffa502

00000308 <SystemInit>:
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     308:	221e      	movs	r2, #30
{
     30a:	b570      	push	{r4, r5, r6, lr}
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     30c:	4846      	ldr	r0, [pc, #280]	; (428 <SystemInit+0x120>)

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     30e:	4947      	ldr	r1, [pc, #284]	; (42c <SystemInit+0x124>)
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     310:	6843      	ldr	r3, [r0, #4]
     312:	4393      	bics	r3, r2
     314:	3a1c      	subs	r2, #28
     316:	4313      	orrs	r3, r2
     318:	6043      	str	r3, [r0, #4]
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     31a:	2308      	movs	r3, #8
     31c:	698c      	ldr	r4, [r1, #24]
     31e:	4323      	orrs	r3, r4
     320:	618b      	str	r3, [r1, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     322:	4c43      	ldr	r4, [pc, #268]	; (430 <SystemInit+0x128>)
     324:	4b43      	ldr	r3, [pc, #268]	; (434 <SystemInit+0x12c>)
     326:	829c      	strh	r4, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
     328:	8a9c      	ldrh	r4, [r3, #20]
     32a:	4314      	orrs	r4, r2
     32c:	829c      	strh	r4, [r3, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
     32e:	68dc      	ldr	r4, [r3, #12]
     330:	4214      	tst	r4, r2
     332:	d0fc      	beq.n	32e <SystemInit+0x26>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
     334:	2401      	movs	r4, #1
     336:	4a40      	ldr	r2, [pc, #256]	; (438 <SystemInit+0x130>)
     338:	7014      	strb	r4, [r2, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     33a:	7815      	ldrb	r5, [r2, #0]
     33c:	4225      	tst	r5, r4
     33e:	d003      	beq.n	348 <SystemInit+0x40>
     340:	7855      	ldrb	r5, [r2, #1]
     342:	b26d      	sxtb	r5, r5
     344:	2d00      	cmp	r5, #0
     346:	dbf8      	blt.n	33a <SystemInit+0x32>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
     348:	2401      	movs	r4, #1
     34a:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     34c:	7854      	ldrb	r4, [r2, #1]
     34e:	b264      	sxtb	r4, r4
     350:	2c00      	cmp	r4, #0
     352:	dbfb      	blt.n	34c <SystemInit+0x44>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
     354:	4c39      	ldr	r4, [pc, #228]	; (43c <SystemInit+0x134>)
     356:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     358:	7854      	ldrb	r4, [r2, #1]
     35a:	b264      	sxtb	r4, r4
     35c:	2c00      	cmp	r4, #0
     35e:	dbfb      	blt.n	358 <SystemInit+0x50>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
     360:	2482      	movs	r4, #130	; 0x82
     362:	01e4      	lsls	r4, r4, #7
     364:	8054      	strh	r4, [r2, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     366:	7854      	ldrb	r4, [r2, #1]
     368:	b264      	sxtb	r4, r4
     36a:	2c00      	cmp	r4, #0
     36c:	dbfb      	blt.n	366 <SystemInit+0x5e>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     36e:	2402      	movs	r4, #2
     370:	849c      	strh	r4, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     372:	340e      	adds	r4, #14
     374:	68dd      	ldr	r5, [r3, #12]
     376:	4225      	tst	r5, r4
     378:	d0fc      	beq.n	374 <SystemInit+0x6c>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
     37a:	4c31      	ldr	r4, [pc, #196]	; (440 <SystemInit+0x138>)
     37c:	62dc      	str	r4, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK + VARIANT_MAINOSC/2) / VARIANT_MAINOSC ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     37e:	2410      	movs	r4, #16
     380:	68dd      	ldr	r5, [r3, #12]
     382:	4225      	tst	r5, r4
     384:	d0fc      	beq.n	380 <SystemInit+0x78>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
     386:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
     388:	4c2e      	ldr	r4, [pc, #184]	; (444 <SystemInit+0x13c>)
     38a:	432c      	orrs	r4, r5
     38c:	849c      	strh	r4, [r3, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     38e:	2410      	movs	r4, #16
     390:	68dd      	ldr	r5, [r3, #12]
     392:	4225      	tst	r5, r4
     394:	d0fc      	beq.n	390 <SystemInit+0x88>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     396:	2402      	movs	r4, #2
     398:	8c9d      	ldrh	r5, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     39a:	2680      	movs	r6, #128	; 0x80
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     39c:	432c      	orrs	r4, r5
     39e:	849c      	strh	r4, [r3, #36]	; 0x24
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     3a0:	2440      	movs	r4, #64	; 0x40
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     3a2:	68dd      	ldr	r5, [r3, #12]
     3a4:	4235      	tst	r5, r6
     3a6:	d0fc      	beq.n	3a2 <SystemInit+0x9a>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     3a8:	68dd      	ldr	r5, [r3, #12]
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     3aa:	4225      	tst	r5, r4
     3ac:	d0f9      	beq.n	3a2 <SystemInit+0x9a>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     3ae:	2410      	movs	r4, #16
     3b0:	68dd      	ldr	r5, [r3, #12]
     3b2:	4225      	tst	r5, r4
     3b4:	d0fc      	beq.n	3b0 <SystemInit+0xa8>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
     3b6:	2400      	movs	r4, #0
     3b8:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     3ba:	7854      	ldrb	r4, [r2, #1]
     3bc:	b264      	sxtb	r4, r4
     3be:	2c00      	cmp	r4, #0
     3c0:	dbfb      	blt.n	3ba <SystemInit+0xb2>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
     3c2:	4c21      	ldr	r4, [pc, #132]	; (448 <SystemInit+0x140>)
     3c4:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     3c6:	7854      	ldrb	r4, [r2, #1]
     3c8:	b264      	sxtb	r4, r4
     3ca:	2c00      	cmp	r4, #0
     3cc:	dbfb      	blt.n	3c6 <SystemInit+0xbe>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     3ce:	6a1c      	ldr	r4, [r3, #32]
     3d0:	4d1e      	ldr	r5, [pc, #120]	; (44c <SystemInit+0x144>)
     3d2:	402c      	ands	r4, r5
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     3d4:	2580      	movs	r5, #128	; 0x80
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     3d6:	621c      	str	r4, [r3, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     3d8:	6a1c      	ldr	r4, [r3, #32]
     3da:	43ac      	bics	r4, r5
     3dc:	621c      	str	r4, [r3, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
     3de:	2303      	movs	r3, #3
     3e0:	6093      	str	r3, [r2, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
     3e2:	4b1b      	ldr	r3, [pc, #108]	; (450 <SystemInit+0x148>)
     3e4:	6053      	str	r3, [r2, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     3e6:	7853      	ldrb	r3, [r2, #1]
     3e8:	b25b      	sxtb	r3, r3
     3ea:	2b00      	cmp	r3, #0
     3ec:	dbfb      	blt.n	3e6 <SystemInit+0xde>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     3ee:	2300      	movs	r3, #0

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     3f0:	24ff      	movs	r4, #255	; 0xff
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     3f2:	720b      	strb	r3, [r1, #8]
  SystemCoreClock=VARIANT_MCK ;
     3f4:	4a17      	ldr	r2, [pc, #92]	; (454 <SystemInit+0x14c>)
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
     3f6:	724b      	strb	r3, [r1, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
     3f8:	728b      	strb	r3, [r1, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
     3fa:	72cb      	strb	r3, [r1, #11]
  SystemCoreClock=VARIANT_MCK ;
     3fc:	4b16      	ldr	r3, [pc, #88]	; (458 <SystemInit+0x150>)
     3fe:	601a      	str	r2, [r3, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     400:	4b16      	ldr	r3, [pc, #88]	; (45c <SystemInit+0x154>)
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     402:	4a17      	ldr	r2, [pc, #92]	; (460 <SystemInit+0x158>)
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     404:	681b      	ldr	r3, [r3, #0]
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     406:	6811      	ldr	r1, [r2, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     408:	069a      	lsls	r2, r3, #26
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     40a:	015b      	lsls	r3, r3, #5
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     40c:	0ec9      	lsrs	r1, r1, #27
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     40e:	4023      	ands	r3, r4
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     410:	0f52      	lsrs	r2, r2, #29

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     412:	0212      	lsls	r2, r2, #8
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     414:	430b      	orrs	r3, r1
  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     416:	4313      	orrs	r3, r2
     418:	4a12      	ldr	r2, [pc, #72]	; (464 <SystemInit+0x15c>)
     41a:	8513      	strh	r3, [r2, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
     41c:	2380      	movs	r3, #128	; 0x80
     41e:	6842      	ldr	r2, [r0, #4]
     420:	4313      	orrs	r3, r2
     422:	6043      	str	r3, [r0, #4]
}
     424:	bd70      	pop	{r4, r5, r6, pc}
     426:	46c0      	nop			; (mov r8, r8)
     428:	41004000 	.word	0x41004000
     42c:	40000400 	.word	0x40000400
     430:	0000060c 	.word	0x0000060c
     434:	40000800 	.word	0x40000800
     438:	40000c00 	.word	0x40000c00
     43c:	00010501 	.word	0x00010501
     440:	7dff05b9 	.word	0x7dff05b9
     444:	00000a04 	.word	0x00000a04
     448:	00030700 	.word	0x00030700
     44c:	fffffcff 	.word	0xfffffcff
     450:	00010603 	.word	0x00010603
     454:	02dc6c00 	.word	0x02dc6c00
     458:	2000002c 	.word	0x2000002c
     45c:	00806024 	.word	0x00806024
     460:	00806020 	.word	0x00806020
     464:	42004000 	.word	0x42004000

00000468 <_ZL5utox8mPc>:
	packMessages(false);

	return true;
}

static void utox8(uint32_t val, char* s) {
     468:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < 8; i++) {
		int d = val & 0XF;
     46a:	250f      	movs	r5, #15
     46c:	1dcb      	adds	r3, r1, #7
     46e:	3901      	subs	r1, #1
     470:	0002      	movs	r2, r0
     472:	402a      	ands	r2, r5
		val = (val >> 4);

		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
     474:	0014      	movs	r4, r2
		val = (val >> 4);
     476:	0900      	lsrs	r0, r0, #4
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
     478:	3430      	adds	r4, #48	; 0x30
     47a:	2a09      	cmp	r2, #9
     47c:	dd01      	ble.n	482 <_ZL5utox8mPc+0x1a>
     47e:	3237      	adds	r2, #55	; 0x37
     480:	0014      	movs	r4, r2
     482:	701c      	strb	r4, [r3, #0]
     484:	3b01      	subs	r3, #1
	for (int i = 0; i < 8; i++) {
     486:	428b      	cmp	r3, r1
     488:	d1f2      	bne.n	470 <_ZL5utox8mPc+0x8>
	}
}
     48a:	bd30      	pop	{r4, r5, pc}

0000048c <_ZN14USBDeviceClass6initEPEmm.part.5>:
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
     48c:	b570      	push	{r4, r5, r6, lr}
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     48e:	26c0      	movs	r6, #192	; 0xc0
     490:	b2c1      	uxtb	r1, r0
     492:	4c1b      	ldr	r4, [pc, #108]	; (500 <_ZN14USBDeviceClass6initEPEmm.part.5+0x74>)
     494:	014b      	lsls	r3, r1, #5
     496:	18e3      	adds	r3, r4, r3
     498:	689a      	ldr	r2, [r3, #8]
     49a:	4d1a      	ldr	r5, [pc, #104]	; (504 <_ZN14USBDeviceClass6initEPEmm.part.5+0x78>)
     49c:	05b6      	lsls	r6, r6, #22
     49e:	402a      	ands	r2, r5
     4a0:	4332      	orrs	r2, r6
     4a2:	609a      	str	r2, [r3, #8]
	}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
	{
		// Setup Control OUT
		usbd.epBank0SetSize(ep, 64);
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
     4a4:	4a18      	ldr	r2, [pc, #96]	; (508 <_ZN14USBDeviceClass6initEPEmm.part.5+0x7c>)
     4a6:	0180      	lsls	r0, r0, #6
     4a8:	1810      	adds	r0, r2, r0
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     4aa:	000a      	movs	r2, r1
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     4ac:	6058      	str	r0, [r3, #4]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     4ae:	2007      	movs	r0, #7
     4b0:	6824      	ldr	r4, [r4, #0]
     4b2:	3208      	adds	r2, #8
     4b4:	0152      	lsls	r2, r2, #5
     4b6:	5d11      	ldrb	r1, [r2, r4]
     4b8:	4381      	bics	r1, r0
     4ba:	0008      	movs	r0, r1
     4bc:	2101      	movs	r1, #1
     4be:	4301      	orrs	r1, r0
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     4c0:	2070      	movs	r0, #112	; 0x70
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     4c2:	5511      	strb	r1, [r2, r4]
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     4c4:	6999      	ldr	r1, [r3, #24]
     4c6:	4029      	ands	r1, r5
     4c8:	4331      	orrs	r1, r6
     4ca:	6199      	str	r1, [r3, #24]
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     4cc:	490f      	ldr	r1, [pc, #60]	; (50c <_ZN14USBDeviceClass6initEPEmm.part.5+0x80>)
     4ce:	6159      	str	r1, [r3, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     4d0:	5d11      	ldrb	r1, [r2, r4]
     4d2:	4381      	bics	r1, r0
     4d4:	0008      	movs	r0, r1
     4d6:	2110      	movs	r1, #16
     4d8:	4301      	orrs	r1, r0
     4da:	5511      	strb	r1, [r2, r4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     4dc:	6899      	ldr	r1, [r3, #8]
     4de:	480c      	ldr	r0, [pc, #48]	; (510 <_ZN14USBDeviceClass6initEPEmm.part.5+0x84>)
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
     4e0:	18a2      	adds	r2, r4, r2
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     4e2:	4008      	ands	r0, r1
     4e4:	2180      	movs	r1, #128	; 0x80
     4e6:	0349      	lsls	r1, r1, #13
     4e8:	4301      	orrs	r1, r0
     4ea:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     4ec:	6899      	ldr	r1, [r3, #8]
     4ee:	0b89      	lsrs	r1, r1, #14
     4f0:	0389      	lsls	r1, r1, #14
     4f2:	6099      	str	r1, [r3, #8]
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
     4f4:	2340      	movs	r3, #64	; 0x40
     4f6:	7951      	ldrb	r1, [r2, #5]
     4f8:	430b      	orrs	r3, r1
     4fa:	7153      	strb	r3, [r2, #5]
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
     4fc:	bd70      	pop	{r4, r5, r6, pc}
     4fe:	46c0      	nop			; (mov r8, r8)
     500:	200005dc 	.word	0x200005dc
     504:	8fffffff 	.word	0x8fffffff
     508:	20000310 	.word	0x20000310
     50c:	20000150 	.word	0x20000150
     510:	f0003fff 	.word	0xf0003fff

00000514 <_ZN20USBDevice_SAMD21G18x5resetEv>:

	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
     514:	b570      	push	{r4, r5, r6, lr}
	usb.CTRLA.bit.SWRST = 1;
     516:	0004      	movs	r4, r0
     518:	2301      	movs	r3, #1
     51a:	cc20      	ldmia	r4!, {r5}
	memset(EP, 0, sizeof(EP));
     51c:	2100      	movs	r1, #0
	usb.CTRLA.bit.SWRST = 1;
     51e:	782a      	ldrb	r2, [r5, #0]
	memset(EP, 0, sizeof(EP));
     520:	0020      	movs	r0, r4
	usb.CTRLA.bit.SWRST = 1;
     522:	4313      	orrs	r3, r2
	memset(EP, 0, sizeof(EP));
     524:	2280      	movs	r2, #128	; 0x80
	usb.CTRLA.bit.SWRST = 1;
     526:	702b      	strb	r3, [r5, #0]
	memset(EP, 0, sizeof(EP));
     528:	0052      	lsls	r2, r2, #1
     52a:	f001 fdc4 	bl	20b6 <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
     52e:	78ab      	ldrb	r3, [r5, #2]
     530:	07db      	lsls	r3, r3, #31
     532:	d4fc      	bmi.n	52e <_ZN20USBDevice_SAMD21G18x5resetEv+0x1a>
	usb.DESCADD.reg = (uint32_t)(&EP);
     534:	626c      	str	r4, [r5, #36]	; 0x24
}
     536:	bd70      	pop	{r4, r5, r6, pc}

00000538 <_ZN20USBDevice_SAMD21G18x9calibrateEv>:
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
     538:	221f      	movs	r2, #31
     53a:	4b14      	ldr	r3, [pc, #80]	; (58c <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x54>)
void USBDevice_SAMD21G18x::calibrate() {
     53c:	b570      	push	{r4, r5, r6, lr}
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
     53e:	681b      	ldr	r3, [r3, #0]
     540:	0b59      	lsrs	r1, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
     542:	0c9c      	lsrs	r4, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
     544:	019b      	lsls	r3, r3, #6
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
     546:	4011      	ands	r1, r2
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
     548:	0f5b      	lsrs	r3, r3, #29
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
     54a:	4022      	ands	r2, r4

	if (pad_transn == 0x1F)  // maximum value (31)
     54c:	291f      	cmp	r1, #31
     54e:	d100      	bne.n	552 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x1a>
		pad_transn = 5;
     550:	391a      	subs	r1, #26
	if (pad_transp == 0x1F)  // maximum value (31)
     552:	2a1f      	cmp	r2, #31
     554:	d100      	bne.n	558 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x20>
		pad_transp = 29;
     556:	3a02      	subs	r2, #2
	if (pad_trim == 0x7)     // maximum value (7)
     558:	2b07      	cmp	r3, #7
     55a:	d100      	bne.n	55e <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x26>
		pad_trim = 3;
     55c:	3b04      	subs	r3, #4

	usb.PADCAL.bit.TRANSN = pad_transn;
     55e:	251f      	movs	r5, #31
     560:	6800      	ldr	r0, [r0, #0]
     562:	018e      	lsls	r6, r1, #6
     564:	8d04      	ldrh	r4, [r0, #40]	; 0x28
     566:	490a      	ldr	r1, [pc, #40]	; (590 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x58>)
	usb.PADCAL.bit.TRANSP = pad_transp;
     568:	402a      	ands	r2, r5
	usb.PADCAL.bit.TRANSN = pad_transn;
     56a:	4021      	ands	r1, r4
     56c:	4331      	orrs	r1, r6
     56e:	8501      	strh	r1, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
     570:	8d01      	ldrh	r1, [r0, #40]	; 0x28
     572:	0014      	movs	r4, r2
     574:	000a      	movs	r2, r1
     576:	43aa      	bics	r2, r5
     578:	4322      	orrs	r2, r4
     57a:	8502      	strh	r2, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
     57c:	8d02      	ldrh	r2, [r0, #40]	; 0x28
     57e:	0319      	lsls	r1, r3, #12
     580:	4b04      	ldr	r3, [pc, #16]	; (594 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x5c>)
     582:	4013      	ands	r3, r2
     584:	430b      	orrs	r3, r1
     586:	8503      	strh	r3, [r0, #40]	; 0x28
}
     588:	bd70      	pop	{r4, r5, r6, pc}
     58a:	46c0      	nop			; (mov r8, r8)
     58c:	00806024 	.word	0x00806024
     590:	fffff83f 	.word	0xfffff83f
     594:	ffff8fff 	.word	0xffff8fff

00000598 <_ZN7__GuardC1Ev>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     598:	f3ef 8310 	mrs	r3, PRIMASK
 * TODO: Move into a separate header file and make an API out of it
 */

class __Guard {
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
     59c:	6003      	str	r3, [r0, #0]
     59e:	2301      	movs	r3, #1
     5a0:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     5a2:	b672      	cpsid	i
		__disable_irq();
	}
     5a4:	4770      	bx	lr

000005a6 <_ZN7__GuardD1Ev>:
	~__Guard() {
		if (primask == 0) {
     5a6:	6803      	ldr	r3, [r0, #0]
     5a8:	2b00      	cmp	r3, #0
     5aa:	d102      	bne.n	5b2 <_ZN7__GuardD1Ev+0xc>
  __ASM volatile ("cpsie i" : : : "memory");
     5ac:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
     5ae:	f3bf 8f6f 	isb	sy
			__enable_irq();
			// http://infocenter.arm.com/help/topic/com.arm.doc.dai0321a/BIHBFEIB.html
			__ISB();
		}
	}
     5b2:	4770      	bx	lr

000005b4 <_ZNK26DoubleBufferedEPOutHandler9availableEv>:
			release();
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
     5b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (current == 0) {
     5b6:	6905      	ldr	r5, [r0, #16]
	virtual uint32_t available() const {
     5b8:	0004      	movs	r4, r0
			bool ready = false;
			synchronized {
     5ba:	4668      	mov	r0, sp
		if (current == 0) {
     5bc:	2d00      	cmp	r5, #0
     5be:	d114      	bne.n	5ea <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x36>
			synchronized {
     5c0:	f7ff ffea 	bl	598 <_ZN7__GuardC1Ev>
     5c4:	9b01      	ldr	r3, [sp, #4]
				ready = ready0;
     5c6:	1d62      	adds	r2, r4, #5
			synchronized {
     5c8:	3b01      	subs	r3, #1
     5ca:	d302      	bcc.n	5d2 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x1e>
				ready = ready0;
     5cc:	7fd5      	ldrb	r5, [r2, #31]
     5ce:	b2ed      	uxtb	r5, r5
     5d0:	e7fa      	b.n	5c8 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x14>
			synchronized {
     5d2:	4668      	mov	r0, sp
     5d4:	9301      	str	r3, [sp, #4]
     5d6:	f7ff ffe6 	bl	5a6 <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
     5da:	2d00      	cmp	r5, #0
     5dc:	d101      	bne.n	5e2 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2e>
     5de:	2000      	movs	r0, #0
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
		}
	}
     5e0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			return ready ? (last0 - first0) : 0;
     5e2:	6a20      	ldr	r0, [r4, #32]
     5e4:	69e3      	ldr	r3, [r4, #28]
			return ready ? (last1 - first1) : 0;
     5e6:	1ac0      	subs	r0, r0, r3
     5e8:	e7fa      	b.n	5e0 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2c>
			synchronized {
     5ea:	f7ff ffd5 	bl	598 <_ZN7__GuardC1Ev>
				ready = ready1;
     5ee:	0022      	movs	r2, r4
			bool ready = false;
     5f0:	2500      	movs	r5, #0
     5f2:	9b01      	ldr	r3, [sp, #4]
				ready = ready1;
     5f4:	3234      	adds	r2, #52	; 0x34
			synchronized {
     5f6:	3b01      	subs	r3, #1
     5f8:	d302      	bcc.n	600 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x4c>
				ready = ready1;
     5fa:	7815      	ldrb	r5, [r2, #0]
     5fc:	b2ed      	uxtb	r5, r5
			synchronized {
     5fe:	e7fa      	b.n	5f6 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x42>
     600:	4668      	mov	r0, sp
     602:	9301      	str	r3, [sp, #4]
     604:	f7ff ffcf 	bl	5a6 <_ZN7__GuardD1Ev>
			return ready ? (last1 - first1) : 0;
     608:	2d00      	cmp	r5, #0
     60a:	d0e8      	beq.n	5de <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2a>
     60c:	6b20      	ldr	r0, [r4, #48]	; 0x30
     60e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     610:	e7e9      	b.n	5e6 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x32>
	...

00000614 <_ZN26DoubleBufferedEPOutHandler7releaseEv>:

	void release() {
     614:	b5f0      	push	{r4, r5, r6, r7, lr}
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     616:	2501      	movs	r5, #1
		// Release OUT EP
		usbd.epBank0EnableTransferComplete(ep);
     618:	6846      	ldr	r6, [r0, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     61a:	7a03      	ldrb	r3, [r0, #8]
     61c:	6831      	ldr	r1, [r6, #0]
     61e:	015a      	lsls	r2, r3, #5
     620:	188c      	adds	r4, r1, r2
     622:	34ff      	adds	r4, #255	; 0xff
     624:	7aa7      	ldrb	r7, [r4, #10]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     626:	18b2      	adds	r2, r6, r2
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     628:	433d      	orrs	r5, r7
     62a:	72a5      	strb	r5, [r4, #10]
		usbd.epBank0SetMultiPacketSize(ep, size);
     62c:	68c4      	ldr	r4, [r0, #12]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     62e:	4d09      	ldr	r5, [pc, #36]	; (654 <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x40>)
     630:	6890      	ldr	r0, [r2, #8]
     632:	04a4      	lsls	r4, r4, #18
     634:	4028      	ands	r0, r5
     636:	0924      	lsrs	r4, r4, #4
     638:	4320      	orrs	r0, r4
     63a:	6090      	str	r0, [r2, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     63c:	6890      	ldr	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     63e:	3308      	adds	r3, #8
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     640:	0b80      	lsrs	r0, r0, #14
     642:	0380      	lsls	r0, r0, #14
     644:	6090      	str	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     646:	2240      	movs	r2, #64	; 0x40
     648:	015b      	lsls	r3, r3, #5
     64a:	18cb      	adds	r3, r1, r3
     64c:	7919      	ldrb	r1, [r3, #4]
     64e:	430a      	orrs	r2, r1
     650:	711a      	strb	r2, [r3, #4]
		usbd.epBank0SetByteCount(ep, 0);
		usbd.epBank0ResetReady(ep);
	}
     652:	bdf0      	pop	{r4, r5, r6, r7, pc}
     654:	f0003fff 	.word	0xf0003fff

00000658 <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
	virtual uint32_t recv(void *_data, uint32_t len)
     658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (current == 0) {
     65a:	6903      	ldr	r3, [r0, #16]
	virtual uint32_t recv(void *_data, uint32_t len)
     65c:	0004      	movs	r4, r0
     65e:	000e      	movs	r6, r1
     660:	0017      	movs	r7, r2
			synchronized {
     662:	4668      	mov	r0, sp
		if (current == 0) {
     664:	2b00      	cmp	r3, #0
     666:	d13d      	bne.n	6e4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x8c>
			synchronized {
     668:	f7ff ff96 	bl	598 <_ZN7__GuardC1Ev>
     66c:	9b01      	ldr	r3, [sp, #4]
				if (!ready0) {
     66e:	1d61      	adds	r1, r4, #5
     670:	3b01      	subs	r3, #1
			synchronized {
     672:	1c5a      	adds	r2, r3, #1
     674:	d00c      	beq.n	690 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x38>
				if (!ready0) {
     676:	7fcd      	ldrb	r5, [r1, #31]
     678:	1e5a      	subs	r2, r3, #1
     67a:	b2ed      	uxtb	r5, r5
     67c:	2d00      	cmp	r5, #0
     67e:	d105      	bne.n	68c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x34>
				synchronized {
     680:	4668      	mov	r0, sp
     682:	9301      	str	r3, [sp, #4]
     684:	f7ff ff8f 	bl	5a6 <_ZN7__GuardD1Ev>
	}
     688:	0028      	movs	r0, r5
     68a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     68c:	0013      	movs	r3, r2
     68e:	e7f0      	b.n	672 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1a>
			synchronized {
     690:	4668      	mov	r0, sp
     692:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first0 < last0; i++) {
     694:	2500      	movs	r5, #0
			synchronized {
     696:	f7ff ff86 	bl	5a6 <_ZN7__GuardD1Ev>
     69a:	69e3      	ldr	r3, [r4, #28]
			for (i=0; i<len && first0 < last0; i++) {
     69c:	42af      	cmp	r7, r5
     69e:	d002      	beq.n	6a6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x4e>
     6a0:	6a22      	ldr	r2, [r4, #32]
     6a2:	4293      	cmp	r3, r2
     6a4:	d357      	bcc.n	756 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfe>
			if (first0 == last0) {
     6a6:	6a22      	ldr	r2, [r4, #32]
     6a8:	4293      	cmp	r3, r2
     6aa:	d1ed      	bne.n	688 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first0 = 0;
     6ac:	2300      	movs	r3, #0
     6ae:	61e3      	str	r3, [r4, #28]
				current = 1;
     6b0:	3301      	adds	r3, #1
     6b2:	6123      	str	r3, [r4, #16]
				synchronized {
     6b4:	4668      	mov	r0, sp
     6b6:	f7ff ff6f 	bl	598 <_ZN7__GuardC1Ev>
					if (notify) {
     6ba:	0022      	movs	r2, r4
					ready0 = false;
     6bc:	2100      	movs	r1, #0
     6be:	9b01      	ldr	r3, [sp, #4]
     6c0:	1d67      	adds	r7, r4, #5
     6c2:	3b01      	subs	r3, #1
					if (notify) {
     6c4:	3235      	adds	r2, #53	; 0x35
				synchronized {
     6c6:	1c58      	adds	r0, r3, #1
     6c8:	d0da      	beq.n	680 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready0 = false;
     6ca:	77f9      	strb	r1, [r7, #31]
					if (notify) {
     6cc:	7810      	ldrb	r0, [r2, #0]
     6ce:	1e5e      	subs	r6, r3, #1
     6d0:	2800      	cmp	r0, #0
     6d2:	d005      	beq.n	6e0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x88>
						notify = false;
     6d4:	7011      	strb	r1, [r2, #0]
						release();
     6d6:	0020      	movs	r0, r4
     6d8:	9301      	str	r3, [sp, #4]
     6da:	f7ff ff9b 	bl	614 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     6de:	e7ec      	b.n	6ba <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x62>
					if (notify) {
     6e0:	0033      	movs	r3, r6
     6e2:	e7f0      	b.n	6c6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x6e>
			synchronized {
     6e4:	f7ff ff58 	bl	598 <_ZN7__GuardC1Ev>
				if (!ready1) {
     6e8:	0021      	movs	r1, r4
     6ea:	9b01      	ldr	r3, [sp, #4]
     6ec:	3134      	adds	r1, #52	; 0x34
     6ee:	3b01      	subs	r3, #1
			synchronized {
     6f0:	1c5a      	adds	r2, r3, #1
     6f2:	d006      	beq.n	702 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xaa>
				if (!ready1) {
     6f4:	780d      	ldrb	r5, [r1, #0]
     6f6:	1e5a      	subs	r2, r3, #1
     6f8:	b2ed      	uxtb	r5, r5
     6fa:	2d00      	cmp	r5, #0
     6fc:	d0c0      	beq.n	680 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
     6fe:	0013      	movs	r3, r2
     700:	e7f6      	b.n	6f0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x98>
			synchronized {
     702:	4668      	mov	r0, sp
     704:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first1 < last1; i++) {
     706:	2500      	movs	r5, #0
			synchronized {
     708:	f7ff ff4d 	bl	5a6 <_ZN7__GuardD1Ev>
     70c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			for (i=0; i<len && first1 < last1; i++) {
     70e:	42bd      	cmp	r5, r7
     710:	d002      	beq.n	718 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc0>
     712:	6b22      	ldr	r2, [r4, #48]	; 0x30
     714:	4293      	cmp	r3, r2
     716:	d326      	bcc.n	766 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x10e>
			if (first1 == last1) {
     718:	6b22      	ldr	r2, [r4, #48]	; 0x30
     71a:	4293      	cmp	r3, r2
     71c:	d1b4      	bne.n	688 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first1 = 0;
     71e:	2300      	movs	r3, #0
				synchronized {
     720:	4668      	mov	r0, sp
				first1 = 0;
     722:	62e3      	str	r3, [r4, #44]	; 0x2c
				current = 0;
     724:	6123      	str	r3, [r4, #16]
				synchronized {
     726:	f7ff ff37 	bl	598 <_ZN7__GuardC1Ev>
					ready1 = false;
     72a:	0027      	movs	r7, r4
					if (notify) {
     72c:	0022      	movs	r2, r4
					ready1 = false;
     72e:	2100      	movs	r1, #0
     730:	9b01      	ldr	r3, [sp, #4]
     732:	3734      	adds	r7, #52	; 0x34
     734:	3b01      	subs	r3, #1
					if (notify) {
     736:	3235      	adds	r2, #53	; 0x35
				synchronized {
     738:	1c58      	adds	r0, r3, #1
     73a:	d0a1      	beq.n	680 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready1 = false;
     73c:	7039      	strb	r1, [r7, #0]
					if (notify) {
     73e:	7810      	ldrb	r0, [r2, #0]
     740:	1e5e      	subs	r6, r3, #1
     742:	2800      	cmp	r0, #0
     744:	d005      	beq.n	752 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfa>
						notify = false;
     746:	7011      	strb	r1, [r2, #0]
						release();
     748:	0020      	movs	r0, r4
     74a:	9301      	str	r3, [sp, #4]
     74c:	f7ff ff62 	bl	614 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     750:	e7eb      	b.n	72a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd2>
     752:	0033      	movs	r3, r6
     754:	e7f0      	b.n	738 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xe0>
				data[i] = data0[first0++];
     756:	1c5a      	adds	r2, r3, #1
     758:	61e2      	str	r2, [r4, #28]
     75a:	69a2      	ldr	r2, [r4, #24]
     75c:	18d3      	adds	r3, r2, r3
     75e:	781b      	ldrb	r3, [r3, #0]
     760:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first0 < last0; i++) {
     762:	3501      	adds	r5, #1
     764:	e799      	b.n	69a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x42>
				data[i] = data1[first1++];
     766:	1c5a      	adds	r2, r3, #1
     768:	62e2      	str	r2, [r4, #44]	; 0x2c
     76a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     76c:	18d3      	adds	r3, r2, r3
     76e:	781b      	ldrb	r3, [r3, #0]
     770:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first1 < last1; i++) {
     772:	3501      	adds	r5, #1
     774:	e7ca      	b.n	70c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xb4>

00000776 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
	virtual void handleEndpoint()
     776:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     778:	7a02      	ldrb	r2, [r0, #8]
		if (usbd.epBank0IsTransferComplete(ep))
     77a:	6843      	ldr	r3, [r0, #4]
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     77c:	0011      	movs	r1, r2
	virtual void handleEndpoint()
     77e:	0004      	movs	r4, r0
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     780:	3108      	adds	r1, #8
     782:	6818      	ldr	r0, [r3, #0]
     784:	0149      	lsls	r1, r1, #5
     786:	1841      	adds	r1, r0, r1
     788:	79c8      	ldrb	r0, [r1, #7]
		if (usbd.epBank0IsTransferComplete(ep))
     78a:	07c0      	lsls	r0, r0, #31
     78c:	d527      	bpl.n	7de <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
     78e:	2501      	movs	r5, #1
     790:	0152      	lsls	r2, r2, #5
     792:	71cd      	strb	r5, [r1, #7]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     794:	189b      	adds	r3, r3, r2
     796:	689a      	ldr	r2, [r3, #8]
			if (incoming == 0) {
     798:	6961      	ldr	r1, [r4, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     79a:	0492      	lsls	r2, r2, #18
     79c:	0c92      	lsrs	r2, r2, #18
			if (incoming == 0) {
     79e:	2900      	cmp	r1, #0
     7a0:	d121      	bne.n	7e6 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x70>
				last0 = usbd.epBank0ByteCount(ep);
     7a2:	6222      	str	r2, [r4, #32]
				if (last0 != 0) {
     7a4:	6a22      	ldr	r2, [r4, #32]
     7a6:	2a00      	cmp	r2, #0
     7a8:	d03e      	beq.n	828 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     7aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					incoming = 1;
     7ac:	6165      	str	r5, [r4, #20]
					synchronized {
     7ae:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     7b0:	605a      	str	r2, [r3, #4]
					synchronized {
     7b2:	f7ff fef1 	bl	598 <_ZN7__GuardC1Ev>
						if (ready1) {
     7b6:	0027      	movs	r7, r4
     7b8:	0021      	movs	r1, r4
     7ba:	9b01      	ldr	r3, [sp, #4]
						ready0 = true;
     7bc:	1d66      	adds	r6, r4, #5
     7be:	3b01      	subs	r3, #1
						if (ready1) {
     7c0:	3734      	adds	r7, #52	; 0x34
     7c2:	3135      	adds	r1, #53	; 0x35
					synchronized {
     7c4:	1c5a      	adds	r2, r3, #1
     7c6:	d02b      	beq.n	820 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready0 = true;
     7c8:	77f5      	strb	r5, [r6, #31]
						if (ready1) {
     7ca:	783a      	ldrb	r2, [r7, #0]
     7cc:	1e58      	subs	r0, r3, #1
     7ce:	b2d2      	uxtb	r2, r2
     7d0:	2a00      	cmp	r2, #0
     7d2:	d005      	beq.n	7e0 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x6a>
     7d4:	9301      	str	r3, [sp, #4]
							return;
     7d6:	4668      	mov	r0, sp
							notify = true;
     7d8:	700d      	strb	r5, [r1, #0]
							return;
     7da:	f7ff fee4 	bl	5a6 <_ZN7__GuardD1Ev>
	}
     7de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
						notify = false;
     7e0:	700a      	strb	r2, [r1, #0]
					synchronized {
     7e2:	0003      	movs	r3, r0
     7e4:	e7ee      	b.n	7c4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x4e>
				last1 = usbd.epBank0ByteCount(ep);
     7e6:	6322      	str	r2, [r4, #48]	; 0x30
				if (last1 != 0) {
     7e8:	6b22      	ldr	r2, [r4, #48]	; 0x30
     7ea:	2a00      	cmp	r2, #0
     7ec:	d01c      	beq.n	828 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
					incoming = 0;
     7ee:	2200      	movs	r2, #0
     7f0:	6162      	str	r2, [r4, #20]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     7f2:	69a2      	ldr	r2, [r4, #24]
					synchronized {
     7f4:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     7f6:	605a      	str	r2, [r3, #4]
					synchronized {
     7f8:	f7ff fece 	bl	598 <_ZN7__GuardC1Ev>
						ready1 = true;
     7fc:	0026      	movs	r6, r4
     7fe:	0021      	movs	r1, r4
     800:	9b01      	ldr	r3, [sp, #4]
     802:	3634      	adds	r6, #52	; 0x34
     804:	3b01      	subs	r3, #1
						if (ready0) {
     806:	1d67      	adds	r7, r4, #5
     808:	3135      	adds	r1, #53	; 0x35
					synchronized {
     80a:	1c5a      	adds	r2, r3, #1
     80c:	d008      	beq.n	820 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready1 = true;
     80e:	7035      	strb	r5, [r6, #0]
						if (ready0) {
     810:	7ffa      	ldrb	r2, [r7, #31]
     812:	1e58      	subs	r0, r3, #1
     814:	b2d2      	uxtb	r2, r2
     816:	2a00      	cmp	r2, #0
     818:	d1dc      	bne.n	7d4 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x5e>
						notify = false;
     81a:	700a      	strb	r2, [r1, #0]
					synchronized {
     81c:	0003      	movs	r3, r0
     81e:	e7f4      	b.n	80a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x94>
     820:	4668      	mov	r0, sp
     822:	9301      	str	r3, [sp, #4]
     824:	f7ff febf 	bl	5a6 <_ZN7__GuardD1Ev>
			release();
     828:	0020      	movs	r0, r4
     82a:	f7ff fef3 	bl	614 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     82e:	e7d6      	b.n	7de <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>

00000830 <_ZN14USBDeviceClass14SendInterfacesEPm>:
{
     830:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
     832:	466b      	mov	r3, sp
     834:	1ddc      	adds	r4, r3, #7
     836:	2300      	movs	r3, #0
{
     838:	000d      	movs	r5, r1
	total[0] += CDC_GetInterface(&interfaces);
     83a:	0020      	movs	r0, r4
	uint8_t interfaces = 0;
     83c:	7023      	strb	r3, [r4, #0]
	total[0] += CDC_GetInterface(&interfaces);
     83e:	f001 fa57 	bl	1cf0 <_Z16CDC_GetInterfacePh>
     842:	682b      	ldr	r3, [r5, #0]
     844:	1818      	adds	r0, r3, r0
     846:	6028      	str	r0, [r5, #0]
	total[0] += PluggableUSB().getInterface(&interfaces);
     848:	f001 faf6 	bl	1e38 <_Z12PluggableUSBv>
     84c:	0021      	movs	r1, r4
     84e:	f001 faaf 	bl	1db0 <_ZN13PluggableUSB_12getInterfaceEPh>
     852:	682b      	ldr	r3, [r5, #0]
     854:	1818      	adds	r0, r3, r0
     856:	6028      	str	r0, [r5, #0]
	return interfaces;
     858:	7820      	ldrb	r0, [r4, #0]
}
     85a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000085c <_ZN14USBDeviceClass14handleEndpointEh>:
	if (ep == CDC_ENDPOINT_IN)
     85c:	2903      	cmp	r1, #3
     85e:	d10e      	bne.n	87e <_ZN14USBDeviceClass14handleEndpointEh+0x22>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
     860:	2280      	movs	r2, #128	; 0x80
     862:	4b0e      	ldr	r3, [pc, #56]	; (89c <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
     864:	3162      	adds	r1, #98	; 0x62
     866:	681b      	ldr	r3, [r3, #0]
     868:	31ff      	adds	r1, #255	; 0xff
     86a:	5c58      	ldrb	r0, [r3, r1]
     86c:	4252      	negs	r2, r2
     86e:	4302      	orrs	r2, r0
     870:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     872:	2268      	movs	r2, #104	; 0x68
     874:	3963      	subs	r1, #99	; 0x63
     876:	39ff      	subs	r1, #255	; 0xff
     878:	32ff      	adds	r2, #255	; 0xff
     87a:	5499      	strb	r1, [r3, r2]
}
     87c:	4770      	bx	lr
	if (ep == CDC_ENDPOINT_ACM)
     87e:	2901      	cmp	r1, #1
     880:	d1fc      	bne.n	87c <_ZN14USBDeviceClass14handleEndpointEh+0x20>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
     882:	2280      	movs	r2, #128	; 0x80
     884:	4b05      	ldr	r3, [pc, #20]	; (89c <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
     886:	3124      	adds	r1, #36	; 0x24
     888:	681b      	ldr	r3, [r3, #0]
     88a:	31ff      	adds	r1, #255	; 0xff
     88c:	5c58      	ldrb	r0, [r3, r1]
     88e:	4252      	negs	r2, r2
     890:	4302      	orrs	r2, r0
     892:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     894:	3923      	subs	r1, #35	; 0x23
     896:	39ff      	subs	r1, #255	; 0xff
     898:	2228      	movs	r2, #40	; 0x28
     89a:	e7ed      	b.n	878 <_ZN14USBDeviceClass14handleEndpointEh+0x1c>
     89c:	200005dc 	.word	0x200005dc

000008a0 <_ZN14USBDeviceClass4initEv>:
{
     8a0:	b570      	push	{r4, r5, r6, lr}
	txLEDPulse = 0;
     8a2:	2500      	movs	r5, #0
     8a4:	4b2f      	ldr	r3, [pc, #188]	; (964 <_ZN14USBDeviceClass4initEv+0xc4>)
	pinMode(PIN_LED_TXL, OUTPUT);
     8a6:	2101      	movs	r1, #1
{
     8a8:	0004      	movs	r4, r0
	pinMode(PIN_LED_TXL, OUTPUT);
     8aa:	201a      	movs	r0, #26
	txLEDPulse = 0;
     8ac:	701d      	strb	r5, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
     8ae:	f000 fe2b 	bl	1508 <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
     8b2:	2101      	movs	r1, #1
     8b4:	201a      	movs	r0, #26
     8b6:	f000 fe73 	bl	15a0 <digitalWrite>
	rxLEDPulse = 0;
     8ba:	4b2b      	ldr	r3, [pc, #172]	; (968 <_ZN14USBDeviceClass4initEv+0xc8>)
	pinMode(PIN_LED_RXL, OUTPUT);
     8bc:	2101      	movs	r1, #1
     8be:	2019      	movs	r0, #25
	rxLEDPulse = 0;
     8c0:	701d      	strb	r5, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
     8c2:	f000 fe21 	bl	1508 <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
     8c6:	2101      	movs	r1, #1
     8c8:	2019      	movs	r0, #25
     8ca:	f000 fe69 	bl	15a0 <digitalWrite>
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
     8ce:	2320      	movs	r3, #32
     8d0:	4a26      	ldr	r2, [pc, #152]	; (96c <_ZN14USBDeviceClass4initEv+0xcc>)
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
     8d2:	200f      	movs	r0, #15
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
     8d4:	69d1      	ldr	r1, [r2, #28]
     8d6:	430b      	orrs	r3, r1
     8d8:	61d3      	str	r3, [r2, #28]
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
     8da:	2201      	movs	r2, #1
     8dc:	4924      	ldr	r1, [pc, #144]	; (970 <_ZN14USBDeviceClass4initEv+0xd0>)
     8de:	780b      	ldrb	r3, [r1, #0]
     8e0:	4313      	orrs	r3, r2
     8e2:	700b      	strb	r3, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
     8e4:	4b23      	ldr	r3, [pc, #140]	; (974 <_ZN14USBDeviceClass4initEv+0xd4>)
     8e6:	7819      	ldrb	r1, [r3, #0]
     8e8:	4381      	bics	r1, r0
     8ea:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
     8ec:	2106      	movs	r1, #6
     8ee:	781d      	ldrb	r5, [r3, #0]
     8f0:	4329      	orrs	r1, r5
     8f2:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
     8f4:	4920      	ldr	r1, [pc, #128]	; (978 <_ZN14USBDeviceClass4initEv+0xd8>)
     8f6:	780d      	ldrb	r5, [r1, #0]
     8f8:	432a      	orrs	r2, r5
     8fa:	700a      	strb	r2, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
     8fc:	781a      	ldrb	r2, [r3, #0]
     8fe:	4002      	ands	r2, r0
     900:	701a      	strb	r2, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
     902:	2260      	movs	r2, #96	; 0x60
     904:	7819      	ldrb	r1, [r3, #0]
     906:	430a      	orrs	r2, r1
     908:	701a      	strb	r2, [r3, #0]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
     90a:	4b1c      	ldr	r3, [pc, #112]	; (97c <_ZN14USBDeviceClass4initEv+0xdc>)
     90c:	4a1c      	ldr	r2, [pc, #112]	; (980 <_ZN14USBDeviceClass4initEv+0xe0>)
     90e:	805a      	strh	r2, [r3, #2]
	while (GCLK->STATUS.bit.SYNCBUSY)
     910:	785a      	ldrb	r2, [r3, #1]
     912:	09d2      	lsrs	r2, r2, #7
     914:	d1fc      	bne.n	910 <_ZN14USBDeviceClass4initEv+0x70>
	USB_SetHandler(&UDD_Handler);
     916:	481b      	ldr	r0, [pc, #108]	; (984 <_ZN14USBDeviceClass4initEv+0xe4>)
     918:	f7ff fc66 	bl	1e8 <USB_SetHandler>
	usbd.reset();
     91c:	4d1a      	ldr	r5, [pc, #104]	; (988 <_ZN14USBDeviceClass4initEv+0xe8>)
     91e:	0028      	movs	r0, r5
     920:	f7ff fdf8 	bl	514 <_ZN20USBDevice_SAMD21G18x5resetEv>
	usbd.calibrate();
     924:	0028      	movs	r0, r5
     926:	f7ff fe07 	bl	538 <_ZN20USBDevice_SAMD21G18x9calibrateEv>
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
     92a:	217f      	movs	r1, #127	; 0x7f
     92c:	682b      	ldr	r3, [r5, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     92e:	20c1      	movs	r0, #193	; 0xc1
     930:	781a      	ldrb	r2, [r3, #0]
     932:	0080      	lsls	r0, r0, #2
     934:	400a      	ands	r2, r1
     936:	701a      	strb	r2, [r3, #0]
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
     938:	2204      	movs	r2, #4
     93a:	7819      	ldrb	r1, [r3, #0]
     93c:	430a      	orrs	r2, r1
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
     93e:	210c      	movs	r1, #12
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
     940:	701a      	strb	r2, [r3, #0]
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
     942:	891a      	ldrh	r2, [r3, #8]
     944:	438a      	bics	r2, r1
     946:	4911      	ldr	r1, [pc, #68]	; (98c <_ZN14USBDeviceClass4initEv+0xec>)
     948:	811a      	strh	r2, [r3, #8]
     94a:	580a      	ldr	r2, [r1, r0]
     94c:	0212      	lsls	r2, r2, #8
     94e:	0a12      	lsrs	r2, r2, #8
     950:	500a      	str	r2, [r1, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     952:	2280      	movs	r2, #128	; 0x80
     954:	600a      	str	r2, [r1, #0]
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
     956:	7819      	ldrb	r1, [r3, #0]
     958:	3a7e      	subs	r2, #126	; 0x7e
     95a:	430a      	orrs	r2, r1
     95c:	701a      	strb	r2, [r3, #0]
	initialized = true;
     95e:	2301      	movs	r3, #1
     960:	7023      	strb	r3, [r4, #0]
}
     962:	bd70      	pop	{r4, r5, r6, pc}
     964:	20000145 	.word	0x20000145
     968:	20000144 	.word	0x20000144
     96c:	40000400 	.word	0x40000400
     970:	41004458 	.word	0x41004458
     974:	4100443c 	.word	0x4100443c
     978:	41004459 	.word	0x41004459
     97c:	40000c00 	.word	0x40000c00
     980:	00004006 	.word	0x00004006
     984:	00001395 	.word	0x00001395
     988:	200005dc 	.word	0x200005dc
     98c:	e000e100 	.word	0xe000e100

00000990 <_ZN14USBDeviceClass6attachEv>:
	if (!initialized)
     990:	7800      	ldrb	r0, [r0, #0]
     992:	2800      	cmp	r0, #0
     994:	d010      	beq.n	9b8 <_ZN14USBDeviceClass6attachEv+0x28>
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
     996:	2101      	movs	r1, #1
     998:	4b08      	ldr	r3, [pc, #32]	; (9bc <_ZN14USBDeviceClass6attachEv+0x2c>)
     99a:	681b      	ldr	r3, [r3, #0]
     99c:	891a      	ldrh	r2, [r3, #8]
     99e:	438a      	bics	r2, r1
     9a0:	811a      	strh	r2, [r3, #8]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
     9a2:	2208      	movs	r2, #8
     9a4:	8b19      	ldrh	r1, [r3, #24]
     9a6:	430a      	orrs	r2, r1
     9a8:	831a      	strh	r2, [r3, #24]
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
     9aa:	2204      	movs	r2, #4
     9ac:	8b19      	ldrh	r1, [r3, #24]
     9ae:	430a      	orrs	r2, r1
     9b0:	831a      	strh	r2, [r3, #24]
	_usbConfiguration = 0;
     9b2:	2200      	movs	r2, #0
     9b4:	4b02      	ldr	r3, [pc, #8]	; (9c0 <_ZN14USBDeviceClass6attachEv+0x30>)
     9b6:	601a      	str	r2, [r3, #0]
}
     9b8:	4770      	bx	lr
     9ba:	46c0      	nop			; (mov r8, r8)
     9bc:	200005dc 	.word	0x200005dc
     9c0:	200005d4 	.word	0x200005d4

000009c4 <_ZN14USBDeviceClass10setAddressEm>:
{
     9c4:	b510      	push	{r4, lr}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     9c6:	4a0f      	ldr	r2, [pc, #60]	; (a04 <_ZN14USBDeviceClass10setAddressEm+0x40>)
     9c8:	6993      	ldr	r3, [r2, #24]
     9ca:	0b9b      	lsrs	r3, r3, #14
     9cc:	039b      	lsls	r3, r3, #14
     9ce:	6193      	str	r3, [r2, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     9d0:	6813      	ldr	r3, [r2, #0]
     9d2:	2202      	movs	r2, #2
     9d4:	33ff      	adds	r3, #255	; 0xff
     9d6:	721a      	strb	r2, [r3, #8]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
     9d8:	7998      	ldrb	r0, [r3, #6]
     9da:	3a82      	subs	r2, #130	; 0x82
     9dc:	4302      	orrs	r2, r0
     9de:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
     9e0:	7a1a      	ldrb	r2, [r3, #8]
	while (!usbd.epBank1IsTransferComplete(0)) {}
     9e2:	0792      	lsls	r2, r2, #30
     9e4:	d5fc      	bpl.n	9e0 <_ZN14USBDeviceClass10setAddressEm+0x1c>
	USB->DEVICE.DADD.bit.DADD = addr; // Address
     9e6:	247f      	movs	r4, #127	; 0x7f
     9e8:	4a07      	ldr	r2, [pc, #28]	; (a08 <_ZN14USBDeviceClass10setAddressEm+0x44>)
     9ea:	4021      	ands	r1, r4
     9ec:	7a93      	ldrb	r3, [r2, #10]
     9ee:	0008      	movs	r0, r1
     9f0:	43a3      	bics	r3, r4
     9f2:	0019      	movs	r1, r3
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
     9f4:	2380      	movs	r3, #128	; 0x80
	USB->DEVICE.DADD.bit.DADD = addr; // Address
     9f6:	4301      	orrs	r1, r0
     9f8:	7291      	strb	r1, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
     9fa:	7a91      	ldrb	r1, [r2, #10]
     9fc:	425b      	negs	r3, r3
     9fe:	430b      	orrs	r3, r1
     a00:	7293      	strb	r3, [r2, #10]
}
     a02:	bd10      	pop	{r4, pc}
     a04:	200005dc 	.word	0x200005dc
     a08:	41005000 	.word	0x41005000

00000a0c <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
     a0c:	b510      	push	{r4, lr}
	if (CDC_ACM_INTERFACE == i)
     a0e:	790b      	ldrb	r3, [r1, #4]
{
     a10:	000c      	movs	r4, r1
	if (CDC_ACM_INTERFACE == i)
     a12:	2b00      	cmp	r3, #0
     a14:	d10c      	bne.n	a30 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x24>
		if (CDC_Setup(setup) == false) {
     a16:	0008      	movs	r0, r1
     a18:	f001 f978 	bl	1d0c <_Z9CDC_SetupR8USBSetup>
     a1c:	2800      	cmp	r0, #0
     a1e:	d001      	beq.n	a24 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x18>
		return true;
     a20:	2001      	movs	r0, #1
}
     a22:	bd10      	pop	{r4, pc}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     a24:	4a09      	ldr	r2, [pc, #36]	; (a4c <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
     a26:	6993      	ldr	r3, [r2, #24]
     a28:	0b9b      	lsrs	r3, r3, #14
     a2a:	039b      	lsls	r3, r3, #14
     a2c:	6193      	str	r3, [r2, #24]
     a2e:	e7f7      	b.n	a20 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
	bool ret = PluggableUSB().setup(setup);
     a30:	f001 fa02 	bl	1e38 <_Z12PluggableUSBv>
     a34:	0021      	movs	r1, r4
     a36:	f001 f9ee 	bl	1e16 <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
     a3a:	2800      	cmp	r0, #0
     a3c:	d1f0      	bne.n	a20 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
     a3e:	4a03      	ldr	r2, [pc, #12]	; (a4c <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
     a40:	6993      	ldr	r3, [r2, #24]
     a42:	0b9b      	lsrs	r3, r3, #14
     a44:	039b      	lsls	r3, r3, #14
     a46:	6193      	str	r3, [r2, #24]
     a48:	e7eb      	b.n	a22 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x16>
     a4a:	46c0      	nop			; (mov r8, r8)
     a4c:	200005dc 	.word	0x200005dc

00000a50 <_ZN14USBDeviceClass6initEPEmm>:
{
     a50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     a52:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
     a54:	2a83      	cmp	r2, #131	; 0x83
     a56:	d119      	bne.n	a8c <_ZN14USBDeviceClass6initEPEmm+0x3c>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     a58:	b2cb      	uxtb	r3, r1
     a5a:	4c40      	ldr	r4, [pc, #256]	; (b5c <_ZN14USBDeviceClass6initEPEmm+0x10c>)
     a5c:	015a      	lsls	r2, r3, #5
     a5e:	18a2      	adds	r2, r4, r2
     a60:	6991      	ldr	r1, [r2, #24]
     a62:	483f      	ldr	r0, [pc, #252]	; (b60 <_ZN14USBDeviceClass6initEPEmm+0x110>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
     a64:	01ad      	lsls	r5, r5, #6
     a66:	4008      	ands	r0, r1
     a68:	21c0      	movs	r1, #192	; 0xc0
     a6a:	0589      	lsls	r1, r1, #22
     a6c:	4301      	orrs	r1, r0
     a6e:	6191      	str	r1, [r2, #24]
     a70:	493c      	ldr	r1, [pc, #240]	; (b64 <_ZN14USBDeviceClass6initEPEmm+0x114>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     a72:	6820      	ldr	r0, [r4, #0]
     a74:	194d      	adds	r5, r1, r5
     a76:	2170      	movs	r1, #112	; 0x70
     a78:	3308      	adds	r3, #8
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     a7a:	6155      	str	r5, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     a7c:	015b      	lsls	r3, r3, #5
     a7e:	5c1a      	ldrb	r2, [r3, r0]
     a80:	438a      	bics	r2, r1
     a82:	0011      	movs	r1, r2
     a84:	2240      	movs	r2, #64	; 0x40
     a86:	430a      	orrs	r2, r1
     a88:	541a      	strb	r2, [r3, r0]
}
     a8a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
     a8c:	2a02      	cmp	r2, #2
     a8e:	d13d      	bne.n	b0c <_ZN14USBDeviceClass6initEPEmm+0xbc>
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
     a90:	2038      	movs	r0, #56	; 0x38
     a92:	f7ff fbeb 	bl	26c <_Znwj>
		notify(false)
     a96:	4b34      	ldr	r3, [pc, #208]	; (b68 <_ZN14USBDeviceClass6initEPEmm+0x118>)
     a98:	2780      	movs	r7, #128	; 0x80
     a9a:	6003      	str	r3, [r0, #0]
     a9c:	2300      	movs	r3, #0
     a9e:	4e2f      	ldr	r6, [pc, #188]	; (b5c <_ZN14USBDeviceClass6initEPEmm+0x10c>)
     aa0:	007f      	lsls	r7, r7, #1
     aa2:	1d42      	adds	r2, r0, #5
     aa4:	6203      	str	r3, [r0, #32]
     aa6:	6103      	str	r3, [r0, #16]
     aa8:	6143      	str	r3, [r0, #20]
     aaa:	61c3      	str	r3, [r0, #28]
     aac:	6046      	str	r6, [r0, #4]
     aae:	6085      	str	r5, [r0, #8]
     ab0:	60c7      	str	r7, [r0, #12]
     ab2:	77d3      	strb	r3, [r2, #31]
     ab4:	322f      	adds	r2, #47	; 0x2f
     ab6:	62c3      	str	r3, [r0, #44]	; 0x2c
     ab8:	6303      	str	r3, [r0, #48]	; 0x30
     aba:	0004      	movs	r4, r0
     abc:	7013      	strb	r3, [r2, #0]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
     abe:	0038      	movs	r0, r7
		notify(false)
     ac0:	7053      	strb	r3, [r2, #1]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
     ac2:	f001 fae5 	bl	2090 <malloc>
     ac6:	9001      	str	r0, [sp, #4]
     ac8:	61a0      	str	r0, [r4, #24]
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
     aca:	0038      	movs	r0, r7
     acc:	f001 fae0 	bl	2090 <malloc>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     ad0:	b2eb      	uxtb	r3, r5
     ad2:	015a      	lsls	r2, r3, #5
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
     ad4:	62a0      	str	r0, [r4, #40]	; 0x28
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     ad6:	18b2      	adds	r2, r6, r2
     ad8:	6891      	ldr	r1, [r2, #8]
     ada:	4821      	ldr	r0, [pc, #132]	; (b60 <_ZN14USBDeviceClass6initEPEmm+0x110>)
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     adc:	3308      	adds	r3, #8
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     ade:	4008      	ands	r0, r1
     ae0:	21c0      	movs	r1, #192	; 0xc0
     ae2:	0589      	lsls	r1, r1, #22
     ae4:	4301      	orrs	r1, r0
     ae6:	6091      	str	r1, [r2, #8]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     ae8:	6830      	ldr	r0, [r6, #0]
     aea:	2607      	movs	r6, #7
     aec:	015b      	lsls	r3, r3, #5
     aee:	5c19      	ldrb	r1, [r3, r0]
     af0:	00ad      	lsls	r5, r5, #2
     af2:	43b1      	bics	r1, r6
     af4:	000e      	movs	r6, r1
     af6:	2103      	movs	r1, #3
     af8:	4331      	orrs	r1, r6
     afa:	5419      	strb	r1, [r3, r0]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     afc:	9b01      	ldr	r3, [sp, #4]
		release();
     afe:	0020      	movs	r0, r4
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     b00:	6053      	str	r3, [r2, #4]
		release();
     b02:	f7ff fd87 	bl	614 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     b06:	4b19      	ldr	r3, [pc, #100]	; (b6c <_ZN14USBDeviceClass6initEPEmm+0x11c>)
     b08:	50ec      	str	r4, [r5, r3]
     b0a:	e7be      	b.n	a8a <_ZN14USBDeviceClass6initEPEmm+0x3a>
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
     b0c:	2a82      	cmp	r2, #130	; 0x82
     b0e:	d11f      	bne.n	b50 <_ZN14USBDeviceClass6initEPEmm+0x100>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     b10:	b2cb      	uxtb	r3, r1
     b12:	4c12      	ldr	r4, [pc, #72]	; (b5c <_ZN14USBDeviceClass6initEPEmm+0x10c>)
     b14:	015a      	lsls	r2, r3, #5
     b16:	18a2      	adds	r2, r4, r2
     b18:	6991      	ldr	r1, [r2, #24]
     b1a:	4811      	ldr	r0, [pc, #68]	; (b60 <_ZN14USBDeviceClass6initEPEmm+0x110>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
     b1c:	01ad      	lsls	r5, r5, #6
     b1e:	4008      	ands	r0, r1
     b20:	21c0      	movs	r1, #192	; 0xc0
     b22:	0589      	lsls	r1, r1, #22
     b24:	4301      	orrs	r1, r0
     b26:	6191      	str	r1, [r2, #24]
     b28:	490e      	ldr	r1, [pc, #56]	; (b64 <_ZN14USBDeviceClass6initEPEmm+0x114>)
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
     b2a:	3308      	adds	r3, #8
     b2c:	194d      	adds	r5, r1, r5
     b2e:	2180      	movs	r1, #128	; 0x80
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     b30:	6155      	str	r5, [r2, #20]
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
     b32:	6822      	ldr	r2, [r4, #0]
     b34:	015b      	lsls	r3, r3, #5
     b36:	18d0      	adds	r0, r2, r3
     b38:	7904      	ldrb	r4, [r0, #4]
     b3a:	4249      	negs	r1, r1
     b3c:	4321      	orrs	r1, r4
     b3e:	7101      	strb	r1, [r0, #4]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     b40:	2070      	movs	r0, #112	; 0x70
     b42:	5c99      	ldrb	r1, [r3, r2]
     b44:	4381      	bics	r1, r0
     b46:	0008      	movs	r0, r1
     b48:	2130      	movs	r1, #48	; 0x30
     b4a:	4301      	orrs	r1, r0
     b4c:	5499      	strb	r1, [r3, r2]
     b4e:	e79c      	b.n	a8a <_ZN14USBDeviceClass6initEPEmm+0x3a>
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
     b50:	2a00      	cmp	r2, #0
     b52:	d19a      	bne.n	a8a <_ZN14USBDeviceClass6initEPEmm+0x3a>
     b54:	0008      	movs	r0, r1
     b56:	f7ff fc99 	bl	48c <_ZN14USBDeviceClass6initEPEmm.part.5>
}
     b5a:	e796      	b.n	a8a <_ZN14USBDeviceClass6initEPEmm+0x3a>
     b5c:	200005dc 	.word	0x200005dc
     b60:	8fffffff 	.word	0x8fffffff
     b64:	20000150 	.word	0x20000150
     b68:	00002200 	.word	0x00002200
     b6c:	20000128 	.word	0x20000128

00000b70 <_ZN14USBDeviceClass13initEndpointsEv>:
void USBDeviceClass::initEndpoints() {
     b70:	b570      	push	{r4, r5, r6, lr}
     b72:	0005      	movs	r5, r0
     b74:	2401      	movs	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
     b76:	4b06      	ldr	r3, [pc, #24]	; (b90 <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
     b78:	00a2      	lsls	r2, r4, #2
     b7a:	58d2      	ldr	r2, [r2, r3]
     b7c:	2a00      	cmp	r2, #0
     b7e:	d005      	beq.n	b8c <_ZN14USBDeviceClass13initEndpointsEv+0x1c>
		initEP(i, EndPoints[i]);
     b80:	0021      	movs	r1, r4
     b82:	0028      	movs	r0, r5
     b84:	f7ff ff64 	bl	a50 <_ZN14USBDeviceClass6initEPEmm>
     b88:	3401      	adds	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
     b8a:	e7f4      	b.n	b76 <_ZN14USBDeviceClass13initEndpointsEv+0x6>
}
     b8c:	bd70      	pop	{r4, r5, r6, pc}
     b8e:	46c0      	nop			; (mov r8, r8)
     b90:	20000004 	.word	0x20000004

00000b94 <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
     b94:	4b08      	ldr	r3, [pc, #32]	; (bb8 <_ZN14USBDeviceClass9availableEm+0x24>)
     b96:	008a      	lsls	r2, r1, #2
     b98:	58d0      	ldr	r0, [r2, r3]
{
     b9a:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
     b9c:	2800      	cmp	r0, #0
     b9e:	d003      	beq.n	ba8 <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
     ba0:	6803      	ldr	r3, [r0, #0]
     ba2:	689b      	ldr	r3, [r3, #8]
     ba4:	4798      	blx	r3
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
     ba6:	bd10      	pop	{r4, pc}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     ba8:	b2c9      	uxtb	r1, r1
     baa:	4b04      	ldr	r3, [pc, #16]	; (bbc <_ZN14USBDeviceClass9availableEm+0x28>)
     bac:	0149      	lsls	r1, r1, #5
     bae:	1859      	adds	r1, r3, r1
     bb0:	6888      	ldr	r0, [r1, #8]
     bb2:	0480      	lsls	r0, r0, #18
     bb4:	0c80      	lsrs	r0, r0, #18
		return usbd.epBank0ByteCount(ep);
     bb6:	e7f6      	b.n	ba6 <_ZN14USBDeviceClass9availableEm+0x12>
     bb8:	20000128 	.word	0x20000128
     bbc:	200005dc 	.word	0x200005dc

00000bc0 <_ZN14USBDeviceClass5flushEm>:
{
     bc0:	b510      	push	{r4, lr}
     bc2:	000c      	movs	r4, r1
	if (available(ep)) {
     bc4:	f7ff ffe6 	bl	b94 <_ZN14USBDeviceClass9availableEm>
     bc8:	2800      	cmp	r0, #0
     bca:	d00c      	beq.n	be6 <_ZN14USBDeviceClass5flushEm+0x26>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
     bcc:	4b06      	ldr	r3, [pc, #24]	; (be8 <_ZN14USBDeviceClass5flushEm+0x28>)
     bce:	b2e4      	uxtb	r4, r4
     bd0:	681b      	ldr	r3, [r3, #0]
     bd2:	3408      	adds	r4, #8
     bd4:	0164      	lsls	r4, r4, #5
     bd6:	191c      	adds	r4, r3, r4
     bd8:	2380      	movs	r3, #128	; 0x80
     bda:	7962      	ldrb	r2, [r4, #5]
     bdc:	425b      	negs	r3, r3
     bde:	4313      	orrs	r3, r2
     be0:	7163      	strb	r3, [r4, #5]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     be2:	2302      	movs	r3, #2
     be4:	71e3      	strb	r3, [r4, #7]
}
     be6:	bd10      	pop	{r4, pc}
     be8:	200005dc 	.word	0x200005dc

00000bec <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:
		return c;
	}
}

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
     bec:	b570      	push	{r4, r5, r6, lr}
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
     bee:	4b13      	ldr	r3, [pc, #76]	; (c3c <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x50>)
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     bf0:	b2cc      	uxtb	r4, r1
     bf2:	4a13      	ldr	r2, [pc, #76]	; (c40 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
     bf4:	0160      	lsls	r0, r4, #5
     bf6:	0189      	lsls	r1, r1, #6
     bf8:	1859      	adds	r1, r3, r1
     bfa:	1813      	adds	r3, r2, r0
     bfc:	6059      	str	r1, [r3, #4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     bfe:	6899      	ldr	r1, [r3, #8]
     c00:	4d10      	ldr	r5, [pc, #64]	; (c44 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     c02:	3408      	adds	r4, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     c04:	400d      	ands	r5, r1
     c06:	2180      	movs	r1, #128	; 0x80
     c08:	0289      	lsls	r1, r1, #10
     c0a:	4329      	orrs	r1, r5
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     c0c:	2540      	movs	r5, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     c0e:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     c10:	6899      	ldr	r1, [r3, #8]
     c12:	0b89      	lsrs	r1, r1, #14
     c14:	0389      	lsls	r1, r1, #14
     c16:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     c18:	6811      	ldr	r1, [r2, #0]
     c1a:	0163      	lsls	r3, r4, #5
     c1c:	18cb      	adds	r3, r1, r3
     c1e:	791e      	ldrb	r6, [r3, #4]
     c20:	4335      	orrs	r5, r6
     c22:	711d      	strb	r5, [r3, #4]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
     c24:	799d      	ldrb	r5, [r3, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
     c26:	066d      	lsls	r5, r5, #25
     c28:	d5fc      	bpl.n	c24 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     c2a:	0164      	lsls	r4, r4, #5
     c2c:	1909      	adds	r1, r1, r4
     c2e:	79cb      	ldrb	r3, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
     c30:	07db      	lsls	r3, r3, #31
     c32:	d5fc      	bpl.n	c2e <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     c34:	1812      	adds	r2, r2, r0
     c36:	6890      	ldr	r0, [r2, #8]
	return usbd.epBank0ByteCount(ep);
     c38:	b2c0      	uxtb	r0, r0
}
     c3a:	bd70      	pop	{r4, r5, r6, pc}
     c3c:	20000310 	.word	0x20000310
     c40:	200005dc 	.word	0x200005dc
     c44:	f0003fff 	.word	0xf0003fff

00000c48 <_ZN14USBDeviceClass11recvControlEPvm>:
{
     c48:	b570      	push	{r4, r5, r6, lr}
     c4a:	0014      	movs	r4, r2
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     c4c:	2240      	movs	r2, #64	; 0x40
     c4e:	4b0b      	ldr	r3, [pc, #44]	; (c7c <_ZN14USBDeviceClass11recvControlEPvm+0x34>)
     c50:	000d      	movs	r5, r1
     c52:	681b      	ldr	r3, [r3, #0]
     c54:	33ff      	adds	r3, #255	; 0xff
     c56:	7959      	ldrb	r1, [r3, #5]
     c58:	430a      	orrs	r2, r1
     c5a:	715a      	strb	r2, [r3, #5]
	uint32_t read = armRecvCtrlOUT(0);
     c5c:	2100      	movs	r1, #0
     c5e:	f7ff ffc5 	bl	bec <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
     c62:	42a0      	cmp	r0, r4
     c64:	d900      	bls.n	c68 <_ZN14USBDeviceClass11recvControlEPvm+0x20>
     c66:	0020      	movs	r0, r4
	for (uint32_t i=0; i<len; i++) {
     c68:	2300      	movs	r3, #0
		data[i] = buffer[i];
     c6a:	4905      	ldr	r1, [pc, #20]	; (c80 <_ZN14USBDeviceClass11recvControlEPvm+0x38>)
	for (uint32_t i=0; i<len; i++) {
     c6c:	42a3      	cmp	r3, r4
     c6e:	d003      	beq.n	c78 <_ZN14USBDeviceClass11recvControlEPvm+0x30>
		data[i] = buffer[i];
     c70:	5c5a      	ldrb	r2, [r3, r1]
     c72:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i=0; i<len; i++) {
     c74:	3301      	adds	r3, #1
     c76:	e7f9      	b.n	c6c <_ZN14USBDeviceClass11recvControlEPvm+0x24>
}
     c78:	bd70      	pop	{r4, r5, r6, pc}
     c7a:	46c0      	nop			; (mov r8, r8)
     c7c:	200005dc 	.word	0x200005dc
     c80:	20000310 	.word	0x20000310

00000c84 <_ZN14USBDeviceClass7armRecvEm>:

uint8_t USBDeviceClass::armRecv(uint32_t ep)
{
     c84:	b510      	push	{r4, lr}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     c86:	b2c9      	uxtb	r1, r1
     c88:	480b      	ldr	r0, [pc, #44]	; (cb8 <_ZN14USBDeviceClass7armRecvEm+0x34>)
     c8a:	0149      	lsls	r1, r1, #5
     c8c:	1842      	adds	r2, r0, r1
     c8e:	6893      	ldr	r3, [r2, #8]
     c90:	049b      	lsls	r3, r3, #18
     c92:	0c9b      	lsrs	r3, r3, #18
	uint16_t count = usbd.epBank0ByteCount(ep);
	if (count >= 64) {
     c94:	2b3f      	cmp	r3, #63	; 0x3f
     c96:	dd0b      	ble.n	cb0 <_ZN14USBDeviceClass7armRecvEm+0x2c>
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     c98:	6894      	ldr	r4, [r2, #8]
		usbd.epBank0SetByteCount(ep, count - 64);
     c9a:	3b40      	subs	r3, #64	; 0x40
     c9c:	049b      	lsls	r3, r3, #18
     c9e:	0ba4      	lsrs	r4, r4, #14
     ca0:	0c9b      	lsrs	r3, r3, #18
     ca2:	03a4      	lsls	r4, r4, #14
     ca4:	4323      	orrs	r3, r4
     ca6:	6093      	str	r3, [r2, #8]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     ca8:	1841      	adds	r1, r0, r1
     caa:	6888      	ldr	r0, [r1, #8]
	} else {
		usbd.epBank0SetByteCount(ep, 0);
	}
	return usbd.epBank0ByteCount(ep);
     cac:	b2c0      	uxtb	r0, r0
}
     cae:	bd10      	pop	{r4, pc}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     cb0:	6893      	ldr	r3, [r2, #8]
     cb2:	0b9b      	lsrs	r3, r3, #14
     cb4:	039b      	lsls	r3, r3, #14
     cb6:	e7f6      	b.n	ca6 <_ZN14USBDeviceClass7armRecvEm+0x22>
     cb8:	200005dc 	.word	0x200005dc

00000cbc <_ZN14USBDeviceClass4recvEmPvm>:
{
     cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
     cbe:	001c      	movs	r4, r3
	if (!_usbConfiguration)
     cc0:	4b30      	ldr	r3, [pc, #192]	; (d84 <_ZN14USBDeviceClass4recvEmPvm+0xc8>)
{
     cc2:	b085      	sub	sp, #20
	if (!_usbConfiguration)
     cc4:	681b      	ldr	r3, [r3, #0]
{
     cc6:	0006      	movs	r6, r0
     cc8:	000d      	movs	r5, r1
     cca:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
     ccc:	2b00      	cmp	r3, #0
     cce:	d055      	beq.n	d7c <_ZN14USBDeviceClass4recvEmPvm+0xc0>
	if (rxLEDPulse == 0)
     cd0:	4f2d      	ldr	r7, [pc, #180]	; (d88 <_ZN14USBDeviceClass4recvEmPvm+0xcc>)
     cd2:	7839      	ldrb	r1, [r7, #0]
     cd4:	b2c9      	uxtb	r1, r1
     cd6:	2900      	cmp	r1, #0
     cd8:	d102      	bne.n	ce0 <_ZN14USBDeviceClass4recvEmPvm+0x24>
		digitalWrite(PIN_LED_RXL, LOW);
     cda:	2019      	movs	r0, #25
     cdc:	f000 fc60 	bl	15a0 <digitalWrite>
	rxLEDPulse = TX_RX_LED_PULSE_MS;
     ce0:	2364      	movs	r3, #100	; 0x64
     ce2:	703b      	strb	r3, [r7, #0]
	if (epHandlers[ep]) {
     ce4:	4b29      	ldr	r3, [pc, #164]	; (d8c <_ZN14USBDeviceClass4recvEmPvm+0xd0>)
     ce6:	00aa      	lsls	r2, r5, #2
     ce8:	58d0      	ldr	r0, [r2, r3]
     cea:	2800      	cmp	r0, #0
     cec:	d008      	beq.n	d00 <_ZN14USBDeviceClass4recvEmPvm+0x44>
		return epHandlers[ep]->recv(_data, len);
     cee:	6803      	ldr	r3, [r0, #0]
     cf0:	0022      	movs	r2, r4
     cf2:	685b      	ldr	r3, [r3, #4]
     cf4:	9901      	ldr	r1, [sp, #4]
     cf6:	4798      	blx	r3
     cf8:	0004      	movs	r4, r0
}
     cfa:	0020      	movs	r0, r4
     cfc:	b005      	add	sp, #20
     cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (available(ep) < len)
     d00:	0029      	movs	r1, r5
     d02:	0030      	movs	r0, r6
     d04:	f7ff ff46 	bl	b94 <_ZN14USBDeviceClass9availableEm>
     d08:	4284      	cmp	r4, r0
     d0a:	d904      	bls.n	d16 <_ZN14USBDeviceClass4recvEmPvm+0x5a>
		len = available(ep);
     d0c:	0029      	movs	r1, r5
     d0e:	0030      	movs	r0, r6
     d10:	f7ff ff40 	bl	b94 <_ZN14USBDeviceClass9availableEm>
     d14:	0004      	movs	r4, r0
	armRecv(ep);
     d16:	0029      	movs	r1, r5
     d18:	0030      	movs	r0, r6
     d1a:	f7ff ffb3 	bl	c84 <_ZN14USBDeviceClass7armRecvEm>
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
     d1e:	2101      	movs	r1, #1
     d20:	b2eb      	uxtb	r3, r5
     d22:	4f1b      	ldr	r7, [pc, #108]	; (d90 <_ZN14USBDeviceClass4recvEmPvm+0xd4>)
     d24:	9303      	str	r3, [sp, #12]
     d26:	015b      	lsls	r3, r3, #5
     d28:	9302      	str	r3, [sp, #8]
     d2a:	9a02      	ldr	r2, [sp, #8]
     d2c:	683b      	ldr	r3, [r7, #0]
	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
     d2e:	9801      	ldr	r0, [sp, #4]
     d30:	189b      	adds	r3, r3, r2
     d32:	33ff      	adds	r3, #255	; 0xff
     d34:	7a5a      	ldrb	r2, [r3, #9]
     d36:	430a      	orrs	r2, r1
     d38:	4916      	ldr	r1, [pc, #88]	; (d94 <_ZN14USBDeviceClass4recvEmPvm+0xd8>)
     d3a:	725a      	strb	r2, [r3, #9]
     d3c:	01ab      	lsls	r3, r5, #6
     d3e:	18c9      	adds	r1, r1, r3
     d40:	0022      	movs	r2, r4
     d42:	f001 f9af 	bl	20a4 <memcpy>
	if (len && !available(ep)) {
     d46:	2c00      	cmp	r4, #0
     d48:	d0d7      	beq.n	cfa <_ZN14USBDeviceClass4recvEmPvm+0x3e>
     d4a:	0029      	movs	r1, r5
     d4c:	0030      	movs	r0, r6
     d4e:	f7ff ff21 	bl	b94 <_ZN14USBDeviceClass9availableEm>
     d52:	2800      	cmp	r0, #0
     d54:	d1d1      	bne.n	cfa <_ZN14USBDeviceClass4recvEmPvm+0x3e>
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     d56:	2140      	movs	r1, #64	; 0x40
     d58:	9b03      	ldr	r3, [sp, #12]
     d5a:	683a      	ldr	r2, [r7, #0]
     d5c:	3308      	adds	r3, #8
     d5e:	015b      	lsls	r3, r3, #5
     d60:	18d3      	adds	r3, r2, r3
     d62:	7918      	ldrb	r0, [r3, #4]
     d64:	4301      	orrs	r1, r0
     d66:	7119      	strb	r1, [r3, #4]
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
     d68:	2101      	movs	r1, #1
     d6a:	71d9      	strb	r1, [r3, #7]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     d6c:	2101      	movs	r1, #1
     d6e:	9b02      	ldr	r3, [sp, #8]
     d70:	18d3      	adds	r3, r2, r3
     d72:	33ff      	adds	r3, #255	; 0xff
     d74:	7a9a      	ldrb	r2, [r3, #10]
     d76:	430a      	orrs	r2, r1
     d78:	729a      	strb	r2, [r3, #10]
     d7a:	e7be      	b.n	cfa <_ZN14USBDeviceClass4recvEmPvm+0x3e>
		return -1;
     d7c:	2401      	movs	r4, #1
     d7e:	4264      	negs	r4, r4
     d80:	e7bb      	b.n	cfa <_ZN14USBDeviceClass4recvEmPvm+0x3e>
     d82:	46c0      	nop			; (mov r8, r8)
     d84:	200005d4 	.word	0x200005d4
     d88:	20000144 	.word	0x20000144
     d8c:	20000128 	.word	0x20000128
     d90:	200005dc 	.word	0x200005dc
     d94:	20000310 	.word	0x20000310

00000d98 <_ZN14USBDeviceClass4recvEm>:
{
     d98:	b513      	push	{r0, r1, r4, lr}
	if (recv(ep, &c, 1) != 1) {
     d9a:	466b      	mov	r3, sp
     d9c:	1ddc      	adds	r4, r3, #7
     d9e:	0022      	movs	r2, r4
     da0:	2301      	movs	r3, #1
     da2:	f7ff ff8b 	bl	cbc <_ZN14USBDeviceClass4recvEmPvm>
     da6:	2801      	cmp	r0, #1
     da8:	d101      	bne.n	dae <_ZN14USBDeviceClass4recvEm+0x16>
		return c;
     daa:	7820      	ldrb	r0, [r4, #0]
}
     dac:	bd16      	pop	{r1, r2, r4, pc}
		return -1;
     dae:	2001      	movs	r0, #1
     db0:	4240      	negs	r0, r0
     db2:	e7fb      	b.n	dac <_ZN14USBDeviceClass4recvEm+0x14>

00000db4 <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
     db4:	b5f0      	push	{r4, r5, r6, r7, lr}
     db6:	001e      	movs	r6, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
     db8:	4b3a      	ldr	r3, [pc, #232]	; (ea4 <_ZN14USBDeviceClass4sendEmPKvm+0xf0>)
{
     dba:	b085      	sub	sp, #20
	if (!_usbConfiguration)
     dbc:	681b      	ldr	r3, [r3, #0]
{
     dbe:	000f      	movs	r7, r1
     dc0:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
     dc2:	2b00      	cmp	r3, #0
     dc4:	d03f      	beq.n	e46 <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;
	if (len > 16384)
     dc6:	2380      	movs	r3, #128	; 0x80
     dc8:	01db      	lsls	r3, r3, #7
     dca:	429e      	cmp	r6, r3
     dcc:	d83b      	bhi.n	e46 <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
     dce:	4c36      	ldr	r4, [pc, #216]	; (ea8 <_ZN14USBDeviceClass4sendEmPKvm+0xf4>)
     dd0:	7821      	ldrb	r1, [r4, #0]
     dd2:	b2c9      	uxtb	r1, r1
     dd4:	2900      	cmp	r1, #0
     dd6:	d102      	bne.n	dde <_ZN14USBDeviceClass4sendEmPKvm+0x2a>
		digitalWrite(PIN_LED_TXL, LOW);
     dd8:	201a      	movs	r0, #26
     dda:	f000 fbe1 	bl	15a0 <digitalWrite>

	txLEDPulse = TX_RX_LED_PULSE_MS;
     dde:	2364      	movs	r3, #100	; 0x64
	uint32_t written = 0;
     de0:	2500      	movs	r5, #0
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
     de2:	4a32      	ldr	r2, [pc, #200]	; (eac <_ZN14USBDeviceClass4sendEmPKvm+0xf8>)
	txLEDPulse = TX_RX_LED_PULSE_MS;
     de4:	7023      	strb	r3, [r4, #0]
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
     de6:	01bb      	lsls	r3, r7, #6
     de8:	18d3      	adds	r3, r2, r3
     dea:	9302      	str	r3, [sp, #8]
	while (len != 0)
     dec:	2e00      	cmp	r6, #0
     dee:	d02c      	beq.n	e4a <_ZN14USBDeviceClass4sendEmPKvm+0x96>
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
     df0:	4b2f      	ldr	r3, [pc, #188]	; (eb0 <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
     df2:	681b      	ldr	r3, [r3, #0]
     df4:	9303      	str	r3, [sp, #12]
     df6:	23ff      	movs	r3, #255	; 0xff
     df8:	403b      	ands	r3, r7
     dfa:	001c      	movs	r4, r3
     dfc:	9300      	str	r3, [sp, #0]
     dfe:	3408      	adds	r4, #8
     e00:	9b03      	ldr	r3, [sp, #12]
     e02:	0164      	lsls	r4, r4, #5
     e04:	191c      	adds	r4, r3, r4
     e06:	79a3      	ldrb	r3, [r4, #6]
     e08:	09db      	lsrs	r3, r3, #7
		if (usbd.epBank1IsReady(ep)) {
     e0a:	d021      	beq.n	e50 <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
     e0c:	4b29      	ldr	r3, [pc, #164]	; (eb4 <_ZN14USBDeviceClass4sendEmPKvm+0x100>)
     e0e:	492a      	ldr	r1, [pc, #168]	; (eb8 <_ZN14USBDeviceClass4sendEmPKvm+0x104>)
     e10:	6818      	ldr	r0, [r3, #0]
     e12:	f001 f88d 	bl	1f30 <__udivsi3>
     e16:	4b29      	ldr	r3, [pc, #164]	; (ebc <_ZN14USBDeviceClass4sendEmPKvm+0x108>)
     e18:	2117      	movs	r1, #23
     e1a:	4358      	muls	r0, r3
     e1c:	f001 f888 	bl	1f30 <__udivsi3>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
     e20:	4b27      	ldr	r3, [pc, #156]	; (ec0 <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
     e22:	79e2      	ldrb	r2, [r4, #7]
			while (!usbd.epBank1IsTransferComplete(ep)) {
     e24:	0792      	lsls	r2, r2, #30
     e26:	d413      	bmi.n	e50 <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
     e28:	5dda      	ldrb	r2, [r3, r7]
     e2a:	2a00      	cmp	r2, #0
     e2c:	d101      	bne.n	e32 <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
     e2e:	3801      	subs	r0, #1
     e30:	d2f7      	bcs.n	e22 <_ZN14USBDeviceClass4sendEmPKvm+0x6e>
					LastTransmitTimedOut[ep] = 1;
     e32:	2201      	movs	r2, #1
     e34:	55da      	strb	r2, [r3, r7]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     e36:	9b00      	ldr	r3, [sp, #0]
     e38:	015a      	lsls	r2, r3, #5
     e3a:	4b1d      	ldr	r3, [pc, #116]	; (eb0 <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
     e3c:	189b      	adds	r3, r3, r2
     e3e:	699a      	ldr	r2, [r3, #24]
     e40:	0b92      	lsrs	r2, r2, #14
     e42:	0392      	lsls	r2, r2, #14
     e44:	619a      	str	r2, [r3, #24]
					return -1;
     e46:	2501      	movs	r5, #1
     e48:	426d      	negs	r5, r5
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
     e4a:	0028      	movs	r0, r5
     e4c:	b005      	add	sp, #20
     e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LastTransmitTimedOut[ep] = 0;
     e50:	2200      	movs	r2, #0
     e52:	4b1b      	ldr	r3, [pc, #108]	; (ec0 <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
     e54:	0034      	movs	r4, r6
     e56:	55da      	strb	r2, [r3, r7]
     e58:	2e3f      	cmp	r6, #63	; 0x3f
     e5a:	d900      	bls.n	e5e <_ZN14USBDeviceClass4sendEmPKvm+0xaa>
     e5c:	243f      	movs	r4, #63	; 0x3f
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
     e5e:	0022      	movs	r2, r4
     e60:	9901      	ldr	r1, [sp, #4]
     e62:	9802      	ldr	r0, [sp, #8]
     e64:	f001 f91e 	bl	20a4 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     e68:	9b00      	ldr	r3, [sp, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     e6a:	04a1      	lsls	r1, r4, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     e6c:	015a      	lsls	r2, r3, #5
     e6e:	4b10      	ldr	r3, [pc, #64]	; (eb0 <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     e70:	0c89      	lsrs	r1, r1, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     e72:	189b      	adds	r3, r3, r2
     e74:	9a02      	ldr	r2, [sp, #8]
		written += length;
     e76:	192d      	adds	r5, r5, r4
     e78:	615a      	str	r2, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     e7a:	699a      	ldr	r2, [r3, #24]
		len -= length;
     e7c:	1b36      	subs	r6, r6, r4
     e7e:	0b92      	lsrs	r2, r2, #14
     e80:	0392      	lsls	r2, r2, #14
     e82:	430a      	orrs	r2, r1
     e84:	619a      	str	r2, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     e86:	9b00      	ldr	r3, [sp, #0]
     e88:	9a03      	ldr	r2, [sp, #12]
     e8a:	3308      	adds	r3, #8
     e8c:	015b      	lsls	r3, r3, #5
     e8e:	18d3      	adds	r3, r2, r3
     e90:	2202      	movs	r2, #2
     e92:	71da      	strb	r2, [r3, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
     e94:	7959      	ldrb	r1, [r3, #5]
     e96:	3a82      	subs	r2, #130	; 0x82
     e98:	430a      	orrs	r2, r1
     e9a:	715a      	strb	r2, [r3, #5]
		data = (char *)data + length;
     e9c:	9b01      	ldr	r3, [sp, #4]
     e9e:	191b      	adds	r3, r3, r4
     ea0:	9301      	str	r3, [sp, #4]
	while (len != 0)
     ea2:	e7a3      	b.n	dec <_ZN14USBDeviceClass4sendEmPKvm+0x38>
     ea4:	200005d4 	.word	0x200005d4
     ea8:	20000145 	.word	0x20000145
     eac:	20000150 	.word	0x20000150
     eb0:	200005dc 	.word	0x200005dc
     eb4:	2000002c 	.word	0x2000002c
     eb8:	000f4240 	.word	0x000f4240
     ebc:	00011170 	.word	0x00011170
     ec0:	20000147 	.word	0x20000147

00000ec4 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
     ec4:	b570      	push	{r4, r5, r6, lr}
     ec6:	000d      	movs	r5, r1
     ec8:	001c      	movs	r4, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
     eca:	4e0d      	ldr	r6, [pc, #52]	; (f00 <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
     ecc:	01ab      	lsls	r3, r5, #6
     ece:	18f6      	adds	r6, r6, r3
{
     ed0:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
     ed2:	0030      	movs	r0, r6
     ed4:	0022      	movs	r2, r4
     ed6:	f001 f8e5 	bl	20a4 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     eda:	b2ed      	uxtb	r5, r5
     edc:	4909      	ldr	r1, [pc, #36]	; (f04 <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
     ede:	016d      	lsls	r5, r5, #5
     ee0:	194d      	adds	r5, r1, r5
     ee2:	616e      	str	r6, [r5, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     ee4:	69ab      	ldr	r3, [r5, #24]
     ee6:	4a08      	ldr	r2, [pc, #32]	; (f08 <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
     ee8:	0020      	movs	r0, r4
     eea:	4013      	ands	r3, r2
     eec:	61ab      	str	r3, [r5, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     eee:	69ab      	ldr	r3, [r5, #24]
     ef0:	04a2      	lsls	r2, r4, #18
     ef2:	0b9b      	lsrs	r3, r3, #14
     ef4:	0c92      	lsrs	r2, r2, #18
     ef6:	039b      	lsls	r3, r3, #14
     ef8:	4313      	orrs	r3, r2
     efa:	61ab      	str	r3, [r5, #24]
     efc:	bd70      	pop	{r4, r5, r6, pc}
     efe:	46c0      	nop			; (mov r8, r8)
     f00:	20000150 	.word	0x20000150
     f04:	200005dc 	.word	0x200005dc
     f08:	f0003fff 	.word	0xf0003fff

00000f0c <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
     f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
     f0e:	4b10      	ldr	r3, [pc, #64]	; (f50 <_ZN14USBDeviceClass11sendControlEPKvm+0x44>)
{
     f10:	9001      	str	r0, [sp, #4]
	if (_dry_run == true)
     f12:	781b      	ldrb	r3, [r3, #0]
{
     f14:	000f      	movs	r7, r1
     f16:	0015      	movs	r5, r2
	if (_dry_run == true)
     f18:	2b00      	cmp	r3, #0
     f1a:	d10c      	bne.n	f36 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		return length;

	if (_pack_message == true) {
     f1c:	4b0d      	ldr	r3, [pc, #52]	; (f54 <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)
     f1e:	0016      	movs	r6, r2
     f20:	781c      	ldrb	r4, [r3, #0]
     f22:	2c00      	cmp	r4, #0
     f24:	d009      	beq.n	f3a <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
		memcpy(&_pack_buffer[_pack_size], data, len);
     f26:	4e0c      	ldr	r6, [pc, #48]	; (f58 <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
     f28:	480c      	ldr	r0, [pc, #48]	; (f5c <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
     f2a:	8834      	ldrh	r4, [r6, #0]
     f2c:	1900      	adds	r0, r0, r4
		_pack_size += len;
     f2e:	1964      	adds	r4, r4, r5
		memcpy(&_pack_buffer[_pack_size], data, len);
     f30:	f001 f8b8 	bl	20a4 <memcpy>
		_pack_size += len;
     f34:	8034      	strh	r4, [r6, #0]
		pos += sent;
		len -= sent;
 	}

	return length;
}
     f36:	0028      	movs	r0, r5
     f38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 	while (len > 0)
     f3a:	2e00      	cmp	r6, #0
     f3c:	d0fb      	beq.n	f36 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		sent = armSend(EP0, data + pos, len);
     f3e:	193a      	adds	r2, r7, r4
     f40:	0033      	movs	r3, r6
     f42:	2100      	movs	r1, #0
     f44:	9801      	ldr	r0, [sp, #4]
     f46:	f7ff ffbd 	bl	ec4 <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
     f4a:	1824      	adds	r4, r4, r0
		len -= sent;
     f4c:	1a36      	subs	r6, r6, r0
 	while (len > 0)
     f4e:	e7f4      	b.n	f3a <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
     f50:	200004d0 	.word	0x200004d0
     f54:	200005d1 	.word	0x200005d1
     f58:	200005d2 	.word	0x200005d2
     f5c:	200004d1 	.word	0x200004d1

00000f60 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>:
{
     f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return false;
     f62:	2000      	movs	r0, #0
{
     f64:	af00      	add	r7, sp, #0
     f66:	000e      	movs	r6, r1
     f68:	0015      	movs	r5, r2
	if (maxlen < 2)
     f6a:	2a01      	cmp	r2, #1
     f6c:	dd26      	ble.n	fbc <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x5c>
	uint8_t buffer[maxlen];
     f6e:	1dd3      	adds	r3, r2, #7
     f70:	466a      	mov	r2, sp
     f72:	08db      	lsrs	r3, r3, #3
     f74:	00db      	lsls	r3, r3, #3
     f76:	1ad3      	subs	r3, r2, r3
     f78:	469d      	mov	sp, r3
	buffer[0] = strlen((const char*)string) * 2 + 2;
     f7a:	0008      	movs	r0, r1
     f7c:	f001 f914 	bl	21a8 <strlen>
	uint8_t buffer[maxlen];
     f80:	466c      	mov	r4, sp
	buffer[1] = 0x03;
     f82:	2303      	movs	r3, #3
		buffer[i] = 0;
     f84:	2100      	movs	r1, #0
	buffer[0] = strlen((const char*)string) * 2 + 2;
     f86:	3001      	adds	r0, #1
     f88:	0040      	lsls	r0, r0, #1
     f8a:	7020      	strb	r0, [r4, #0]
	buffer[1] = 0x03;
     f8c:	7063      	strb	r3, [r4, #1]
     f8e:	1e5a      	subs	r2, r3, #1
     f90:	b2d2      	uxtb	r2, r2
	for (i = 2; i < maxlen && *string; i++) {
     f92:	4295      	cmp	r5, r2
     f94:	dd0b      	ble.n	fae <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
     f96:	7830      	ldrb	r0, [r6, #0]
     f98:	2800      	cmp	r0, #0
     f9a:	d008      	beq.n	fae <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
		buffer[i++] = *string++;
     f9c:	3601      	adds	r6, #1
     f9e:	54a0      	strb	r0, [r4, r2]
		if (i == maxlen) break;
     fa0:	429d      	cmp	r5, r3
     fa2:	d003      	beq.n	fac <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4c>
		buffer[i] = 0;
     fa4:	54e1      	strb	r1, [r4, r3]
     fa6:	3302      	adds	r3, #2
     fa8:	b2db      	uxtb	r3, r3
	for (i = 2; i < maxlen && *string; i++) {
     faa:	e7f0      	b.n	f8e <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x2e>
     fac:	002a      	movs	r2, r5
	return USBDevice.sendControl(buffer, i);
     fae:	0021      	movs	r1, r4
     fb0:	4803      	ldr	r0, [pc, #12]	; (fc0 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x60>)
     fb2:	f7ff ffab 	bl	f0c <_ZN14USBDeviceClass11sendControlEPKvm>
     fb6:	1e43      	subs	r3, r0, #1
     fb8:	4198      	sbcs	r0, r3
     fba:	b2c0      	uxtb	r0, r0
}
     fbc:	46bd      	mov	sp, r7
     fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     fc0:	20000124 	.word	0x20000124

00000fc4 <_ZN14USBDeviceClass17sendConfigurationEm>:
{
     fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
     fc6:	2700      	movs	r7, #0
	_dry_run = true;
     fc8:	2601      	movs	r6, #1
{
     fca:	b087      	sub	sp, #28
	_dry_run = true;
     fcc:	4b1e      	ldr	r3, [pc, #120]	; (1048 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
{
     fce:	9100      	str	r1, [sp, #0]
	uint8_t interfaces = SendInterfaces(&total);
     fd0:	a902      	add	r1, sp, #8
	_dry_run = true;
     fd2:	701e      	strb	r6, [r3, #0]
{
     fd4:	0005      	movs	r5, r0
	uint32_t total = 0;
     fd6:	9702      	str	r7, [sp, #8]
	uint8_t interfaces = SendInterfaces(&total);
     fd8:	f7ff fc2a 	bl	830 <_ZN14USBDeviceClass14SendInterfacesEPm>
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
     fdc:	ac03      	add	r4, sp, #12
	uint8_t interfaces = SendInterfaces(&total);
     fde:	9001      	str	r0, [sp, #4]
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
     fe0:	2209      	movs	r2, #9
     fe2:	0039      	movs	r1, r7
     fe4:	0020      	movs	r0, r4
     fe6:	f001 f866 	bl	20b6 <memset>
     fea:	2309      	movs	r3, #9
     fec:	7023      	strb	r3, [r4, #0]
     fee:	2302      	movs	r3, #2
     ff0:	7063      	strb	r3, [r4, #1]
     ff2:	339e      	adds	r3, #158	; 0x9e
     ff4:	71e3      	strb	r3, [r4, #7]
     ff6:	335a      	adds	r3, #90	; 0x5a
     ff8:	7223      	strb	r3, [r4, #8]
     ffa:	9b02      	ldr	r3, [sp, #8]
     ffc:	7166      	strb	r6, [r4, #5]
     ffe:	3309      	adds	r3, #9
    1000:	8063      	strh	r3, [r4, #2]
    1002:	466b      	mov	r3, sp
    1004:	791b      	ldrb	r3, [r3, #4]
    1006:	7123      	strb	r3, [r4, #4]
	_dry_run = false;
    1008:	4b0f      	ldr	r3, [pc, #60]	; (1048 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    100a:	701f      	strb	r7, [r3, #0]
	if (maxlen == sizeof(ConfigDescriptor)) {
    100c:	9b00      	ldr	r3, [sp, #0]
    100e:	2b09      	cmp	r3, #9
    1010:	d107      	bne.n	1022 <_ZN14USBDeviceClass17sendConfigurationEm+0x5e>
		sendControl(&config, sizeof(ConfigDescriptor));
    1012:	001a      	movs	r2, r3
    1014:	0021      	movs	r1, r4
		sendControl(_pack_buffer, _pack_size);
    1016:	0028      	movs	r0, r5
    1018:	f7ff ff78 	bl	f0c <_ZN14USBDeviceClass11sendControlEPKvm>
}
    101c:	2001      	movs	r0, #1
    101e:	b007      	add	sp, #28
    1020:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_pack_message = true;
    1022:	4b0a      	ldr	r3, [pc, #40]	; (104c <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	sendControl(&config, sizeof(ConfigDescriptor));
    1024:	2209      	movs	r2, #9
		_pack_message = true;
    1026:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    1028:	4e09      	ldr	r6, [pc, #36]	; (1050 <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	sendControl(&config, sizeof(ConfigDescriptor));
    102a:	0021      	movs	r1, r4
    102c:	0028      	movs	r0, r5
	total = 0;
    102e:	9702      	str	r7, [sp, #8]
		_pack_size = 0;
    1030:	8037      	strh	r7, [r6, #0]
	sendControl(&config, sizeof(ConfigDescriptor));
    1032:	f7ff ff6b 	bl	f0c <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    1036:	a902      	add	r1, sp, #8
    1038:	0028      	movs	r0, r5
    103a:	f7ff fbf9 	bl	830 <_ZN14USBDeviceClass14SendInterfacesEPm>
		_pack_message = false;
    103e:	4b03      	ldr	r3, [pc, #12]	; (104c <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    1040:	8832      	ldrh	r2, [r6, #0]
		_pack_message = false;
    1042:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    1044:	4903      	ldr	r1, [pc, #12]	; (1054 <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
    1046:	e7e6      	b.n	1016 <_ZN14USBDeviceClass17sendConfigurationEm+0x52>
    1048:	200004d0 	.word	0x200004d0
    104c:	200005d1 	.word	0x200005d1
    1050:	200005d2 	.word	0x200005d2
    1054:	200004d1 	.word	0x200004d1

00001058 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:
{
    1058:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    105a:	78ce      	ldrb	r6, [r1, #3]
{
    105c:	b092      	sub	sp, #72	; 0x48
    105e:	0005      	movs	r5, r0
    1060:	000c      	movs	r4, r1
	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    1062:	2e02      	cmp	r6, #2
    1064:	d108      	bne.n	1078 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x20>
		return USBDevice.sendConfiguration(setup.wLength);
    1066:	88c9      	ldrh	r1, [r1, #6]
    1068:	482b      	ldr	r0, [pc, #172]	; (1118 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc0>)
    106a:	f7ff ffab 	bl	fc4 <_ZN14USBDeviceClass17sendConfigurationEm>
    106e:	1e43      	subs	r3, r0, #1
    1070:	4198      	sbcs	r0, r3
    1072:	b2c0      	uxtb	r0, r0
}
    1074:	b012      	add	sp, #72	; 0x48
    1076:	bd70      	pop	{r4, r5, r6, pc}
	ret = PluggableUSB().getDescriptor(setup);
    1078:	f000 fede 	bl	1e38 <_Z12PluggableUSBv>
    107c:	0021      	movs	r1, r4
    107e:	f000 feab 	bl	1dd8 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    1082:	2800      	cmp	r0, #0
    1084:	d003      	beq.n	108e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x36>
		return (ret > 0 ? true : false);
    1086:	17c3      	asrs	r3, r0, #31
    1088:	1a18      	subs	r0, r3, r0
    108a:	0fc0      	lsrs	r0, r0, #31
    108c:	e7f2      	b.n	1074 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    108e:	2e01      	cmp	r6, #1
    1090:	d10b      	bne.n	10aa <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x52>
		if (setup.wLength == 8)
    1092:	88e2      	ldrh	r2, [r4, #6]
    1094:	4921      	ldr	r1, [pc, #132]	; (111c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc4>)
		if (*desc_addr > setup.wLength) {
    1096:	2a11      	cmp	r2, #17
    1098:	dc10      	bgt.n	10bc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
			desc_length = setup.wLength;
    109a:	b2d2      	uxtb	r2, r2
	if (desc_length == 0) {
    109c:	2a00      	cmp	r2, #0
    109e:	d00d      	beq.n	10bc <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
	sendControl(desc_addr, desc_length);
    10a0:	0028      	movs	r0, r5
    10a2:	f7ff ff33 	bl	f0c <_ZN14USBDeviceClass11sendControlEPKvm>
	return true;
    10a6:	2001      	movs	r0, #1
    10a8:	e7e4      	b.n	1074 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    10aa:	2e03      	cmp	r6, #3
    10ac:	d1e2      	bne.n	1074 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		if (setup.wValueL == 0) {
    10ae:	78a3      	ldrb	r3, [r4, #2]
    10b0:	2b00      	cmp	r3, #0
    10b2:	d105      	bne.n	10c0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x68>
		if (*desc_addr > setup.wLength) {
    10b4:	88e2      	ldrh	r2, [r4, #6]
    10b6:	491a      	ldr	r1, [pc, #104]	; (1120 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>)
    10b8:	2a03      	cmp	r2, #3
    10ba:	ddee      	ble.n	109a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x42>
		desc_length = *desc_addr;
    10bc:	780a      	ldrb	r2, [r1, #0]
    10be:	e7ef      	b.n	10a0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x48>
		else if (setup.wValueL == IPRODUCT) {
    10c0:	2b02      	cmp	r3, #2
    10c2:	d105      	bne.n	10d0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x78>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    10c4:	79a2      	ldrb	r2, [r4, #6]
    10c6:	4917      	ldr	r1, [pc, #92]	; (1124 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xcc>)
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    10c8:	0028      	movs	r0, r5
    10ca:	f7ff ff49 	bl	f60 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    10ce:	e7d1      	b.n	1074 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		else if (setup.wValueL == IMANUFACTURER) {
    10d0:	2b01      	cmp	r3, #1
    10d2:	d102      	bne.n	10da <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x82>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    10d4:	79a2      	ldrb	r2, [r4, #6]
    10d6:	4914      	ldr	r1, [pc, #80]	; (1128 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd0>)
    10d8:	e7f6      	b.n	10c8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
		else if (setup.wValueL == ISERIAL) {
    10da:	2b03      	cmp	r3, #3
    10dc:	d1ca      	bne.n	1074 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
			utox8(SERIAL_NUMBER_WORD_0, &name[0]);
    10de:	4b13      	ldr	r3, [pc, #76]	; (112c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd4>)
    10e0:	a901      	add	r1, sp, #4
    10e2:	6818      	ldr	r0, [r3, #0]
    10e4:	f7ff f9c0 	bl	468 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_1, &name[8]);
    10e8:	4b11      	ldr	r3, [pc, #68]	; (1130 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd8>)
    10ea:	a903      	add	r1, sp, #12
    10ec:	6818      	ldr	r0, [r3, #0]
    10ee:	f7ff f9bb 	bl	468 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_2, &name[16]);
    10f2:	4b10      	ldr	r3, [pc, #64]	; (1134 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xdc>)
    10f4:	a905      	add	r1, sp, #20
    10f6:	6818      	ldr	r0, [r3, #0]
    10f8:	f7ff f9b6 	bl	468 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_3, &name[24]);
    10fc:	4b0e      	ldr	r3, [pc, #56]	; (1138 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xe0>)
    10fe:	a907      	add	r1, sp, #28
    1100:	6818      	ldr	r0, [r3, #0]
    1102:	f7ff f9b1 	bl	468 <_ZL5utox8mPc>
			PluggableUSB().getShortName(&name[32]);
    1106:	f000 fe97 	bl	1e38 <_Z12PluggableUSBv>
    110a:	a909      	add	r1, sp, #36	; 0x24
    110c:	f000 fe74 	bl	1df8 <_ZN13PluggableUSB_12getShortNameEPc>
			return sendStringDescriptor((uint8_t*)name, setup.wLength);
    1110:	79a2      	ldrb	r2, [r4, #6]
    1112:	a901      	add	r1, sp, #4
    1114:	e7d8      	b.n	10c8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
    1116:	46c0      	nop			; (mov r8, r8)
    1118:	20000124 	.word	0x20000124
    111c:	00002225 	.word	0x00002225
    1120:	00002218 	.word	0x00002218
    1124:	0000220c 	.word	0x0000220c
    1128:	0000221c 	.word	0x0000221c
    112c:	0080a00c 	.word	0x0080a00c
    1130:	0080a040 	.word	0x0080a040
    1134:	0080a044 	.word	0x0080a044
    1138:	0080a048 	.word	0x0080a048

0000113c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    113c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    113e:	0006      	movs	r6, r0
	switch (setup.bRequest) {
    1140:	7848      	ldrb	r0, [r1, #1]
{
    1142:	000d      	movs	r5, r1
	switch (setup.bRequest) {
    1144:	280b      	cmp	r0, #11
    1146:	d811      	bhi.n	116c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
    1148:	f000 fee8 	bl	1f1c <__gnu_thumb1_case_uqi>
    114c:	2e101d06 	.word	0x2e101d06
    1150:	70484310 	.word	0x70484310
    1154:	6c694f4c 	.word	0x6c694f4c
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    1158:	7809      	ldrb	r1, [r1, #0]
    115a:	aa01      	add	r2, sp, #4
    115c:	2900      	cmp	r1, #0
    115e:	d107      	bne.n	1170 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x34>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    1160:	2302      	movs	r3, #2
			uint8_t buff[] = { 0, 0 };
    1162:	7011      	strb	r1, [r2, #0]
    1164:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    1166:	0030      	movs	r0, r6
    1168:	f7ff feac 	bl	ec4 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    116c:	2001      	movs	r0, #1
		return true;

	default:
		return true;
	}
}
    116e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
			uint8_t buff[] = { 0, 0 };
    1170:	2300      	movs	r3, #0
    1172:	7013      	strb	r3, [r2, #0]
    1174:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    1176:	4b2e      	ldr	r3, [pc, #184]	; (1230 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
			if (isRemoteWakeUpEnabled == 1)
    1178:	781b      	ldrb	r3, [r3, #0]
    117a:	2b01      	cmp	r3, #1
    117c:	d100      	bne.n	1180 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x44>
				buff[0] = 1;
    117e:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    1180:	2302      	movs	r3, #2
		armSend(0, (void*)&_usbSetInterface, 1);
    1182:	2100      	movs	r1, #0
    1184:	e7ef      	b.n	1166 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    1186:	788a      	ldrb	r2, [r1, #2]
    1188:	2300      	movs	r3, #0
    118a:	2a01      	cmp	r2, #1
    118c:	d104      	bne.n	1198 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x5c>
			uint8_t buff[] = { 0, 0 };
    118e:	aa01      	add	r2, sp, #4
    1190:	7013      	strb	r3, [r2, #0]
    1192:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    1194:	4b27      	ldr	r3, [pc, #156]	; (1234 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
    1196:	e7ef      	b.n	1178 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x3c>
			isEndpointHalt = 0;
    1198:	4a25      	ldr	r2, [pc, #148]	; (1230 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    119a:	7013      	strb	r3, [r2, #0]
    119c:	4a26      	ldr	r2, [pc, #152]	; (1238 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    119e:	6993      	ldr	r3, [r2, #24]
    11a0:	0b9b      	lsrs	r3, r3, #14
    11a2:	039b      	lsls	r3, r3, #14
    11a4:	6193      	str	r3, [r2, #24]
    11a6:	e7e1      	b.n	116c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    11a8:	788c      	ldrb	r4, [r1, #2]
    11aa:	2c01      	cmp	r4, #1
    11ac:	d106      	bne.n	11bc <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
			uint8_t buff[] = { 0 };
    11ae:	2100      	movs	r1, #0
			isRemoteWakeUpEnabled = 1;
    11b0:	4b20      	ldr	r3, [pc, #128]	; (1234 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
			uint8_t buff[] = { 0 };
    11b2:	aa01      	add	r2, sp, #4
			isRemoteWakeUpEnabled = 1;
    11b4:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    11b6:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    11b8:	0023      	movs	r3, r4
    11ba:	e7d4      	b.n	1166 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 0) // ENDPOINTHALT
    11bc:	2c00      	cmp	r4, #0
    11be:	d108      	bne.n	11d2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x96>
			isEndpointHalt = 1;
    11c0:	2001      	movs	r0, #1
    11c2:	4b1b      	ldr	r3, [pc, #108]	; (1230 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    11c4:	4a1c      	ldr	r2, [pc, #112]	; (1238 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    11c6:	7018      	strb	r0, [r3, #0]
    11c8:	6993      	ldr	r3, [r2, #24]
    11ca:	0b9b      	lsrs	r3, r3, #14
    11cc:	039b      	lsls	r3, r3, #14
    11ce:	6193      	str	r3, [r2, #24]
			return true;
    11d0:	e7cd      	b.n	116e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		setAddress(setup.wValueL);
    11d2:	78a9      	ldrb	r1, [r5, #2]
    11d4:	0030      	movs	r0, r6
    11d6:	f7ff fbf5 	bl	9c4 <_ZN14USBDeviceClass10setAddressEm>
    11da:	e7c7      	b.n	116c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		return sendDescriptor(setup);
    11dc:	0030      	movs	r0, r6
    11de:	f7ff ff3b 	bl	1058 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    11e2:	e7c4      	b.n	116e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		armSend(0, (void*)&_usbConfiguration, 1);
    11e4:	2301      	movs	r3, #1
    11e6:	4a15      	ldr	r2, [pc, #84]	; (123c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    11e8:	e7cb      	b.n	1182 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    11ea:	780b      	ldrb	r3, [r1, #0]
			return false;
    11ec:	2000      	movs	r0, #0
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    11ee:	06db      	lsls	r3, r3, #27
    11f0:	d1bd      	bne.n	116e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			initEndpoints();
    11f2:	0030      	movs	r0, r6
    11f4:	f7ff fcbc 	bl	b70 <_ZN14USBDeviceClass13initEndpointsEv>
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    11f8:	202a      	movs	r0, #42	; 0x2a
    11fa:	2102      	movs	r1, #2
			_usbConfiguration = setup.wValueL;
    11fc:	78aa      	ldrb	r2, [r5, #2]
    11fe:	4b0f      	ldr	r3, [pc, #60]	; (123c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    1200:	30ff      	adds	r0, #255	; 0xff
    1202:	601a      	str	r2, [r3, #0]
    1204:	4a0c      	ldr	r2, [pc, #48]	; (1238 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    1206:	6813      	ldr	r3, [r2, #0]
    1208:	5c1c      	ldrb	r4, [r3, r0]
    120a:	4321      	orrs	r1, r4
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    120c:	244a      	movs	r4, #74	; 0x4a
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    120e:	5419      	strb	r1, [r3, r0]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    1210:	34ff      	adds	r4, #255	; 0xff
    1212:	5d19      	ldrb	r1, [r3, r4]
    1214:	3829      	subs	r0, #41	; 0x29
    1216:	38ff      	subs	r0, #255	; 0xff
    1218:	4301      	orrs	r1, r0
    121a:	5519      	strb	r1, [r3, r4]
    121c:	e7d4      	b.n	11c8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x8c>
		armSend(0, (void*)&_usbSetInterface, 1);
    121e:	2301      	movs	r3, #1
    1220:	4a07      	ldr	r2, [pc, #28]	; (1240 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    1222:	e7ae      	b.n	1182 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		_usbSetInterface = setup.wValueL;
    1224:	788a      	ldrb	r2, [r1, #2]
    1226:	4b06      	ldr	r3, [pc, #24]	; (1240 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    1228:	601a      	str	r2, [r3, #0]
    122a:	e7b7      	b.n	119c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		return false;
    122c:	2000      	movs	r0, #0
    122e:	e79e      	b.n	116e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
    1230:	20000146 	.word	0x20000146
    1234:	2000014e 	.word	0x2000014e
    1238:	200005dc 	.word	0x200005dc
    123c:	200005d4 	.word	0x200005d4
    1240:	200005d8 	.word	0x200005d8

00001244 <_ZN14USBDeviceClass10ISRHandlerEv>:

void USBDeviceClass::ISRHandler()
{

	if (_pack_message == true) {
    1244:	4b4b      	ldr	r3, [pc, #300]	; (1374 <_ZN14USBDeviceClass10ISRHandlerEv+0x130>)
{
    1246:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (_pack_message == true) {
    1248:	781c      	ldrb	r4, [r3, #0]
{
    124a:	0007      	movs	r7, r0
	if (_pack_message == true) {
    124c:	2c00      	cmp	r4, #0
    124e:	d17c      	bne.n	134a <_ZN14USBDeviceClass10ISRHandlerEv+0x106>
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    1250:	4e49      	ldr	r6, [pc, #292]	; (1378 <_ZN14USBDeviceClass10ISRHandlerEv+0x134>)
    1252:	6833      	ldr	r3, [r6, #0]
    1254:	8b9b      	ldrh	r3, [r3, #28]
		return;
	}
	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    1256:	071b      	lsls	r3, r3, #28
    1258:	d50d      	bpl.n	1276 <_ZN14USBDeviceClass10ISRHandlerEv+0x32>
    125a:	0020      	movs	r0, r4
    125c:	f7ff f916 	bl	48c <_ZN14USBDeviceClass6initEPEmm.part.5>
	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    1260:	6832      	ldr	r2, [r6, #0]
    1262:	2310      	movs	r3, #16
    1264:	0011      	movs	r1, r2
    1266:	31ff      	adds	r1, #255	; 0xff
    1268:	7a88      	ldrb	r0, [r1, #10]
    126a:	4303      	orrs	r3, r0
    126c:	728b      	strb	r3, [r1, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    126e:	4b43      	ldr	r3, [pc, #268]	; (137c <_ZN14USBDeviceClass10ISRHandlerEv+0x138>)
    1270:	601c      	str	r4, [r3, #0]
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    1272:	2308      	movs	r3, #8
    1274:	8393      	strh	r3, [r2, #28]
	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    1276:	6833      	ldr	r3, [r6, #0]
    1278:	8b9a      	ldrh	r2, [r3, #28]

		usbd.ackEndOfResetInterrupt();
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    127a:	0752      	lsls	r2, r2, #29
    127c:	d51f      	bpl.n	12be <_ZN14USBDeviceClass10ISRHandlerEv+0x7a>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    127e:	2204      	movs	r2, #4
    1280:	839a      	strh	r2, [r3, #28]
	{
		usbd.ackStartOfFrameInterrupt();

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    1282:	4a3f      	ldr	r2, [pc, #252]	; (1380 <_ZN14USBDeviceClass10ISRHandlerEv+0x13c>)
    1284:	7813      	ldrb	r3, [r2, #0]
    1286:	2b00      	cmp	r3, #0
    1288:	d00a      	beq.n	12a0 <_ZN14USBDeviceClass10ISRHandlerEv+0x5c>
			txLEDPulse--;
    128a:	7813      	ldrb	r3, [r2, #0]
    128c:	3b01      	subs	r3, #1
    128e:	b2db      	uxtb	r3, r3
    1290:	7013      	strb	r3, [r2, #0]
			if (txLEDPulse == 0)
    1292:	7813      	ldrb	r3, [r2, #0]
    1294:	2b00      	cmp	r3, #0
    1296:	d103      	bne.n	12a0 <_ZN14USBDeviceClass10ISRHandlerEv+0x5c>
				digitalWrite(PIN_LED_TXL, HIGH);
    1298:	2101      	movs	r1, #1
    129a:	201a      	movs	r0, #26
    129c:	f000 f980 	bl	15a0 <digitalWrite>
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    12a0:	4a38      	ldr	r2, [pc, #224]	; (1384 <_ZN14USBDeviceClass10ISRHandlerEv+0x140>)
    12a2:	7813      	ldrb	r3, [r2, #0]
    12a4:	2b00      	cmp	r3, #0
    12a6:	d00a      	beq.n	12be <_ZN14USBDeviceClass10ISRHandlerEv+0x7a>
			rxLEDPulse--;
    12a8:	7813      	ldrb	r3, [r2, #0]
    12aa:	3b01      	subs	r3, #1
    12ac:	b2db      	uxtb	r3, r3
    12ae:	7013      	strb	r3, [r2, #0]
			if (rxLEDPulse == 0)
    12b0:	7813      	ldrb	r3, [r2, #0]
    12b2:	2b00      	cmp	r3, #0
    12b4:	d103      	bne.n	12be <_ZN14USBDeviceClass10ISRHandlerEv+0x7a>
				digitalWrite(PIN_LED_RXL, HIGH);
    12b6:	2101      	movs	r1, #1
    12b8:	2019      	movs	r0, #25
    12ba:	f000 f971 	bl	15a0 <digitalWrite>
	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    12be:	6833      	ldr	r3, [r6, #0]
    12c0:	33ff      	adds	r3, #255	; 0xff
    12c2:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    12c4:	06d2      	lsls	r2, r2, #27
    12c6:	d520      	bpl.n	130a <_ZN14USBDeviceClass10ISRHandlerEv+0xc6>
	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    12c8:	2210      	movs	r2, #16
    12ca:	721a      	strb	r2, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    12cc:	7959      	ldrb	r1, [r3, #5]
    12ce:	3230      	adds	r2, #48	; 0x30
    12d0:	430a      	orrs	r2, r1
    12d2:	715a      	strb	r2, [r3, #5]
		/* Clear the Bank 0 ready flag on Control OUT */
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    12d4:	2360      	movs	r3, #96	; 0x60
    12d6:	492c      	ldr	r1, [pc, #176]	; (1388 <_ZN14USBDeviceClass10ISRHandlerEv+0x144>)
			// Standard Requests
			ok = handleStandardSetup(*setup);
    12d8:	0038      	movs	r0, r7
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    12da:	780a      	ldrb	r2, [r1, #0]
    12dc:	421a      	tst	r2, r3
    12de:	d135      	bne.n	134c <_ZN14USBDeviceClass10ISRHandlerEv+0x108>
			ok = handleStandardSetup(*setup);
    12e0:	f7ff ff2c 	bl	113c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(*setup);
		}

		if (ok) {
    12e4:	2800      	cmp	r0, #0
    12e6:	d034      	beq.n	1352 <_ZN14USBDeviceClass10ISRHandlerEv+0x10e>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    12e8:	2280      	movs	r2, #128	; 0x80
    12ea:	6833      	ldr	r3, [r6, #0]
    12ec:	4252      	negs	r2, r2
    12ee:	33ff      	adds	r3, #255	; 0xff
    12f0:	7999      	ldrb	r1, [r3, #6]
    12f2:	430a      	orrs	r2, r1
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    12f4:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    12f6:	6833      	ldr	r3, [r6, #0]
    12f8:	33ff      	adds	r3, #255	; 0xff
    12fa:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    12fc:	0652      	lsls	r2, r2, #25
    12fe:	d504      	bpl.n	130a <_ZN14USBDeviceClass10ISRHandlerEv+0xc6>
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    1300:	2240      	movs	r2, #64	; 0x40
    1302:	721a      	strb	r2, [r3, #8]
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    1304:	7a59      	ldrb	r1, [r3, #9]
    1306:	430a      	orrs	r2, r1
    1308:	725a      	strb	r2, [r3, #9]
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }
    130a:	6833      	ldr	r3, [r6, #0]
		}

	} // end Received Setup handler

	uint8_t i=0;
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
    130c:	2500      	movs	r5, #0
    130e:	8c1c      	ldrh	r4, [r3, #32]
    1310:	2301      	movs	r3, #1
    1312:	439c      	bics	r4, r3
    1314:	b2e4      	uxtb	r4, r4
	while (ept_int != 0)
	{
		// Check if endpoint has a pending interrupt
		if ((ept_int & (1 << i)) != 0)
    1316:	9301      	str	r3, [sp, #4]
    1318:	b2e9      	uxtb	r1, r5
	while (ept_int != 0)
    131a:	2c00      	cmp	r4, #0
    131c:	d015      	beq.n	134a <_ZN14USBDeviceClass10ISRHandlerEv+0x106>
		if ((ept_int & (1 << i)) != 0)
    131e:	0023      	movs	r3, r4
    1320:	412b      	asrs	r3, r5
    1322:	9a01      	ldr	r2, [sp, #4]
    1324:	4213      	tst	r3, r2
    1326:	d00d      	beq.n	1344 <_ZN14USBDeviceClass10ISRHandlerEv+0x100>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    1328:	002b      	movs	r3, r5
    132a:	6832      	ldr	r2, [r6, #0]
    132c:	3308      	adds	r3, #8
    132e:	015b      	lsls	r3, r3, #5
    1330:	18d3      	adds	r3, r2, r3
    1332:	79da      	ldrb	r2, [r3, #7]
		{
			// Endpoint Transfer Complete (0/1) Interrupt
			if (usbd.epBank0IsTransferComplete(i) ||
    1334:	07d2      	lsls	r2, r2, #31
    1336:	d413      	bmi.n	1360 <_ZN14USBDeviceClass10ISRHandlerEv+0x11c>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    1338:	79db      	ldrb	r3, [r3, #7]
    133a:	079b      	lsls	r3, r3, #30
    133c:	d410      	bmi.n	1360 <_ZN14USBDeviceClass10ISRHandlerEv+0x11c>
					epHandlers[i]->handleEndpoint();
				} else {
					handleEndpoint(i);
				}
			}
			ept_int &= ~(1 << i);
    133e:	9b01      	ldr	r3, [sp, #4]
    1340:	40ab      	lsls	r3, r5
    1342:	439c      	bics	r4, r3
    1344:	3501      	adds	r5, #1
		}
		i++;
		if (i > USB_EPT_NUM)
    1346:	2d09      	cmp	r5, #9
    1348:	d1e6      	bne.n	1318 <_ZN14USBDeviceClass10ISRHandlerEv+0xd4>
			break;  // fire exit
	}
}
    134a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			ok = handleClassInterfaceSetup(*setup);
    134c:	f7ff fb5e 	bl	a0c <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    1350:	e7c8      	b.n	12e4 <_ZN14USBDeviceClass10ISRHandlerEv+0xa0>
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    1352:	2220      	movs	r2, #32
    1354:	4b0d      	ldr	r3, [pc, #52]	; (138c <_ZN14USBDeviceClass10ISRHandlerEv+0x148>)
    1356:	e7cd      	b.n	12f4 <_ZN14USBDeviceClass10ISRHandlerEv+0xb0>
					epHandlers[i]->handleEndpoint();
    1358:	6803      	ldr	r3, [r0, #0]
    135a:	681b      	ldr	r3, [r3, #0]
    135c:	4798      	blx	r3
    135e:	e7ee      	b.n	133e <_ZN14USBDeviceClass10ISRHandlerEv+0xfa>
				if (epHandlers[i]) {
    1360:	4b0b      	ldr	r3, [pc, #44]	; (1390 <_ZN14USBDeviceClass10ISRHandlerEv+0x14c>)
    1362:	00aa      	lsls	r2, r5, #2
    1364:	58d0      	ldr	r0, [r2, r3]
    1366:	2800      	cmp	r0, #0
    1368:	d1f6      	bne.n	1358 <_ZN14USBDeviceClass10ISRHandlerEv+0x114>
					handleEndpoint(i);
    136a:	0038      	movs	r0, r7
    136c:	f7ff fa76 	bl	85c <_ZN14USBDeviceClass14handleEndpointEh>
    1370:	e7e5      	b.n	133e <_ZN14USBDeviceClass10ISRHandlerEv+0xfa>
    1372:	46c0      	nop			; (mov r8, r8)
    1374:	200005d1 	.word	0x200005d1
    1378:	200005dc 	.word	0x200005dc
    137c:	200005d4 	.word	0x200005d4
    1380:	20000145 	.word	0x20000145
    1384:	20000144 	.word	0x20000144
    1388:	20000310 	.word	0x20000310
    138c:	410050ff 	.word	0x410050ff
    1390:	20000128 	.word	0x20000128

00001394 <UDD_Handler>:
extern "C" void UDD_Handler(void) {
    1394:	b510      	push	{r4, lr}
	USBDevice.ISRHandler();
    1396:	4802      	ldr	r0, [pc, #8]	; (13a0 <UDD_Handler+0xc>)
    1398:	f7ff ff54 	bl	1244 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    139c:	bd10      	pop	{r4, pc}
    139e:	46c0      	nop			; (mov r8, r8)
    13a0:	20000124 	.word	0x20000124

000013a4 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    13a4:	4a01      	ldr	r2, [pc, #4]	; (13ac <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0x8>)
    13a6:	4b02      	ldr	r3, [pc, #8]	; (13b0 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0xc>)
    13a8:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    13aa:	4770      	bx	lr
    13ac:	41005000 	.word	0x41005000
    13b0:	200005dc 	.word	0x200005dc

000013b4 <init>:
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    13b4:	21fa      	movs	r1, #250	; 0xfa
    13b6:	4b31      	ldr	r3, [pc, #196]	; (147c <init+0xc8>)
{
    13b8:	b510      	push	{r4, lr}
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    13ba:	6818      	ldr	r0, [r3, #0]
    13bc:	0089      	lsls	r1, r1, #2
    13be:	f000 fdb7 	bl	1f30 <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    13c2:	4b2f      	ldr	r3, [pc, #188]	; (1480 <init+0xcc>)
    13c4:	3801      	subs	r0, #1
    13c6:	4298      	cmp	r0, r3
    13c8:	d856      	bhi.n	1478 <init+0xc4>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    13ca:	492e      	ldr	r1, [pc, #184]	; (1484 <init+0xd0>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    13cc:	4a2e      	ldr	r2, [pc, #184]	; (1488 <init+0xd4>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    13ce:	6048      	str	r0, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    13d0:	20c0      	movs	r0, #192	; 0xc0
    13d2:	6a13      	ldr	r3, [r2, #32]
    13d4:	0600      	lsls	r0, r0, #24
    13d6:	021b      	lsls	r3, r3, #8
    13d8:	0a1b      	lsrs	r3, r3, #8
    13da:	4303      	orrs	r3, r0
    13dc:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    13de:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    13e0:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    13e2:	608c      	str	r4, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    13e4:	600b      	str	r3, [r1, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    13e6:	2180      	movs	r1, #128	; 0x80
    13e8:	6a13      	ldr	r3, [r2, #32]
    13ea:	0609      	lsls	r1, r1, #24
    13ec:	021b      	lsls	r3, r3, #8
    13ee:	0a1b      	lsrs	r3, r3, #8
    13f0:	430b      	orrs	r3, r1
    13f2:	6213      	str	r3, [r2, #32]
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    13f4:	22fc      	movs	r2, #252	; 0xfc
    13f6:	4b25      	ldr	r3, [pc, #148]	; (148c <init+0xd8>)
    13f8:	6a19      	ldr	r1, [r3, #32]
    13fa:	430a      	orrs	r2, r1
    13fc:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    13fe:	22fc      	movs	r2, #252	; 0xfc
    1400:	6a19      	ldr	r1, [r3, #32]
    1402:	0192      	lsls	r2, r2, #6
    1404:	430a      	orrs	r2, r1
    1406:	621a      	str	r2, [r3, #32]

  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    1408:	22a0      	movs	r2, #160	; 0xa0
    140a:	6a19      	ldr	r1, [r3, #32]
    140c:	02d2      	lsls	r2, r2, #11
    140e:	430a      	orrs	r2, r1
    1410:	621a      	str	r2, [r3, #32]

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
    pinMode( ul, INPUT ) ;
    1412:	0020      	movs	r0, r4
    1414:	2100      	movs	r1, #0
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    1416:	3401      	adds	r4, #1
    pinMode( ul, INPUT ) ;
    1418:	f000 f876 	bl	1508 <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    141c:	2c14      	cmp	r4, #20
    141e:	d1f8      	bne.n	1412 <init+0x5e>
  }

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    1420:	4b1b      	ldr	r3, [pc, #108]	; (1490 <init+0xdc>)
    1422:	001c      	movs	r4, r3
    1424:	785a      	ldrb	r2, [r3, #1]
    1426:	b252      	sxtb	r2, r2
    1428:	2a00      	cmp	r2, #0
    142a:	dbfb      	blt.n	1424 <init+0x70>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    142c:	4a19      	ldr	r2, [pc, #100]	; (1494 <init+0xe0>)
    142e:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    1430:	4b19      	ldr	r3, [pc, #100]	; (1498 <init+0xe4>)
    1432:	001a      	movs	r2, r3
    1434:	7e59      	ldrb	r1, [r3, #25]
    1436:	09c9      	lsrs	r1, r1, #7
    1438:	2901      	cmp	r1, #1
    143a:	d0fb      	beq.n	1434 <init+0x80>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    143c:	21e4      	movs	r1, #228	; 0xe4
    143e:	00c9      	lsls	r1, r1, #3
    1440:	8099      	strh	r1, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    1442:	213f      	movs	r1, #63	; 0x3f
    1444:	70d9      	strb	r1, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    1446:	7e53      	ldrb	r3, [r2, #25]
    1448:	09db      	lsrs	r3, r3, #7
    144a:	2b01      	cmp	r3, #1
    144c:	d0fb      	beq.n	1446 <init+0x92>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    144e:	23c0      	movs	r3, #192	; 0xc0

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    1450:	2000      	movs	r0, #0
  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    1452:	015b      	lsls	r3, r3, #5
    1454:	6113      	str	r3, [r2, #16]
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    1456:	7090      	strb	r0, [r2, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    1458:	f000 f824 	bl	14a4 <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    145c:	7863      	ldrb	r3, [r4, #1]
    145e:	b25b      	sxtb	r3, r3
    1460:	2b00      	cmp	r3, #0
    1462:	dbfb      	blt.n	145c <init+0xa8>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    1464:	4b0d      	ldr	r3, [pc, #52]	; (149c <init+0xe8>)
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    1466:	4a0e      	ldr	r2, [pc, #56]	; (14a0 <init+0xec>)
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    1468:	8063      	strh	r3, [r4, #2]
  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    146a:	79d3      	ldrb	r3, [r2, #7]
    146c:	09db      	lsrs	r3, r3, #7
    146e:	2b01      	cmp	r3, #1
    1470:	d0fb      	beq.n	146a <init+0xb6>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    1472:	2341      	movs	r3, #65	; 0x41
    1474:	7053      	strb	r3, [r2, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
}
    1476:	bd10      	pop	{r4, pc}
    1478:	e7fe      	b.n	1478 <init+0xc4>
    147a:	46c0      	nop			; (mov r8, r8)
    147c:	2000002c 	.word	0x2000002c
    1480:	00ffffff 	.word	0x00ffffff
    1484:	e000e010 	.word	0xe000e010
    1488:	e000ed00 	.word	0xe000ed00
    148c:	40000400 	.word	0x40000400
    1490:	40000c00 	.word	0x40000c00
    1494:	0000401e 	.word	0x0000401e
    1498:	42004000 	.word	0x42004000
    149c:	00004021 	.word	0x00004021
    14a0:	42004800 	.word	0x42004800

000014a4 <analogReference>:
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    14a4:	4a16      	ldr	r2, [pc, #88]	; (1500 <analogReference+0x5c>)
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    14a6:	b500      	push	{lr}
    14a8:	0013      	movs	r3, r2
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    14aa:	7e51      	ldrb	r1, [r2, #25]
    14ac:	09c9      	lsrs	r1, r1, #7
    14ae:	2901      	cmp	r1, #1
    14b0:	d0fb      	beq.n	14aa <analogReference+0x6>
  syncADC();
  switch (mode)
    14b2:	3801      	subs	r0, #1
    14b4:	2804      	cmp	r0, #4
    14b6:	d816      	bhi.n	14e6 <analogReference+0x42>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    14b8:	6919      	ldr	r1, [r3, #16]
    14ba:	4a12      	ldr	r2, [pc, #72]	; (1504 <analogReference+0x60>)
    14bc:	400a      	ands	r2, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    14be:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    14c0:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    14c2:	785a      	ldrb	r2, [r3, #1]
    14c4:	438a      	bics	r2, r1
  switch (mode)
    14c6:	f000 fd29 	bl	1f1c <__gnu_thumb1_case_uqi>
    14ca:	0803      	.short	0x0803
    14cc:	0b06      	.short	0x0b06
    14ce:	03          	.byte	0x03
    14cf:	00          	.byte	0x00
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    14d0:	0011      	movs	r1, r2
    14d2:	2201      	movs	r2, #1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    14d4:	430a      	orrs	r2, r1
    14d6:	705a      	strb	r2, [r3, #1]
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
      break;
  }
}
    14d8:	bd00      	pop	{pc}
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    14da:	0011      	movs	r1, r2
    14dc:	2203      	movs	r2, #3
    14de:	e7f9      	b.n	14d4 <analogReference+0x30>
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    14e0:	0011      	movs	r1, r2
    14e2:	2202      	movs	r2, #2
    14e4:	e7f6      	b.n	14d4 <analogReference+0x30>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    14e6:	23f0      	movs	r3, #240	; 0xf0
    14e8:	6911      	ldr	r1, [r2, #16]
    14ea:	051b      	lsls	r3, r3, #20
    14ec:	430b      	orrs	r3, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    14ee:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    14f0:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    14f2:	7853      	ldrb	r3, [r2, #1]
    14f4:	438b      	bics	r3, r1
    14f6:	0019      	movs	r1, r3
    14f8:	2302      	movs	r3, #2
    14fa:	430b      	orrs	r3, r1
    14fc:	7053      	strb	r3, [r2, #1]
}
    14fe:	e7eb      	b.n	14d8 <analogReference+0x34>
    1500:	42004000 	.word	0x42004000
    1504:	f0ffffff 	.word	0xf0ffffff

00001508 <pinMode>:
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1508:	2318      	movs	r3, #24
{
    150a:	b530      	push	{r4, r5, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    150c:	001d      	movs	r5, r3
{
    150e:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1510:	4345      	muls	r5, r0
    1512:	2008      	movs	r0, #8
    1514:	4a20      	ldr	r2, [pc, #128]	; (1598 <pinMode+0x90>)
    1516:	1955      	adds	r5, r2, r5
    1518:	5628      	ldrsb	r0, [r5, r0]
    151a:	3001      	adds	r0, #1
    151c:	d014      	beq.n	1548 <pinMode+0x40>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    151e:	2903      	cmp	r1, #3
    1520:	d812      	bhi.n	1548 <pinMode+0x40>
    1522:	0008      	movs	r0, r1
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    1524:	4363      	muls	r3, r4
    1526:	56d1      	ldrsb	r1, [r2, r3]
    1528:	18d3      	adds	r3, r2, r3
  switch ( ulMode )
    152a:	f000 fcf7 	bl	1f1c <__gnu_thumb1_case_uqi>
    152e:	2802      	.short	0x2802
    1530:	1b0e      	.short	0x1b0e
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    1532:	6858      	ldr	r0, [r3, #4]
    1534:	01cb      	lsls	r3, r1, #7
    1536:	2102      	movs	r1, #2
    1538:	4a18      	ldr	r2, [pc, #96]	; (159c <pinMode+0x94>)
    153a:	189b      	adds	r3, r3, r2
    153c:	181a      	adds	r2, r3, r0
    153e:	3240      	adds	r2, #64	; 0x40
    1540:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1542:	2201      	movs	r2, #1
    1544:	4082      	lsls	r2, r0
    1546:	605a      	str	r2, [r3, #4]

    default:
      // do nothing
    break ;
  }
}
    1548:	bd30      	pop	{r4, r5, pc}
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    154a:	6858      	ldr	r0, [r3, #4]
    154c:	01cb      	lsls	r3, r1, #7
    154e:	2106      	movs	r1, #6
    1550:	4a12      	ldr	r2, [pc, #72]	; (159c <pinMode+0x94>)
    1552:	189b      	adds	r3, r3, r2
    1554:	181a      	adds	r2, r3, r0
    1556:	3240      	adds	r2, #64	; 0x40
    1558:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    155a:	2201      	movs	r2, #1
    155c:	4082      	lsls	r2, r0
    155e:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1560:	619a      	str	r2, [r3, #24]
    break ;
    1562:	e7f1      	b.n	1548 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    1564:	6858      	ldr	r0, [r3, #4]
    1566:	01cb      	lsls	r3, r1, #7
    1568:	2106      	movs	r1, #6
    156a:	4a0c      	ldr	r2, [pc, #48]	; (159c <pinMode+0x94>)
    156c:	189b      	adds	r3, r3, r2
    156e:	181a      	adds	r2, r3, r0
    1570:	3240      	adds	r2, #64	; 0x40
    1572:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1574:	2201      	movs	r2, #1
    1576:	4082      	lsls	r2, r0
    1578:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    157a:	615a      	str	r2, [r3, #20]
    break ;
    157c:	e7e4      	b.n	1548 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    157e:	6858      	ldr	r0, [r3, #4]
    1580:	01cb      	lsls	r3, r1, #7
    1582:	2102      	movs	r1, #2
    1584:	4a05      	ldr	r2, [pc, #20]	; (159c <pinMode+0x94>)
    1586:	189b      	adds	r3, r3, r2
    1588:	181a      	adds	r2, r3, r0
    158a:	3240      	adds	r2, #64	; 0x40
    158c:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    158e:	2201      	movs	r2, #1
    1590:	4082      	lsls	r2, r0
    1592:	609a      	str	r2, [r3, #8]
    break ;
    1594:	e7d8      	b.n	1548 <pinMode+0x40>
    1596:	46c0      	nop			; (mov r8, r8)
    1598:	00002238 	.word	0x00002238
    159c:	41004400 	.word	0x41004400

000015a0 <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    15a0:	2318      	movs	r3, #24
{
    15a2:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    15a4:	2408      	movs	r4, #8
    15a6:	4358      	muls	r0, r3
    15a8:	4a11      	ldr	r2, [pc, #68]	; (15f0 <digitalWrite+0x50>)
    15aa:	1813      	adds	r3, r2, r0
    15ac:	571c      	ldrsb	r4, [r3, r4]
    15ae:	3401      	adds	r4, #1
    15b0:	d01b      	beq.n	15ea <digitalWrite+0x4a>
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    15b2:	2601      	movs	r6, #1
    15b4:	0035      	movs	r5, r6
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    15b6:	685f      	ldr	r7, [r3, #4]

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    15b8:	5683      	ldrsb	r3, [r0, r2]
  uint32_t pinMask = (1ul << pin);
    15ba:	40bd      	lsls	r5, r7
  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    15bc:	4a0d      	ldr	r2, [pc, #52]	; (15f4 <digitalWrite+0x54>)
    15be:	01db      	lsls	r3, r3, #7
    15c0:	189a      	adds	r2, r3, r2
    15c2:	6890      	ldr	r0, [r2, #8]
    15c4:	4228      	tst	r0, r5
    15c6:	d10b      	bne.n	15e0 <digitalWrite+0x40>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    15c8:	000c      	movs	r4, r1
    15ca:	1e60      	subs	r0, r4, #1
    15cc:	4184      	sbcs	r4, r0
    15ce:	19d2      	adds	r2, r2, r7
    15d0:	3240      	adds	r2, #64	; 0x40
    15d2:	7810      	ldrb	r0, [r2, #0]
    15d4:	4034      	ands	r4, r6
    15d6:	3603      	adds	r6, #3
    15d8:	00a4      	lsls	r4, r4, #2
    15da:	43b0      	bics	r0, r6
    15dc:	4320      	orrs	r0, r4
    15de:	7010      	strb	r0, [r2, #0]
  }

  switch ( ulVal )
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    15e0:	4a04      	ldr	r2, [pc, #16]	; (15f4 <digitalWrite+0x54>)
    15e2:	189b      	adds	r3, r3, r2
  switch ( ulVal )
    15e4:	2900      	cmp	r1, #0
    15e6:	d101      	bne.n	15ec <digitalWrite+0x4c>
      PORT->Group[port].OUTCLR.reg = pinMask;
    15e8:	615d      	str	r5, [r3, #20]
      PORT->Group[port].OUTSET.reg = pinMask;
    break ;
  }

  return ;
}
    15ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PORT->Group[port].OUTSET.reg = pinMask;
    15ec:	619d      	str	r5, [r3, #24]
    break ;
    15ee:	e7fc      	b.n	15ea <digitalWrite+0x4a>
    15f0:	00002238 	.word	0x00002238
    15f4:	41004400 	.word	0x41004400

000015f8 <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    15f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15fa:	0003      	movs	r3, r0
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    15fc:	2018      	movs	r0, #24
    15fe:	4358      	muls	r0, r3
    1600:	4a2a      	ldr	r2, [pc, #168]	; (16ac <pinPeripheral+0xb4>)
    1602:	1810      	adds	r0, r2, r0
    1604:	7a00      	ldrb	r0, [r0, #8]
    1606:	b240      	sxtb	r0, r0
  {
    return -1 ;
    1608:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    160a:	3001      	adds	r0, #1
    160c:	d013      	beq.n	1636 <pinPeripheral+0x3e>
  }

  switch ( ulPeripheral )
    160e:	1c48      	adds	r0, r1, #1
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    1610:	2400      	movs	r4, #0
  switch ( ulPeripheral )
    1612:	280c      	cmp	r0, #12
    1614:	d80f      	bhi.n	1636 <pinPeripheral+0x3e>
    1616:	f000 fc81 	bl	1f1c <__gnu_thumb1_case_uqi>
    161a:	1c45      	.short	0x1c45
    161c:	1c1c1c1c 	.word	0x1c1c1c1c
    1620:	071c1c1c 	.word	0x071c1c1c
    1624:	0707      	.short	0x0707
    1626:	07          	.byte	0x07
    1627:	00          	.byte	0x00
      if ( ulPeripheral == PIO_INPUT )
    1628:	2909      	cmp	r1, #9
    162a:	d106      	bne.n	163a <pinPeripheral+0x42>
        pinMode( ulPin, INPUT ) ;
    162c:	2100      	movs	r1, #0
          pinMode( ulPin, INPUT_PULLUP ) ;
    162e:	0018      	movs	r0, r3
    1630:	f7ff ff6a 	bl	1508 <pinMode>
  return 0l ;
    1634:	2400      	movs	r4, #0
}
    1636:	0020      	movs	r0, r4
    1638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    163a:	290a      	cmp	r1, #10
    163c:	d101      	bne.n	1642 <pinPeripheral+0x4a>
          pinMode( ulPin, INPUT_PULLUP ) ;
    163e:	3908      	subs	r1, #8
    1640:	e7f5      	b.n	162e <pinPeripheral+0x36>
  return 0l ;
    1642:	2400      	movs	r4, #0
          if ( ulPeripheral == PIO_OUTPUT )
    1644:	290b      	cmp	r1, #11
    1646:	d1f6      	bne.n	1636 <pinPeripheral+0x3e>
            pinMode( ulPin, OUTPUT ) ;
    1648:	390a      	subs	r1, #10
    164a:	0018      	movs	r0, r3
    164c:	f7ff ff5c 	bl	1508 <pinMode>
    1650:	e7f1      	b.n	1636 <pinPeripheral+0x3e>
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    1652:	2018      	movs	r0, #24
    1654:	4343      	muls	r3, r0
    1656:	18d0      	adds	r0, r2, r3
    1658:	6846      	ldr	r6, [r0, #4]
    165a:	2501      	movs	r5, #1
    165c:	0034      	movs	r4, r6
    165e:	56d2      	ldrsb	r2, [r2, r3]
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    1660:	4813      	ldr	r0, [pc, #76]	; (16b0 <pinPeripheral+0xb8>)
    1662:	01d2      	lsls	r2, r2, #7
    1664:	1812      	adds	r2, r2, r0
    1666:	0873      	lsrs	r3, r6, #1
    1668:	18d3      	adds	r3, r2, r3
    166a:	3330      	adds	r3, #48	; 0x30
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    166c:	402c      	ands	r4, r5
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    166e:	7818      	ldrb	r0, [r3, #0]
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    1670:	2c00      	cmp	r4, #0
    1672:	d00b      	beq.n	168c <pinPeripheral+0x94>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    1674:	240f      	movs	r4, #15
    1676:	0109      	lsls	r1, r1, #4
    1678:	4020      	ands	r0, r4
    167a:	4301      	orrs	r1, r0
    167c:	b2c9      	uxtb	r1, r1
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    167e:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    1680:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    1682:	3240      	adds	r2, #64	; 0x40
    1684:	7813      	ldrb	r3, [r2, #0]
    1686:	431d      	orrs	r5, r3
    1688:	7015      	strb	r5, [r2, #0]
    168a:	e7d3      	b.n	1634 <pinPeripheral+0x3c>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    168c:	270f      	movs	r7, #15
    168e:	43b8      	bics	r0, r7
    1690:	4301      	orrs	r1, r0
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    1692:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    1694:	b2c9      	uxtb	r1, r1
    1696:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    1698:	0013      	movs	r3, r2
    169a:	3340      	adds	r3, #64	; 0x40
    169c:	781a      	ldrb	r2, [r3, #0]
    169e:	4315      	orrs	r5, r2
    16a0:	701d      	strb	r5, [r3, #0]
    16a2:	e7c8      	b.n	1636 <pinPeripheral+0x3e>
      return -1l ;
    16a4:	2401      	movs	r4, #1
    16a6:	4264      	negs	r4, r4
    16a8:	e7c5      	b.n	1636 <pinPeripheral+0x3e>
    16aa:	46c0      	nop			; (mov r8, r8)
    16ac:	00002238 	.word	0x00002238
    16b0:	41004400 	.word	0x41004400

000016b4 <SERCOM0_Handler>:
SERCOM sercom5( SERCOM5 ) ;

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
void SERCOM0_Handler()
{
    16b4:	b510      	push	{r4, lr}
  Serial1.IrqHandler();
    16b6:	4802      	ldr	r0, [pc, #8]	; (16c0 <SERCOM0_Handler+0xc>)
    16b8:	f000 f9f4 	bl	1aa4 <_ZN4Uart10IrqHandlerEv>
}
    16bc:	bd10      	pop	{r4, pc}
    16be:	46c0      	nop			; (mov r8, r8)
    16c0:	2000079c 	.word	0x2000079c

000016c4 <SERCOM5_Handler>:

void SERCOM5_Handler()
{
    16c4:	b510      	push	{r4, lr}
  Serial.IrqHandler();
    16c6:	4802      	ldr	r0, [pc, #8]	; (16d0 <SERCOM5_Handler+0xc>)
    16c8:	f000 f9ec 	bl	1aa4 <_ZN4Uart10IrqHandlerEv>
}
    16cc:	bd10      	pop	{r4, pc}
    16ce:	46c0      	nop			; (mov r8, r8)
    16d0:	200006e0 	.word	0x200006e0

000016d4 <_GLOBAL__sub_I_g_APinDescription>:
    16d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    16d6:	2401      	movs	r4, #1
    16d8:	2603      	movs	r6, #3
SERCOM sercom0( SERCOM0 ) ;
    16da:	4f15      	ldr	r7, [pc, #84]	; (1730 <_GLOBAL__sub_I_g_APinDescription+0x5c>)
    16dc:	4915      	ldr	r1, [pc, #84]	; (1734 <_GLOBAL__sub_I_g_APinDescription+0x60>)
    16de:	0038      	movs	r0, r7
    16e0:	f000 f842 	bl	1768 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    16e4:	4914      	ldr	r1, [pc, #80]	; (1738 <_GLOBAL__sub_I_g_APinDescription+0x64>)
    16e6:	4815      	ldr	r0, [pc, #84]	; (173c <_GLOBAL__sub_I_g_APinDescription+0x68>)
    16e8:	f000 f83e 	bl	1768 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    16ec:	4914      	ldr	r1, [pc, #80]	; (1740 <_GLOBAL__sub_I_g_APinDescription+0x6c>)
    16ee:	4815      	ldr	r0, [pc, #84]	; (1744 <_GLOBAL__sub_I_g_APinDescription+0x70>)
    16f0:	f000 f83a 	bl	1768 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    16f4:	4914      	ldr	r1, [pc, #80]	; (1748 <_GLOBAL__sub_I_g_APinDescription+0x74>)
    16f6:	4815      	ldr	r0, [pc, #84]	; (174c <_GLOBAL__sub_I_g_APinDescription+0x78>)
    16f8:	f000 f836 	bl	1768 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    16fc:	4914      	ldr	r1, [pc, #80]	; (1750 <_GLOBAL__sub_I_g_APinDescription+0x7c>)
    16fe:	4815      	ldr	r0, [pc, #84]	; (1754 <_GLOBAL__sub_I_g_APinDescription+0x80>)
    1700:	f000 f832 	bl	1768 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    1704:	4d14      	ldr	r5, [pc, #80]	; (1758 <_GLOBAL__sub_I_g_APinDescription+0x84>)
    1706:	4915      	ldr	r1, [pc, #84]	; (175c <_GLOBAL__sub_I_g_APinDescription+0x88>)
    1708:	0028      	movs	r0, r5
    170a:	f000 f82d 	bl	1768 <_ZN6SERCOMC1EP6Sercom>
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    170e:	0039      	movs	r1, r7
    1710:	9600      	str	r6, [sp, #0]
    1712:	0023      	movs	r3, r4
    1714:	9401      	str	r4, [sp, #4]
    1716:	2200      	movs	r2, #0
    1718:	4811      	ldr	r0, [pc, #68]	; (1760 <_GLOBAL__sub_I_g_APinDescription+0x8c>)
    171a:	f000 f995 	bl	1a48 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
    171e:	9600      	str	r6, [sp, #0]
    1720:	0029      	movs	r1, r5
    1722:	9401      	str	r4, [sp, #4]
    1724:	231e      	movs	r3, #30
    1726:	221f      	movs	r2, #31
    1728:	480e      	ldr	r0, [pc, #56]	; (1764 <_GLOBAL__sub_I_g_APinDescription+0x90>)
    172a:	f000 f98d 	bl	1a48 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
}
    172e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1730:	20000858 	.word	0x20000858
    1734:	42000800 	.word	0x42000800
    1738:	42000c00 	.word	0x42000c00
    173c:	2000085c 	.word	0x2000085c
    1740:	42001000 	.word	0x42001000
    1744:	20000860 	.word	0x20000860
    1748:	42001400 	.word	0x42001400
    174c:	20000864 	.word	0x20000864
    1750:	42001800 	.word	0x42001800
    1754:	20000868 	.word	0x20000868
    1758:	2000086c 	.word	0x2000086c
    175c:	42001c00 	.word	0x42001c00
    1760:	2000079c 	.word	0x2000079c
    1764:	200006e0 	.word	0x200006e0

00001768 <_ZN6SERCOMC1EP6Sercom>:
#include "SERCOM.h"
#include "variant.h"

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    1768:	6001      	str	r1, [r0, #0]
}
    176a:	4770      	bx	lr

0000176c <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    176c:	b5f0      	push	{r4, r5, r6, r7, lr}
    176e:	ac05      	add	r4, sp, #20
    1770:	7825      	ldrb	r5, [r4, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    1772:	6804      	ldr	r4, [r0, #0]
    1774:	1e98      	subs	r0, r3, #2
    1776:	1e47      	subs	r7, r0, #1
    1778:	41b8      	sbcs	r0, r7
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    177a:	6826      	ldr	r6, [r4, #0]
    177c:	0792      	lsls	r2, r2, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    177e:	0600      	lsls	r0, r0, #24
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    1780:	4332      	orrs	r2, r6
    1782:	4302      	orrs	r2, r0

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    1784:	2007      	movs	r0, #7
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    1786:	6022      	str	r2, [r4, #0]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    1788:	4001      	ands	r1, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    178a:	01ad      	lsls	r5, r5, #6
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    178c:	6862      	ldr	r2, [r4, #4]
    178e:	4329      	orrs	r1, r5
    1790:	2000      	movs	r0, #0
    1792:	2b02      	cmp	r3, #2
    1794:	d000      	beq.n	1798 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x2c>
    1796:	0358      	lsls	r0, r3, #13
    1798:	4311      	orrs	r1, r2
    179a:	4301      	orrs	r1, r0
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    179c:	6061      	str	r1, [r4, #4]
}
    179e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000017a0 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    17a0:	b510      	push	{r4, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    17a2:	24c0      	movs	r4, #192	; 0xc0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    17a4:	6803      	ldr	r3, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    17a6:	03a4      	lsls	r4, r4, #14
    17a8:	6818      	ldr	r0, [r3, #0]
    17aa:	0512      	lsls	r2, r2, #20
    17ac:	4022      	ands	r2, r4
    17ae:	4302      	orrs	r2, r0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    17b0:	20c0      	movs	r0, #192	; 0xc0
    17b2:	0409      	lsls	r1, r1, #16
    17b4:	0280      	lsls	r0, r0, #10
    17b6:	4001      	ands	r1, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    17b8:	4311      	orrs	r1, r2
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    17ba:	6019      	str	r1, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    17bc:	685a      	ldr	r2, [r3, #4]
    17be:	4310      	orrs	r0, r2
    17c0:	6058      	str	r0, [r3, #4]
}
    17c2:	bd10      	pop	{r4, pc}

000017c4 <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    17c4:	2201      	movs	r2, #1
    17c6:	6803      	ldr	r3, [r0, #0]
    17c8:	6819      	ldr	r1, [r3, #0]
    17ca:	430a      	orrs	r2, r1
    17cc:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    17ce:	681a      	ldr	r2, [r3, #0]
    17d0:	07d2      	lsls	r2, r2, #31
    17d2:	d4fc      	bmi.n	17ce <_ZN6SERCOM9resetUARTEv+0xa>
    17d4:	69da      	ldr	r2, [r3, #28]
    17d6:	07d2      	lsls	r2, r2, #31
    17d8:	d4f9      	bmi.n	17ce <_ZN6SERCOM9resetUARTEv+0xa>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    17da:	4770      	bx	lr

000017dc <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    17dc:	2202      	movs	r2, #2
    17de:	6803      	ldr	r3, [r0, #0]
    17e0:	6819      	ldr	r1, [r3, #0]
    17e2:	430a      	orrs	r2, r1
    17e4:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    17e6:	69da      	ldr	r2, [r3, #28]
    17e8:	0792      	lsls	r2, r2, #30
    17ea:	d4fc      	bmi.n	17e6 <_ZN6SERCOM10enableUARTEv+0xa>
}
    17ec:	4770      	bx	lr

000017ee <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    17ee:	6803      	ldr	r3, [r0, #0]
    17f0:	7e1a      	ldrb	r2, [r3, #24]
  if(isDataRegisterEmptyUART())
    17f2:	07d2      	lsls	r2, r2, #31
    17f4:	d402      	bmi.n	17fc <_ZN6SERCOM9flushUARTEv+0xe>
  while(!sercom->USART.INTFLAG.bit.TXC);
    17f6:	7e1a      	ldrb	r2, [r3, #24]
    17f8:	0792      	lsls	r2, r2, #30
    17fa:	d5fc      	bpl.n	17f6 <_ZN6SERCOM9flushUARTEv+0x8>
}
    17fc:	4770      	bx	lr

000017fe <_ZN6SERCOM15clearStatusUARTEv>:
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    17fe:	2200      	movs	r2, #0
    1800:	6803      	ldr	r3, [r0, #0]
    1802:	835a      	strh	r2, [r3, #26]
}
    1804:	4770      	bx	lr

00001806 <_ZN6SERCOM17availableDataUARTEv>:
  return sercom->USART.INTFLAG.bit.RXC;
    1806:	6803      	ldr	r3, [r0, #0]
    1808:	7e18      	ldrb	r0, [r3, #24]
    180a:	0740      	lsls	r0, r0, #29
    180c:	0fc0      	lsrs	r0, r0, #31
}
    180e:	4770      	bx	lr

00001810 <_ZN6SERCOM11isUARTErrorEv>:
  return sercom->USART.INTFLAG.bit.ERROR;
    1810:	6803      	ldr	r3, [r0, #0]
    1812:	7e18      	ldrb	r0, [r3, #24]
    1814:	09c0      	lsrs	r0, r0, #7
}
    1816:	4770      	bx	lr

00001818 <_ZN6SERCOM20acknowledgeUARTErrorEv>:
  sercom->USART.INTFLAG.bit.ERROR = 1;
    1818:	2380      	movs	r3, #128	; 0x80
    181a:	6802      	ldr	r2, [r0, #0]
    181c:	425b      	negs	r3, r3
    181e:	7e11      	ldrb	r1, [r2, #24]
    1820:	430b      	orrs	r3, r1
    1822:	7613      	strb	r3, [r2, #24]
}
    1824:	4770      	bx	lr

00001826 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
    1826:	6803      	ldr	r3, [r0, #0]
    1828:	7e18      	ldrb	r0, [r3, #24]
    182a:	07c0      	lsls	r0, r0, #31
    182c:	0fc0      	lsrs	r0, r0, #31
}
    182e:	4770      	bx	lr

00001830 <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    1830:	6803      	ldr	r3, [r0, #0]
    1832:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    1834:	b2c0      	uxtb	r0, r0
}
    1836:	4770      	bx	lr

00001838 <_ZN6SERCOM13writeDataUARTEh>:
  return sercom->USART.INTFLAG.bit.DRE;
    1838:	6803      	ldr	r3, [r0, #0]
    183a:	7e1a      	ldrb	r2, [r3, #24]

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    183c:	07d2      	lsls	r2, r2, #31
    183e:	d5fc      	bpl.n	183a <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    1840:	b289      	uxth	r1, r1
  return 1;
}
    1842:	2001      	movs	r0, #1
  sercom->USART.DATA.reg = (uint16_t)data;
    1844:	8519      	strh	r1, [r3, #40]	; 0x28
}
    1846:	4770      	bx	lr

00001848 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENSET.reg |= SERCOM_USART_INTENSET_DRE;
    1848:	2301      	movs	r3, #1
    184a:	6802      	ldr	r2, [r0, #0]
    184c:	7d91      	ldrb	r1, [r2, #22]
    184e:	430b      	orrs	r3, r1
    1850:	7593      	strb	r3, [r2, #22]
}
    1852:	4770      	bx	lr

00001854 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    1854:	2201      	movs	r2, #1
    1856:	6803      	ldr	r3, [r0, #0]
    1858:	751a      	strb	r2, [r3, #20]
}
    185a:	4770      	bx	lr

0000185c <_ZN6SERCOM13initClockNVICEv>:
void SERCOM::initClockNVIC( void )
{
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
    185c:	6803      	ldr	r3, [r0, #0]
    185e:	4a21      	ldr	r2, [pc, #132]	; (18e4 <_ZN6SERCOM13initClockNVICEv+0x88>)
{
    1860:	b530      	push	{r4, r5, lr}
  if(sercom == SERCOM0)
    1862:	4293      	cmp	r3, r2
    1864:	d011      	beq.n	188a <_ZN6SERCOM13initClockNVICEv+0x2e>
  {
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
    1866:	4a20      	ldr	r2, [pc, #128]	; (18e8 <_ZN6SERCOM13initClockNVICEv+0x8c>)
    1868:	4293      	cmp	r3, r2
    186a:	d02f      	beq.n	18cc <_ZN6SERCOM13initClockNVICEv+0x70>
  {
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
    186c:	4a1f      	ldr	r2, [pc, #124]	; (18ec <_ZN6SERCOM13initClockNVICEv+0x90>)
    186e:	4293      	cmp	r3, r2
    1870:	d02f      	beq.n	18d2 <_ZN6SERCOM13initClockNVICEv+0x76>
  {
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
    1872:	4a1f      	ldr	r2, [pc, #124]	; (18f0 <_ZN6SERCOM13initClockNVICEv+0x94>)
    1874:	4293      	cmp	r3, r2
    1876:	d02f      	beq.n	18d8 <_ZN6SERCOM13initClockNVICEv+0x7c>
  {
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
  }
  else if(sercom == SERCOM4)
    1878:	4a1e      	ldr	r2, [pc, #120]	; (18f4 <_ZN6SERCOM13initClockNVICEv+0x98>)
    187a:	4293      	cmp	r3, r2
    187c:	d02f      	beq.n	18de <_ZN6SERCOM13initClockNVICEv+0x82>
  {
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
  }
  else if(sercom == SERCOM5)
    187e:	4a1e      	ldr	r2, [pc, #120]	; (18f8 <_ZN6SERCOM13initClockNVICEv+0x9c>)
    1880:	4293      	cmp	r3, r2
    1882:	d122      	bne.n	18ca <_ZN6SERCOM13initClockNVICEv+0x6e>
  {
    clockId = GCM_SERCOM5_CORE;
    IdNvic = SERCOM5_IRQn;
    1884:	230e      	movs	r3, #14
    clockId = GCM_SERCOM5_CORE;
    1886:	2219      	movs	r2, #25
    1888:	e001      	b.n	188e <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM0_IRQn;
    188a:	2309      	movs	r3, #9
    clockId = GCM_SERCOM0_CORE;
    188c:	2214      	movs	r2, #20
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    188e:	2101      	movs	r1, #1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1890:	2503      	movs	r5, #3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1892:	4099      	lsls	r1, r3
    1894:	4819      	ldr	r0, [pc, #100]	; (18fc <_ZN6SERCOM13initClockNVICEv+0xa0>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1896:	24c0      	movs	r4, #192	; 0xc0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1898:	6001      	str	r1, [r0, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    189a:	0899      	lsrs	r1, r3, #2
    189c:	402b      	ands	r3, r5
    189e:	40ab      	lsls	r3, r5
    18a0:	35fc      	adds	r5, #252	; 0xfc
    18a2:	409d      	lsls	r5, r3
    18a4:	0089      	lsls	r1, r1, #2
    18a6:	1809      	adds	r1, r1, r0
    18a8:	00a4      	lsls	r4, r4, #2
    18aa:	5908      	ldr	r0, [r1, r4]
    18ac:	43a8      	bics	r0, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    18ae:	25c0      	movs	r5, #192	; 0xc0
    18b0:	409d      	lsls	r5, r3
    18b2:	002b      	movs	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    18b4:	4303      	orrs	r3, r0
    18b6:	510b      	str	r3, [r1, r4]
  NVIC_EnableIRQ(IdNvic);
  NVIC_SetPriority (IdNvic, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority */

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
    18b8:	2380      	movs	r3, #128	; 0x80
    18ba:	01db      	lsls	r3, r3, #7
    18bc:	431a      	orrs	r2, r3
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    18be:	4b10      	ldr	r3, [pc, #64]	; (1900 <_ZN6SERCOM13initClockNVICEv+0xa4>)
    18c0:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    18c2:	785a      	ldrb	r2, [r3, #1]
    18c4:	b252      	sxtb	r2, r2
    18c6:	2a00      	cmp	r2, #0
    18c8:	dbfb      	blt.n	18c2 <_ZN6SERCOM13initClockNVICEv+0x66>
  {
    /* Wait for synchronization */
  }
}
    18ca:	bd30      	pop	{r4, r5, pc}
    IdNvic = SERCOM1_IRQn;
    18cc:	230a      	movs	r3, #10
    clockId = GCM_SERCOM1_CORE;
    18ce:	2215      	movs	r2, #21
    18d0:	e7dd      	b.n	188e <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM2_IRQn;
    18d2:	230b      	movs	r3, #11
    clockId = GCM_SERCOM2_CORE;
    18d4:	2216      	movs	r2, #22
    18d6:	e7da      	b.n	188e <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM3_IRQn;
    18d8:	230c      	movs	r3, #12
    clockId = GCM_SERCOM3_CORE;
    18da:	2217      	movs	r2, #23
    18dc:	e7d7      	b.n	188e <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM4_IRQn;
    18de:	230d      	movs	r3, #13
    clockId = GCM_SERCOM4_CORE;
    18e0:	2218      	movs	r2, #24
    18e2:	e7d4      	b.n	188e <_ZN6SERCOM13initClockNVICEv+0x32>
    18e4:	42000800 	.word	0x42000800
    18e8:	42000c00 	.word	0x42000c00
    18ec:	42001000 	.word	0x42001000
    18f0:	42001400 	.word	0x42001400
    18f4:	42001800 	.word	0x42001800
    18f8:	42001c00 	.word	0x42001c00
    18fc:	e000e100 	.word	0xe000e100
    1900:	40000c00 	.word	0x40000c00

00001904 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
{
    1904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1906:	0004      	movs	r4, r0
    1908:	0016      	movs	r6, r2
    190a:	000f      	movs	r7, r1
    190c:	001d      	movs	r5, r3
  initClockNVIC();
    190e:	f7ff ffa5 	bl	185c <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    1912:	0020      	movs	r0, r4
    1914:	f7ff ff56 	bl	17c4 <_ZN6SERCOM9resetUARTEv>
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    1918:	221c      	movs	r2, #28
    191a:	00bb      	lsls	r3, r7, #2
    191c:	4013      	ands	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    191e:	0772      	lsls	r2, r6, #29
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    1920:	6824      	ldr	r4, [r4, #0]
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    1922:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    1924:	4313      	orrs	r3, r2
    1926:	6023      	str	r3, [r4, #0]
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    1928:	2384      	movs	r3, #132	; 0x84
    192a:	75a3      	strb	r3, [r4, #22]
  if ( mode == UART_INT_CLOCK )
    192c:	2f01      	cmp	r7, #1
    192e:	d118      	bne.n	1962 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x5e>
      sampleRateValue = 16;
    1930:	2110      	movs	r1, #16
    if (sampleRate == SAMPLE_RATE_x16) {
    1932:	2e01      	cmp	r6, #1
    1934:	d000      	beq.n	1938 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x34>
      sampleRateValue = 8;
    1936:	3908      	subs	r1, #8
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    1938:	4b0a      	ldr	r3, [pc, #40]	; (1964 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x60>)
    193a:	4369      	muls	r1, r5
    193c:	6818      	ldr	r0, [r3, #0]
    193e:	00c0      	lsls	r0, r0, #3
    1940:	f000 faf6 	bl	1f30 <__udivsi3>
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    1944:	2207      	movs	r2, #7
    1946:	89a3      	ldrh	r3, [r4, #12]
    1948:	4002      	ands	r2, r0
    194a:	04db      	lsls	r3, r3, #19
    194c:	0352      	lsls	r2, r2, #13
    194e:	0cdb      	lsrs	r3, r3, #19
    1950:	4313      	orrs	r3, r2
    1952:	81a3      	strh	r3, [r4, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    1954:	0403      	lsls	r3, r0, #16
    1956:	89a0      	ldrh	r0, [r4, #12]
    1958:	0cdb      	lsrs	r3, r3, #19
    195a:	0b40      	lsrs	r0, r0, #13
    195c:	0340      	lsls	r0, r0, #13
    195e:	4318      	orrs	r0, r3
    1960:	81a0      	strh	r0, [r4, #12]
}
    1962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1964:	2000002c 	.word	0x2000002c

00001968 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
    1968:	2001      	movs	r0, #1
    196a:	4770      	bx	lr

0000196c <_ZN4Uart5beginEm>:
  uc_pinRTS = _pinRTS;
  uc_pinCTS = _pinCTS;
}

void Uart::begin(unsigned long baudrate)
{
    196c:	b510      	push	{r4, lr}
  begin(baudrate, SERIAL_8N1);
    196e:	6803      	ldr	r3, [r0, #0]
    1970:	4a01      	ldr	r2, [pc, #4]	; (1978 <_ZN4Uart5beginEm+0xc>)
    1972:	6a1b      	ldr	r3, [r3, #32]
    1974:	4798      	blx	r3
}
    1976:	bd10      	pop	{r4, pc}
    1978:	00000413 	.word	0x00000413

0000197c <_ZN4Uart3endEv>:

  sercom->enableUART();
}

void Uart::end()
{
    197c:	b510      	push	{r4, lr}
    197e:	0004      	movs	r4, r0
  sercom->resetUART();
    1980:	6900      	ldr	r0, [r0, #16]
    1982:	f7ff ff1f 	bl	17c4 <_ZN6SERCOM9resetUARTEv>
  rxBuffer.clear();
    1986:	0020      	movs	r0, r4
    1988:	3014      	adds	r0, #20
    198a:	f000 fa91 	bl	1eb0 <_ZN10RingBuffer5clearEv>
  txBuffer.clear();
    198e:	0020      	movs	r0, r4
    1990:	305c      	adds	r0, #92	; 0x5c
    1992:	f000 fa8d 	bl	1eb0 <_ZN10RingBuffer5clearEv>
}
    1996:	bd10      	pop	{r4, pc}

00001998 <_ZN4Uart9availableEv>:
    sercom->clearStatusUART();
  }
}

int Uart::available()
{
    1998:	b510      	push	{r4, lr}
  return rxBuffer.available();
    199a:	3014      	adds	r0, #20
    199c:	f000 fa9a 	bl	1ed4 <_ZN10RingBuffer9availableEv>
}
    19a0:	bd10      	pop	{r4, pc}

000019a2 <_ZN4Uart5flushEv>:
{
    19a2:	b510      	push	{r4, lr}
    19a4:	0004      	movs	r4, r0
  while(txBuffer.available()); // wait until TX buffer is empty
    19a6:	0020      	movs	r0, r4
    19a8:	305c      	adds	r0, #92	; 0x5c
    19aa:	f000 fa93 	bl	1ed4 <_ZN10RingBuffer9availableEv>
    19ae:	2800      	cmp	r0, #0
    19b0:	d1f9      	bne.n	19a6 <_ZN4Uart5flushEv+0x4>
  sercom->flushUART();
    19b2:	6920      	ldr	r0, [r4, #16]
    19b4:	f7ff ff1b 	bl	17ee <_ZN6SERCOM9flushUARTEv>
}
    19b8:	bd10      	pop	{r4, pc}

000019ba <_ZN4Uart17availableForWriteEv>:

int Uart::availableForWrite()
{
    19ba:	b510      	push	{r4, lr}
  return txBuffer.availableForStore();
    19bc:	305c      	adds	r0, #92	; 0x5c
    19be:	f000 fa8f 	bl	1ee0 <_ZN10RingBuffer17availableForStoreEv>
}
    19c2:	bd10      	pop	{r4, pc}

000019c4 <_ZN4Uart4readEv>:
{
  return rxBuffer.peek();
}

int Uart::read()
{
    19c4:	b570      	push	{r4, r5, r6, lr}
  int c = rxBuffer.read_char();
    19c6:	0005      	movs	r5, r0
{
    19c8:	0004      	movs	r4, r0
  int c = rxBuffer.read_char();
    19ca:	3514      	adds	r5, #20
    19cc:	0028      	movs	r0, r5
    19ce:	f000 fa73 	bl	1eb8 <_ZN10RingBuffer9read_charEv>

  if (uc_pinRTS != NO_RTS_PIN) {
    19d2:	0023      	movs	r3, r4
    19d4:	33a8      	adds	r3, #168	; 0xa8
    19d6:	781b      	ldrb	r3, [r3, #0]
  int c = rxBuffer.read_char();
    19d8:	0006      	movs	r6, r0
  if (uc_pinRTS != NO_RTS_PIN) {
    19da:	2bff      	cmp	r3, #255	; 0xff
    19dc:	d00a      	beq.n	19f4 <_ZN4Uart4readEv+0x30>
    // if there is enough space in the RX buffer, assert RTS
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
    19de:	0028      	movs	r0, r5
    19e0:	f000 fa7e 	bl	1ee0 <_ZN10RingBuffer17availableForStoreEv>
    19e4:	280a      	cmp	r0, #10
    19e6:	dd05      	ble.n	19f4 <_ZN4Uart4readEv+0x30>
      *pul_outclrRTS = ul_pinMaskRTS;
    19e8:	0023      	movs	r3, r4
    19ea:	34b4      	adds	r4, #180	; 0xb4
    19ec:	33b0      	adds	r3, #176	; 0xb0
    19ee:	681b      	ldr	r3, [r3, #0]
    19f0:	6822      	ldr	r2, [r4, #0]
    19f2:	601a      	str	r2, [r3, #0]
    }
  }

  return c;
}
    19f4:	0030      	movs	r0, r6
    19f6:	bd70      	pop	{r4, r5, r6, pc}

000019f8 <_ZN4Uart4peekEv>:
{
    19f8:	b510      	push	{r4, lr}
  return rxBuffer.peek();
    19fa:	3014      	adds	r0, #20
    19fc:	f000 fa7a 	bl	1ef4 <_ZN10RingBuffer4peekEv>
}
    1a00:	bd10      	pop	{r4, pc}

00001a02 <_ZN4Uart5writeEh>:

size_t Uart::write(const uint8_t data)
{
    1a02:	b570      	push	{r4, r5, r6, lr}
    1a04:	0004      	movs	r4, r0
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    1a06:	6900      	ldr	r0, [r0, #16]
{
    1a08:	000e      	movs	r6, r1
    1a0a:	0025      	movs	r5, r4
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    1a0c:	f7ff ff0b 	bl	1826 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    1a10:	355c      	adds	r5, #92	; 0x5c
    1a12:	2800      	cmp	r0, #0
    1a14:	d004      	beq.n	1a20 <_ZN4Uart5writeEh+0x1e>
    1a16:	0028      	movs	r0, r5
    1a18:	f000 fa5c 	bl	1ed4 <_ZN10RingBuffer9availableEv>
    1a1c:	2800      	cmp	r0, #0
    1a1e:	d00d      	beq.n	1a3c <_ZN4Uart5writeEh+0x3a>
    sercom->writeDataUART(data);
  } else {
    while(txBuffer.isFull()); // spin lock until a spot opens up in the buffer
    1a20:	0028      	movs	r0, r5
    1a22:	f000 fa70 	bl	1f06 <_ZN10RingBuffer6isFullEv>
    1a26:	2800      	cmp	r0, #0
    1a28:	d1fa      	bne.n	1a20 <_ZN4Uart5writeEh+0x1e>

    txBuffer.store_char(data);
    1a2a:	0028      	movs	r0, r5
    1a2c:	0031      	movs	r1, r6
    1a2e:	f000 fa34 	bl	1e9a <_ZN10RingBuffer10store_charEh>

    sercom->enableDataRegisterEmptyInterruptUART();
    1a32:	6920      	ldr	r0, [r4, #16]
    1a34:	f7ff ff08 	bl	1848 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
  }

  return 1;
}
    1a38:	2001      	movs	r0, #1
    1a3a:	bd70      	pop	{r4, r5, r6, pc}
    sercom->writeDataUART(data);
    1a3c:	0031      	movs	r1, r6
    1a3e:	6920      	ldr	r0, [r4, #16]
    1a40:	f7ff fefa 	bl	1838 <_ZN6SERCOM13writeDataUARTEh>
  return 1;
    1a44:	e7f8      	b.n	1a38 <_ZN4Uart5writeEh+0x36>
	...

00001a48 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    1a48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1a4a:	001d      	movs	r5, r3
    1a4c:	ab08      	add	r3, sp, #32
    1a4e:	781b      	ldrb	r3, [r3, #0]
    1a50:	0004      	movs	r4, r0
    1a52:	9300      	str	r3, [sp, #0]
    1a54:	ab09      	add	r3, sp, #36	; 0x24
    1a56:	781b      	ldrb	r3, [r3, #0]
    1a58:	0016      	movs	r6, r2
    1a5a:	9301      	str	r3, [sp, #4]
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1a5c:	2300      	movs	r3, #0
    1a5e:	6043      	str	r3, [r0, #4]
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1a60:	23fa      	movs	r3, #250	; 0xfa
    1a62:	009b      	lsls	r3, r3, #2
    1a64:	6083      	str	r3, [r0, #8]
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    1a66:	4b0e      	ldr	r3, [pc, #56]	; (1aa0 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x58>)
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    1a68:	000f      	movs	r7, r1
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    1a6a:	3308      	adds	r3, #8
    1a6c:	6003      	str	r3, [r0, #0]
    1a6e:	3014      	adds	r0, #20
    1a70:	f000 fa08 	bl	1e84 <_ZN10RingBufferC1Ev>
    1a74:	0020      	movs	r0, r4
    1a76:	305c      	adds	r0, #92	; 0x5c
    1a78:	f000 fa04 	bl	1e84 <_ZN10RingBufferC1Ev>
  uc_padRX = _padRX ;
    1a7c:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
    1a7e:	0023      	movs	r3, r4
  uc_padRX = _padRX ;
    1a80:	7812      	ldrb	r2, [r2, #0]
  uc_pinRX = _pinRX;
    1a82:	33a4      	adds	r3, #164	; 0xa4
  sercom = _s;
    1a84:	6127      	str	r7, [r4, #16]
  uc_padRX = _padRX ;
    1a86:	709a      	strb	r2, [r3, #2]
  uc_padTX = _padTX;
    1a88:	466a      	mov	r2, sp
    1a8a:	7912      	ldrb	r2, [r2, #4]
  uc_pinRX = _pinRX;
    1a8c:	701e      	strb	r6, [r3, #0]
  uc_padTX = _padTX;
    1a8e:	70da      	strb	r2, [r3, #3]
  uc_pinRTS = _pinRTS;
    1a90:	0022      	movs	r2, r4
  uc_pinTX = _pinTX;
    1a92:	705d      	strb	r5, [r3, #1]
  uc_pinRTS = _pinRTS;
    1a94:	23ff      	movs	r3, #255	; 0xff
    1a96:	32a8      	adds	r2, #168	; 0xa8
}
    1a98:	0020      	movs	r0, r4
  uc_pinRTS = _pinRTS;
    1a9a:	7013      	strb	r3, [r2, #0]
  uc_pinCTS = _pinCTS;
    1a9c:	7413      	strb	r3, [r2, #16]
}
    1a9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1aa0:	00002658 	.word	0x00002658

00001aa4 <_ZN4Uart10IrqHandlerEv>:
{
    1aa4:	b570      	push	{r4, r5, r6, lr}
    1aa6:	0004      	movs	r4, r0
  if (sercom->availableDataUART()) {
    1aa8:	6900      	ldr	r0, [r0, #16]
    1aaa:	f7ff feac 	bl	1806 <_ZN6SERCOM17availableDataUARTEv>
    1aae:	2800      	cmp	r0, #0
    1ab0:	d019      	beq.n	1ae6 <_ZN4Uart10IrqHandlerEv+0x42>
    rxBuffer.store_char(sercom->readDataUART());
    1ab2:	0025      	movs	r5, r4
    1ab4:	6920      	ldr	r0, [r4, #16]
    1ab6:	f7ff febb 	bl	1830 <_ZN6SERCOM12readDataUARTEv>
    1aba:	3514      	adds	r5, #20
    1abc:	0001      	movs	r1, r0
    1abe:	0028      	movs	r0, r5
    1ac0:	f000 f9eb 	bl	1e9a <_ZN10RingBuffer10store_charEh>
    if (uc_pinRTS != NO_RTS_PIN) {
    1ac4:	0023      	movs	r3, r4
    1ac6:	33a8      	adds	r3, #168	; 0xa8
    1ac8:	781b      	ldrb	r3, [r3, #0]
    1aca:	2bff      	cmp	r3, #255	; 0xff
    1acc:	d00b      	beq.n	1ae6 <_ZN4Uart10IrqHandlerEv+0x42>
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
    1ace:	0028      	movs	r0, r5
    1ad0:	f000 fa06 	bl	1ee0 <_ZN10RingBuffer17availableForStoreEv>
    1ad4:	2809      	cmp	r0, #9
    1ad6:	dc06      	bgt.n	1ae6 <_ZN4Uart10IrqHandlerEv+0x42>
        *pul_outsetRTS = ul_pinMaskRTS;
    1ad8:	0023      	movs	r3, r4
    1ada:	0022      	movs	r2, r4
    1adc:	33ac      	adds	r3, #172	; 0xac
    1ade:	32b4      	adds	r2, #180	; 0xb4
    1ae0:	681b      	ldr	r3, [r3, #0]
    1ae2:	6812      	ldr	r2, [r2, #0]
    1ae4:	601a      	str	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART()) {
    1ae6:	6920      	ldr	r0, [r4, #16]
    1ae8:	f7ff fe9d 	bl	1826 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    1aec:	2800      	cmp	r0, #0
    1aee:	d00d      	beq.n	1b0c <_ZN4Uart10IrqHandlerEv+0x68>
    if (txBuffer.available()) {
    1af0:	0025      	movs	r5, r4
    1af2:	355c      	adds	r5, #92	; 0x5c
    1af4:	0028      	movs	r0, r5
    1af6:	f000 f9ed 	bl	1ed4 <_ZN10RingBuffer9availableEv>
    1afa:	2800      	cmp	r0, #0
    1afc:	d012      	beq.n	1b24 <_ZN4Uart10IrqHandlerEv+0x80>
      uint8_t data = txBuffer.read_char();
    1afe:	0028      	movs	r0, r5
    1b00:	f000 f9da 	bl	1eb8 <_ZN10RingBuffer9read_charEv>
      sercom->writeDataUART(data);
    1b04:	b2c1      	uxtb	r1, r0
    1b06:	6920      	ldr	r0, [r4, #16]
    1b08:	f7ff fe96 	bl	1838 <_ZN6SERCOM13writeDataUARTEh>
  if (sercom->isUARTError()) {
    1b0c:	6920      	ldr	r0, [r4, #16]
    1b0e:	f7ff fe7f 	bl	1810 <_ZN6SERCOM11isUARTErrorEv>
    1b12:	2800      	cmp	r0, #0
    1b14:	d005      	beq.n	1b22 <_ZN4Uart10IrqHandlerEv+0x7e>
    sercom->acknowledgeUARTError();
    1b16:	6920      	ldr	r0, [r4, #16]
    1b18:	f7ff fe7e 	bl	1818 <_ZN6SERCOM20acknowledgeUARTErrorEv>
    sercom->clearStatusUART();
    1b1c:	6920      	ldr	r0, [r4, #16]
    1b1e:	f7ff fe6e 	bl	17fe <_ZN6SERCOM15clearStatusUARTEv>
}
    1b22:	bd70      	pop	{r4, r5, r6, pc}
      sercom->disableDataRegisterEmptyInterruptUART();
    1b24:	6920      	ldr	r0, [r4, #16]
    1b26:	f7ff fe95 	bl	1854 <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
    1b2a:	e7ef      	b.n	1b0c <_ZN4Uart10IrqHandlerEv+0x68>

00001b2c <_ZN4Uart16extractNbStopBitEt>:

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
    1b2c:	20f0      	movs	r0, #240	; 0xf0
    1b2e:	4001      	ands	r1, r0
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    1b30:	3930      	subs	r1, #48	; 0x30
    1b32:	4248      	negs	r0, r1
    1b34:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
    1b36:	4770      	bx	lr

00001b38 <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    1b38:	23f0      	movs	r3, #240	; 0xf0
    1b3a:	011b      	lsls	r3, r3, #4
    1b3c:	4019      	ands	r1, r3
    1b3e:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    1b40:	2006      	movs	r0, #6
  switch(config & HARDSER_DATA_MASK)
    1b42:	009b      	lsls	r3, r3, #2
    1b44:	4299      	cmp	r1, r3
    1b46:	d00a      	beq.n	1b5e <_ZN4Uart15extractCharSizeEt+0x26>
    1b48:	3301      	adds	r3, #1
    1b4a:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    1b4c:	3001      	adds	r0, #1
  switch(config & HARDSER_DATA_MASK)
    1b4e:	4299      	cmp	r1, r3
    1b50:	d005      	beq.n	1b5e <_ZN4Uart15extractCharSizeEt+0x26>
    1b52:	2380      	movs	r3, #128	; 0x80
      return UART_CHAR_SIZE_5_BITS;
    1b54:	3802      	subs	r0, #2
  switch(config & HARDSER_DATA_MASK)
    1b56:	005b      	lsls	r3, r3, #1
    1b58:	4299      	cmp	r1, r3
    1b5a:	d000      	beq.n	1b5e <_ZN4Uart15extractCharSizeEt+0x26>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    1b5c:	2000      	movs	r0, #0

  }
}
    1b5e:	4770      	bx	lr

00001b60 <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    1b60:	200f      	movs	r0, #15
    1b62:	4001      	ands	r1, r0
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    1b64:	2000      	movs	r0, #0
  switch(config & HARDSER_PARITY_MASK)
    1b66:	2901      	cmp	r1, #1
    1b68:	d003      	beq.n	1b72 <_ZN4Uart13extractParityEt+0x12>
      return SERCOM_NO_PARITY;
    1b6a:	3902      	subs	r1, #2
    1b6c:	1e48      	subs	r0, r1, #1
    1b6e:	4181      	sbcs	r1, r0
    1b70:	1c48      	adds	r0, r1, #1

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
    1b72:	4770      	bx	lr

00001b74 <_ZN4Uart5beginEmt>:
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1b74:	0003      	movs	r3, r0
{
    1b76:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1b78:	2618      	movs	r6, #24
{
    1b7a:	b085      	sub	sp, #20
    1b7c:	9103      	str	r1, [sp, #12]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1b7e:	33a4      	adds	r3, #164	; 0xa4
{
    1b80:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1b82:	7818      	ldrb	r0, [r3, #0]
    1b84:	0033      	movs	r3, r6
    1b86:	2108      	movs	r1, #8
    1b88:	4343      	muls	r3, r0
    1b8a:	4d33      	ldr	r5, [pc, #204]	; (1c58 <_ZN4Uart5beginEmt+0xe4>)
{
    1b8c:	0017      	movs	r7, r2
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1b8e:	18eb      	adds	r3, r5, r3
    1b90:	5659      	ldrsb	r1, [r3, r1]
    1b92:	f7ff fd31 	bl	15f8 <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    1b96:	0023      	movs	r3, r4
    1b98:	33a5      	adds	r3, #165	; 0xa5
    1b9a:	7818      	ldrb	r0, [r3, #0]
    1b9c:	0033      	movs	r3, r6
    1b9e:	2108      	movs	r1, #8
    1ba0:	4343      	muls	r3, r0
    1ba2:	18eb      	adds	r3, r5, r3
    1ba4:	5659      	ldrsb	r1, [r3, r1]
    1ba6:	f7ff fd27 	bl	15f8 <pinPeripheral>
  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
    1baa:	0023      	movs	r3, r4
    1bac:	33a7      	adds	r3, #167	; 0xa7
    1bae:	781b      	ldrb	r3, [r3, #0]
    1bb0:	2b02      	cmp	r3, #2
    1bb2:	d10a      	bne.n	1bca <_ZN4Uart5beginEmt+0x56>
    if (uc_pinCTS != NO_CTS_PIN) {
    1bb4:	0023      	movs	r3, r4
    1bb6:	33b8      	adds	r3, #184	; 0xb8
    1bb8:	7818      	ldrb	r0, [r3, #0]
    1bba:	28ff      	cmp	r0, #255	; 0xff
    1bbc:	d005      	beq.n	1bca <_ZN4Uart5beginEmt+0x56>
      pinPeripheral(uc_pinCTS, g_APinDescription[uc_pinCTS].ulPinType);
    1bbe:	2108      	movs	r1, #8
    1bc0:	4346      	muls	r6, r0
    1bc2:	19ae      	adds	r6, r5, r6
    1bc4:	5671      	ldrsb	r1, [r6, r1]
    1bc6:	f7ff fd17 	bl	15f8 <pinPeripheral>
  if (uc_pinRTS != NO_RTS_PIN) {
    1bca:	0026      	movs	r6, r4
    1bcc:	36a8      	adds	r6, #168	; 0xa8
    1bce:	7830      	ldrb	r0, [r6, #0]
    1bd0:	28ff      	cmp	r0, #255	; 0xff
    1bd2:	d019      	beq.n	1c08 <_ZN4Uart5beginEmt+0x94>
    pinMode(uc_pinRTS, OUTPUT);
    1bd4:	2101      	movs	r1, #1
    1bd6:	f7ff fc97 	bl	1508 <pinMode>
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    1bda:	2218      	movs	r2, #24
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    1bdc:	0021      	movs	r1, r4
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    1bde:	7833      	ldrb	r3, [r6, #0]
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    1be0:	481e      	ldr	r0, [pc, #120]	; (1c5c <_ZN4Uart5beginEmt+0xe8>)
    EPortType rtsPort = g_APinDescription[uc_pinRTS].ulPort;
    1be2:	435a      	muls	r2, r3
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    1be4:	56ab      	ldrsb	r3, [r5, r2]
    1be6:	31ac      	adds	r1, #172	; 0xac
    1be8:	01db      	lsls	r3, r3, #7
    1bea:	1818      	adds	r0, r3, r0
    1bec:	6008      	str	r0, [r1, #0]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    1bee:	491c      	ldr	r1, [pc, #112]	; (1c60 <_ZN4Uart5beginEmt+0xec>)
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    1bf0:	18ad      	adds	r5, r5, r2
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    1bf2:	185b      	adds	r3, r3, r1
    1bf4:	0021      	movs	r1, r4
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    1bf6:	2201      	movs	r2, #1
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    1bf8:	31b0      	adds	r1, #176	; 0xb0
    1bfa:	600b      	str	r3, [r1, #0]
    ul_pinMaskRTS = (1ul << g_APinDescription[uc_pinRTS].ulPin);
    1bfc:	6869      	ldr	r1, [r5, #4]
    1bfe:	408a      	lsls	r2, r1
    1c00:	0021      	movs	r1, r4
    1c02:	31b4      	adds	r1, #180	; 0xb4
    1c04:	600a      	str	r2, [r1, #0]
    *pul_outclrRTS = ul_pinMaskRTS;
    1c06:	601a      	str	r2, [r3, #0]
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    1c08:	2201      	movs	r2, #1
    1c0a:	9b03      	ldr	r3, [sp, #12]
    1c0c:	0011      	movs	r1, r2
    1c0e:	6920      	ldr	r0, [r4, #16]
    1c10:	f7ff fe78 	bl	1904 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    1c14:	0039      	movs	r1, r7
    1c16:	0020      	movs	r0, r4
    1c18:	f7ff ff8e 	bl	1b38 <_ZN4Uart15extractCharSizeEt>
    1c1c:	0039      	movs	r1, r7
    1c1e:	0005      	movs	r5, r0
    1c20:	0020      	movs	r0, r4
    1c22:	f7ff ff9d 	bl	1b60 <_ZN4Uart13extractParityEt>
    1c26:	0039      	movs	r1, r7
    1c28:	0006      	movs	r6, r0
    1c2a:	0020      	movs	r0, r4
    1c2c:	f7ff ff7e 	bl	1b2c <_ZN4Uart16extractNbStopBitEt>
    1c30:	0033      	movs	r3, r6
    1c32:	9000      	str	r0, [sp, #0]
    1c34:	0029      	movs	r1, r5
    1c36:	6920      	ldr	r0, [r4, #16]
    1c38:	2201      	movs	r2, #1
    1c3a:	f7ff fd97 	bl	176c <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    1c3e:	0023      	movs	r3, r4
    1c40:	33a6      	adds	r3, #166	; 0xa6
    1c42:	781a      	ldrb	r2, [r3, #0]
    1c44:	7859      	ldrb	r1, [r3, #1]
    1c46:	6920      	ldr	r0, [r4, #16]
    1c48:	f7ff fdaa 	bl	17a0 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
    1c4c:	6920      	ldr	r0, [r4, #16]
    1c4e:	f7ff fdc5 	bl	17dc <_ZN6SERCOM10enableUARTEv>
}
    1c52:	b005      	add	sp, #20
    1c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c56:	46c0      	nop			; (mov r8, r8)
    1c58:	00002238 	.word	0x00002238
    1c5c:	41004418 	.word	0x41004418
    1c60:	41004414 	.word	0x41004414

00001c64 <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
    1c64:	203f      	movs	r0, #63	; 0x3f
    1c66:	4770      	bx	lr

00001c68 <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
    1c68:	b513      	push	{r0, r1, r4, lr}
    1c6a:	466b      	mov	r3, sp
	return write(&c, 1);
    1c6c:	6802      	ldr	r2, [r0, #0]
size_t Serial_::write(uint8_t c) {
    1c6e:	71d9      	strb	r1, [r3, #7]
    1c70:	3307      	adds	r3, #7
	return write(&c, 1);
    1c72:	6854      	ldr	r4, [r2, #4]
    1c74:	0019      	movs	r1, r3
    1c76:	2201      	movs	r2, #1
    1c78:	47a0      	blx	r4
}
    1c7a:	bd16      	pop	{r1, r2, r4, pc}

00001c7c <_ZN7Serial_9availableEv>:
{
    1c7c:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT);
    1c7e:	2102      	movs	r1, #2
    1c80:	6900      	ldr	r0, [r0, #16]
    1c82:	f7fe ff87 	bl	b94 <_ZN14USBDeviceClass9availableEm>
}
    1c86:	bd10      	pop	{r4, pc}

00001c88 <_ZN7Serial_5flushEv>:
{
    1c88:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
    1c8a:	2103      	movs	r1, #3
    1c8c:	6900      	ldr	r0, [r0, #16]
    1c8e:	f7fe ff97 	bl	bc0 <_ZN14USBDeviceClass5flushEm>
}
    1c92:	bd10      	pop	{r4, pc}

00001c94 <_ZN7Serial_5writeEPKhj>:
{
    1c94:	b510      	push	{r4, lr}
    1c96:	0013      	movs	r3, r2
    1c98:	0004      	movs	r4, r0
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    1c9a:	000a      	movs	r2, r1
    1c9c:	6900      	ldr	r0, [r0, #16]
    1c9e:	2103      	movs	r1, #3
    1ca0:	f7ff f888 	bl	db4 <_ZN14USBDeviceClass4sendEmPKvm>
	if (r > 0) {
    1ca4:	2800      	cmp	r0, #0
    1ca6:	d101      	bne.n	1cac <_ZN7Serial_5writeEPKhj+0x18>
    void setWriteError(int err = 1) { write_error = err; }
    1ca8:	2301      	movs	r3, #1
    1caa:	6063      	str	r3, [r4, #4]
}
    1cac:	bd10      	pop	{r4, pc}
	...

00001cb0 <_ZN7Serial_4peekEv>:
{
    1cb0:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
    1cb2:	4c05      	ldr	r4, [pc, #20]	; (1cc8 <_ZN7Serial_4peekEv+0x18>)
    1cb4:	6823      	ldr	r3, [r4, #0]
    1cb6:	1c5a      	adds	r2, r3, #1
    1cb8:	d104      	bne.n	1cc4 <_ZN7Serial_4peekEv+0x14>
	_serialPeek = read();
    1cba:	6803      	ldr	r3, [r0, #0]
    1cbc:	695b      	ldr	r3, [r3, #20]
    1cbe:	4798      	blx	r3
    1cc0:	0003      	movs	r3, r0
    1cc2:	6020      	str	r0, [r4, #0]
}
    1cc4:	0018      	movs	r0, r3
    1cc6:	bd10      	pop	{r4, pc}
    1cc8:	20000080 	.word	0x20000080

00001ccc <_ZN7Serial_4readEv>:
	if (_serialPeek != -1) {
    1ccc:	4b07      	ldr	r3, [pc, #28]	; (1cec <_ZN7Serial_4readEv+0x20>)
{
    1cce:	0002      	movs	r2, r0
	if (_serialPeek != -1) {
    1cd0:	6818      	ldr	r0, [r3, #0]
{
    1cd2:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
    1cd4:	1c41      	adds	r1, r0, #1
    1cd6:	d003      	beq.n	1ce0 <_ZN7Serial_4readEv+0x14>
		_serialPeek = -1;
    1cd8:	2201      	movs	r2, #1
    1cda:	4252      	negs	r2, r2
    1cdc:	601a      	str	r2, [r3, #0]
}
    1cde:	bd10      	pop	{r4, pc}
	return usb.recv(CDC_ENDPOINT_OUT);
    1ce0:	2102      	movs	r1, #2
    1ce2:	6910      	ldr	r0, [r2, #16]
    1ce4:	f7ff f858 	bl	d98 <_ZN14USBDeviceClass4recvEm>
    1ce8:	e7f9      	b.n	1cde <_ZN7Serial_4readEv+0x12>
    1cea:	46c0      	nop			; (mov r8, r8)
    1cec:	20000080 	.word	0x20000080

00001cf0 <_Z16CDC_GetInterfacePh>:
{
    1cf0:	b510      	push	{r4, lr}
	interfaceNum[0] += 2;	// uses 2
    1cf2:	7803      	ldrb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    1cf4:	2242      	movs	r2, #66	; 0x42
	interfaceNum[0] += 2;	// uses 2
    1cf6:	3302      	adds	r3, #2
    1cf8:	7003      	strb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    1cfa:	4902      	ldr	r1, [pc, #8]	; (1d04 <_Z16CDC_GetInterfacePh+0x14>)
    1cfc:	4802      	ldr	r0, [pc, #8]	; (1d08 <_Z16CDC_GetInterfacePh+0x18>)
    1cfe:	f7ff f905 	bl	f0c <_ZN14USBDeviceClass11sendControlEPKvm>
}
    1d02:	bd10      	pop	{r4, pc}
    1d04:	2000003c 	.word	0x2000003c
    1d08:	20000124 	.word	0x20000124

00001d0c <_Z9CDC_SetupR8USBSetup>:
{
    1d0c:	b510      	push	{r4, lr}
	uint8_t requestType = setup.bmRequestType;
    1d0e:	7801      	ldrb	r1, [r0, #0]
{
    1d10:	0003      	movs	r3, r0
	uint8_t r = setup.bRequest;
    1d12:	7842      	ldrb	r2, [r0, #1]
	return false;
    1d14:	2000      	movs	r0, #0
	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
    1d16:	29a1      	cmp	r1, #161	; 0xa1
    1d18:	d108      	bne.n	1d2c <_Z9CDC_SetupR8USBSetup+0x20>
		if (r == CDC_GET_LINE_CODING)
    1d1a:	2a21      	cmp	r2, #33	; 0x21
    1d1c:	d105      	bne.n	1d2a <_Z9CDC_SetupR8USBSetup+0x1e>
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
    1d1e:	3a1a      	subs	r2, #26
    1d20:	4916      	ldr	r1, [pc, #88]	; (1d7c <_Z9CDC_SetupR8USBSetup+0x70>)
    1d22:	4817      	ldr	r0, [pc, #92]	; (1d80 <_Z9CDC_SetupR8USBSetup+0x74>)
    1d24:	f7ff f8f2 	bl	f0c <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
    1d28:	2001      	movs	r0, #1
}
    1d2a:	bd10      	pop	{r4, pc}
	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
    1d2c:	2921      	cmp	r1, #33	; 0x21
    1d2e:	d1fc      	bne.n	1d2a <_Z9CDC_SetupR8USBSetup+0x1e>
		if (r == CDC_SET_LINE_CODING)
    1d30:	2a20      	cmp	r2, #32
    1d32:	d111      	bne.n	1d58 <_Z9CDC_SetupR8USBSetup+0x4c>
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
    1d34:	3a19      	subs	r2, #25
    1d36:	4911      	ldr	r1, [pc, #68]	; (1d7c <_Z9CDC_SetupR8USBSetup+0x70>)
    1d38:	4811      	ldr	r0, [pc, #68]	; (1d80 <_Z9CDC_SetupR8USBSetup+0x74>)
    1d3a:	f7fe ff85 	bl	c48 <_ZN14USBDeviceClass11recvControlEPvm>
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
    1d3e:	2296      	movs	r2, #150	; 0x96
    1d40:	4b0e      	ldr	r3, [pc, #56]	; (1d7c <_Z9CDC_SetupR8USBSetup+0x70>)
    1d42:	00d2      	lsls	r2, r2, #3
    1d44:	6819      	ldr	r1, [r3, #0]
    1d46:	4291      	cmp	r1, r2
    1d48:	d103      	bne.n	1d52 <_Z9CDC_SetupR8USBSetup+0x46>
    1d4a:	2401      	movs	r4, #1
    1d4c:	79d8      	ldrb	r0, [r3, #7]
    1d4e:	4004      	ands	r4, r0
    1d50:	d00e      	beq.n	1d70 <_Z9CDC_SetupR8USBSetup+0x64>
				cancelReset();
    1d52:	f7fe fa95 	bl	280 <cancelReset>
    1d56:	e00e      	b.n	1d76 <_Z9CDC_SetupR8USBSetup+0x6a>
		if (r == CDC_SET_CONTROL_LINE_STATE)
    1d58:	2a22      	cmp	r2, #34	; 0x22
    1d5a:	d103      	bne.n	1d64 <_Z9CDC_SetupR8USBSetup+0x58>
			_usbLineInfo.lineState = setup.wValueL;
    1d5c:	789a      	ldrb	r2, [r3, #2]
    1d5e:	4b07      	ldr	r3, [pc, #28]	; (1d7c <_Z9CDC_SetupR8USBSetup+0x70>)
    1d60:	71da      	strb	r2, [r3, #7]
    1d62:	e7ec      	b.n	1d3e <_Z9CDC_SetupR8USBSetup+0x32>
		if (CDC_SEND_BREAK == r)
    1d64:	2a23      	cmp	r2, #35	; 0x23
    1d66:	d1e0      	bne.n	1d2a <_Z9CDC_SetupR8USBSetup+0x1e>
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    1d68:	885a      	ldrh	r2, [r3, #2]
    1d6a:	4b06      	ldr	r3, [pc, #24]	; (1d84 <_Z9CDC_SetupR8USBSetup+0x78>)
    1d6c:	601a      	str	r2, [r3, #0]
			return false;
    1d6e:	e7dc      	b.n	1d2a <_Z9CDC_SetupR8USBSetup+0x1e>
				initiateReset(250);
    1d70:	20fa      	movs	r0, #250	; 0xfa
    1d72:	f7fe fa7f 	bl	274 <initiateReset>
			return false;
    1d76:	2000      	movs	r0, #0
    1d78:	e7d7      	b.n	1d2a <_Z9CDC_SetupR8USBSetup+0x1e>
    1d7a:	46c0      	nop			; (mov r8, r8)
    1d7c:	20000034 	.word	0x20000034
    1d80:	20000124 	.word	0x20000124
    1d84:	20000030 	.word	0x20000030

00001d88 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
    1d88:	22fa      	movs	r2, #250	; 0xfa
    Print() : write_error(0) {}
    1d8a:	2100      	movs	r1, #0
    1d8c:	4b05      	ldr	r3, [pc, #20]	; (1da4 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x1c>)
    1d8e:	0092      	lsls	r2, r2, #2
    1d90:	609a      	str	r2, [r3, #8]
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
    1d92:	4a05      	ldr	r2, [pc, #20]	; (1da8 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x20>)
    1d94:	6059      	str	r1, [r3, #4]
    1d96:	3208      	adds	r2, #8
    1d98:	601a      	str	r2, [r3, #0]
    1d9a:	4a04      	ldr	r2, [pc, #16]	; (1dac <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x24>)
    1d9c:	7619      	strb	r1, [r3, #24]
    1d9e:	611a      	str	r2, [r3, #16]

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ SerialUSB(USBDevice);
    1da0:	4770      	bx	lr
    1da2:	46c0      	nop			; (mov r8, r8)
    1da4:	20000870 	.word	0x20000870
    1da8:	0000268c 	.word	0x0000268c
    1dac:	20000124 	.word	0x20000124

00001db0 <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    1db0:	b570      	push	{r4, r5, r6, lr}
    1db2:	000e      	movs	r6, r1
	int sent = 0;
    1db4:	2500      	movs	r5, #0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1db6:	6844      	ldr	r4, [r0, #4]
    1db8:	2c00      	cmp	r4, #0
    1dba:	d00b      	beq.n	1dd4 <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
		int res = node->getInterface(interfaceCount);
    1dbc:	6823      	ldr	r3, [r4, #0]
    1dbe:	0031      	movs	r1, r6
    1dc0:	685b      	ldr	r3, [r3, #4]
    1dc2:	0020      	movs	r0, r4
    1dc4:	4798      	blx	r3
		if (res < 0)
    1dc6:	2800      	cmp	r0, #0
    1dc8:	db02      	blt.n	1dd0 <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
			return -1;
		sent += res;
    1dca:	182d      	adds	r5, r5, r0
	for (node = rootNode; node; node = node->next) {
    1dcc:	68e4      	ldr	r4, [r4, #12]
    1dce:	e7f3      	b.n	1db8 <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
			return -1;
    1dd0:	2501      	movs	r5, #1
    1dd2:	426d      	negs	r5, r5
	}
	return sent;
}
    1dd4:	0028      	movs	r0, r5
    1dd6:	bd70      	pop	{r4, r5, r6, pc}

00001dd8 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    1dd8:	b570      	push	{r4, r5, r6, lr}
    1dda:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1ddc:	6844      	ldr	r4, [r0, #4]
    1dde:	2c00      	cmp	r4, #0
    1de0:	d008      	beq.n	1df4 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
		int ret = node->getDescriptor(setup);
    1de2:	6823      	ldr	r3, [r4, #0]
    1de4:	0029      	movs	r1, r5
    1de6:	689b      	ldr	r3, [r3, #8]
    1de8:	0020      	movs	r0, r4
    1dea:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
    1dec:	2800      	cmp	r0, #0
    1dee:	d102      	bne.n	1df6 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    1df0:	68e4      	ldr	r4, [r4, #12]
    1df2:	e7f4      	b.n	1dde <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
			return ret;
	}
	return 0;
    1df4:	0020      	movs	r0, r4
}
    1df6:	bd70      	pop	{r4, r5, r6, pc}

00001df8 <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    1df8:	b570      	push	{r4, r5, r6, lr}
    1dfa:	000d      	movs	r5, r1
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    1dfc:	6844      	ldr	r4, [r0, #4]
    1dfe:	2c00      	cmp	r4, #0
    1e00:	d007      	beq.n	1e12 <_ZN13PluggableUSB_12getShortNameEPc+0x1a>
               iSerialNum += node->getShortName(iSerialNum);
    1e02:	6823      	ldr	r3, [r4, #0]
    1e04:	0029      	movs	r1, r5
    1e06:	0020      	movs	r0, r4
    1e08:	68db      	ldr	r3, [r3, #12]
    1e0a:	4798      	blx	r3
       for (node = rootNode; node; node = node->next) {
    1e0c:	68e4      	ldr	r4, [r4, #12]
               iSerialNum += node->getShortName(iSerialNum);
    1e0e:	182d      	adds	r5, r5, r0
       for (node = rootNode; node; node = node->next) {
    1e10:	e7f5      	b.n	1dfe <_ZN13PluggableUSB_12getShortNameEPc+0x6>
       }
       *iSerialNum = 0;
    1e12:	702c      	strb	r4, [r5, #0]
}
    1e14:	bd70      	pop	{r4, r5, r6, pc}

00001e16 <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    1e16:	b570      	push	{r4, r5, r6, lr}
    1e18:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1e1a:	6844      	ldr	r4, [r0, #4]
    1e1c:	2c00      	cmp	r4, #0
    1e1e:	d008      	beq.n	1e32 <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
		if (node->setup(setup)) {
    1e20:	6823      	ldr	r3, [r4, #0]
    1e22:	0029      	movs	r1, r5
    1e24:	681b      	ldr	r3, [r3, #0]
    1e26:	0020      	movs	r0, r4
    1e28:	4798      	blx	r3
    1e2a:	2800      	cmp	r0, #0
    1e2c:	d102      	bne.n	1e34 <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    1e2e:	68e4      	ldr	r4, [r4, #12]
    1e30:	e7f4      	b.n	1e1c <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
			return true;
		}
	}
	return false;
    1e32:	0020      	movs	r0, r4
}
    1e34:	bd70      	pop	{r4, r5, r6, pc}
	...

00001e38 <_Z12PluggableUSBv>:
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    1e38:	2101      	movs	r1, #1
    1e3a:	4a06      	ldr	r2, [pc, #24]	; (1e54 <_Z12PluggableUSBv+0x1c>)
{
    1e3c:	b510      	push	{r4, lr}
	static PluggableUSB_ obj;
    1e3e:	6813      	ldr	r3, [r2, #0]
    1e40:	4805      	ldr	r0, [pc, #20]	; (1e58 <_Z12PluggableUSBv+0x20>)
    1e42:	400b      	ands	r3, r1
    1e44:	d105      	bne.n	1e52 <_Z12PluggableUSBv+0x1a>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    1e46:	2402      	movs	r4, #2
    1e48:	7004      	strb	r4, [r0, #0]
    1e4a:	1924      	adds	r4, r4, r4
    1e4c:	7044      	strb	r4, [r0, #1]
    1e4e:	6043      	str	r3, [r0, #4]
	static PluggableUSB_ obj;
    1e50:	6011      	str	r1, [r2, #0]
}
    1e52:	bd10      	pop	{r4, pc}
    1e54:	2000088c 	.word	0x2000088c
    1e58:	20000890 	.word	0x20000890

00001e5c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    1e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1e5e:	0006      	movs	r6, r0
    1e60:	000d      	movs	r5, r1
    1e62:	000c      	movs	r4, r1
    1e64:	188b      	adds	r3, r1, r2
    1e66:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
    1e68:	9b01      	ldr	r3, [sp, #4]
    1e6a:	1b67      	subs	r7, r4, r5
    1e6c:	429c      	cmp	r4, r3
    1e6e:	d007      	beq.n	1e80 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    1e70:	6833      	ldr	r3, [r6, #0]
    1e72:	7821      	ldrb	r1, [r4, #0]
    1e74:	681b      	ldr	r3, [r3, #0]
    1e76:	0030      	movs	r0, r6
    1e78:	4798      	blx	r3
    1e7a:	3401      	adds	r4, #1
    1e7c:	2800      	cmp	r0, #0
    1e7e:	d1f3      	bne.n	1e68 <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
    1e80:	0038      	movs	r0, r7
    1e82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00001e84 <_ZN10RingBufferC1Ev>:
*/

#include "RingBuffer.h"
#include <string.h>

RingBuffer::RingBuffer( void )
    1e84:	b510      	push	{r4, lr}
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    1e86:	2240      	movs	r2, #64	; 0x40
    1e88:	2100      	movs	r1, #0
RingBuffer::RingBuffer( void )
    1e8a:	0004      	movs	r4, r0
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    1e8c:	f000 f913 	bl	20b6 <memset>
  }
}

void RingBuffer::clear()
{
	_iHead = 0;
    1e90:	2300      	movs	r3, #0
}
    1e92:	0020      	movs	r0, r4
	_iHead = 0;
    1e94:	6423      	str	r3, [r4, #64]	; 0x40
	_iTail = 0;
    1e96:	6463      	str	r3, [r4, #68]	; 0x44
}
    1e98:	bd10      	pop	{r4, pc}

00001e9a <_ZN10RingBuffer10store_charEh>:
{
    1e9a:	b510      	push	{r4, lr}
	return _aucBuffer[_iTail];
}

int RingBuffer::nextIndex(int index)
{
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    1e9c:	243f      	movs	r4, #63	; 0x3f
  int i = nextIndex(_iHead);
    1e9e:	6c02      	ldr	r2, [r0, #64]	; 0x40
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    1ea0:	1c53      	adds	r3, r2, #1
    1ea2:	4023      	ands	r3, r4
  if ( i != _iTail )
    1ea4:	6c44      	ldr	r4, [r0, #68]	; 0x44
    1ea6:	429c      	cmp	r4, r3
    1ea8:	d001      	beq.n	1eae <_ZN10RingBuffer10store_charEh+0x14>
    _aucBuffer[_iHead] = c ;
    1eaa:	5481      	strb	r1, [r0, r2]
    _iHead = i ;
    1eac:	6403      	str	r3, [r0, #64]	; 0x40
}
    1eae:	bd10      	pop	{r4, pc}

00001eb0 <_ZN10RingBuffer5clearEv>:
	_iHead = 0;
    1eb0:	2300      	movs	r3, #0
    1eb2:	6403      	str	r3, [r0, #64]	; 0x40
	_iTail = 0;
    1eb4:	6443      	str	r3, [r0, #68]	; 0x44
}
    1eb6:	4770      	bx	lr

00001eb8 <_ZN10RingBuffer9read_charEv>:
	if(_iTail == _iHead)
    1eb8:	6c43      	ldr	r3, [r0, #68]	; 0x44
    1eba:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1ebc:	4293      	cmp	r3, r2
    1ebe:	d006      	beq.n	1ece <_ZN10RingBuffer9read_charEv+0x16>
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    1ec0:	213f      	movs	r1, #63	; 0x3f
	uint8_t value = _aucBuffer[_iTail];
    1ec2:	5cc2      	ldrb	r2, [r0, r3]
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    1ec4:	3301      	adds	r3, #1
    1ec6:	400b      	ands	r3, r1
	_iTail = nextIndex(_iTail);
    1ec8:	6443      	str	r3, [r0, #68]	; 0x44
	return value;
    1eca:	0010      	movs	r0, r2
}
    1ecc:	4770      	bx	lr
		return -1;
    1ece:	2001      	movs	r0, #1
    1ed0:	4240      	negs	r0, r0
    1ed2:	e7fb      	b.n	1ecc <_ZN10RingBuffer9read_charEv+0x14>

00001ed4 <_ZN10RingBuffer9availableEv>:
	int delta = _iHead - _iTail;
    1ed4:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1ed6:	6c40      	ldr	r0, [r0, #68]	; 0x44
    1ed8:	1a18      	subs	r0, r3, r0
	if(delta < 0)
    1eda:	d500      	bpl.n	1ede <_ZN10RingBuffer9availableEv+0xa>
		return SERIAL_BUFFER_SIZE + delta;
    1edc:	3040      	adds	r0, #64	; 0x40
}
    1ede:	4770      	bx	lr

00001ee0 <_ZN10RingBuffer17availableForStoreEv>:
	if (_iHead >= _iTail)
    1ee0:	6c03      	ldr	r3, [r0, #64]	; 0x40
    1ee2:	6c40      	ldr	r0, [r0, #68]	; 0x44
    1ee4:	4283      	cmp	r3, r0
    1ee6:	db02      	blt.n	1eee <_ZN10RingBuffer17availableForStoreEv+0xe>
		return SERIAL_BUFFER_SIZE - 1 - _iHead + _iTail;
    1ee8:	1ac0      	subs	r0, r0, r3
    1eea:	303f      	adds	r0, #63	; 0x3f
}
    1eec:	4770      	bx	lr
		return _iTail - _iHead - 1;
    1eee:	1ac0      	subs	r0, r0, r3
    1ef0:	3801      	subs	r0, #1
    1ef2:	e7fb      	b.n	1eec <_ZN10RingBuffer17availableForStoreEv+0xc>

00001ef4 <_ZN10RingBuffer4peekEv>:
	if(_iTail == _iHead)
    1ef4:	6c43      	ldr	r3, [r0, #68]	; 0x44
    1ef6:	6c02      	ldr	r2, [r0, #64]	; 0x40
    1ef8:	4293      	cmp	r3, r2
    1efa:	d001      	beq.n	1f00 <_ZN10RingBuffer4peekEv+0xc>
	return _aucBuffer[_iTail];
    1efc:	5cc0      	ldrb	r0, [r0, r3]
}
    1efe:	4770      	bx	lr
		return -1;
    1f00:	2001      	movs	r0, #1
    1f02:	4240      	negs	r0, r0
    1f04:	e7fb      	b.n	1efe <_ZN10RingBuffer4peekEv+0xa>

00001f06 <_ZN10RingBuffer6isFullEv>:
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    1f06:	223f      	movs	r2, #63	; 0x3f
    1f08:	6c03      	ldr	r3, [r0, #64]	; 0x40
}

bool RingBuffer::isFull()
{
	return (nextIndex(_iHead) == _iTail);
    1f0a:	6c40      	ldr	r0, [r0, #68]	; 0x44
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    1f0c:	3301      	adds	r3, #1
    1f0e:	4013      	ands	r3, r2
	return (nextIndex(_iHead) == _iTail);
    1f10:	1a18      	subs	r0, r3, r0
    1f12:	4242      	negs	r2, r0
    1f14:	4142      	adcs	r2, r0
    1f16:	b2d0      	uxtb	r0, r2
}
    1f18:	4770      	bx	lr
	...

00001f1c <__gnu_thumb1_case_uqi>:
    1f1c:	b402      	push	{r1}
    1f1e:	4671      	mov	r1, lr
    1f20:	0849      	lsrs	r1, r1, #1
    1f22:	0049      	lsls	r1, r1, #1
    1f24:	5c09      	ldrb	r1, [r1, r0]
    1f26:	0049      	lsls	r1, r1, #1
    1f28:	448e      	add	lr, r1
    1f2a:	bc02      	pop	{r1}
    1f2c:	4770      	bx	lr
    1f2e:	46c0      	nop			; (mov r8, r8)

00001f30 <__udivsi3>:
    1f30:	2200      	movs	r2, #0
    1f32:	0843      	lsrs	r3, r0, #1
    1f34:	428b      	cmp	r3, r1
    1f36:	d374      	bcc.n	2022 <__udivsi3+0xf2>
    1f38:	0903      	lsrs	r3, r0, #4
    1f3a:	428b      	cmp	r3, r1
    1f3c:	d35f      	bcc.n	1ffe <__udivsi3+0xce>
    1f3e:	0a03      	lsrs	r3, r0, #8
    1f40:	428b      	cmp	r3, r1
    1f42:	d344      	bcc.n	1fce <__udivsi3+0x9e>
    1f44:	0b03      	lsrs	r3, r0, #12
    1f46:	428b      	cmp	r3, r1
    1f48:	d328      	bcc.n	1f9c <__udivsi3+0x6c>
    1f4a:	0c03      	lsrs	r3, r0, #16
    1f4c:	428b      	cmp	r3, r1
    1f4e:	d30d      	bcc.n	1f6c <__udivsi3+0x3c>
    1f50:	22ff      	movs	r2, #255	; 0xff
    1f52:	0209      	lsls	r1, r1, #8
    1f54:	ba12      	rev	r2, r2
    1f56:	0c03      	lsrs	r3, r0, #16
    1f58:	428b      	cmp	r3, r1
    1f5a:	d302      	bcc.n	1f62 <__udivsi3+0x32>
    1f5c:	1212      	asrs	r2, r2, #8
    1f5e:	0209      	lsls	r1, r1, #8
    1f60:	d065      	beq.n	202e <__udivsi3+0xfe>
    1f62:	0b03      	lsrs	r3, r0, #12
    1f64:	428b      	cmp	r3, r1
    1f66:	d319      	bcc.n	1f9c <__udivsi3+0x6c>
    1f68:	e000      	b.n	1f6c <__udivsi3+0x3c>
    1f6a:	0a09      	lsrs	r1, r1, #8
    1f6c:	0bc3      	lsrs	r3, r0, #15
    1f6e:	428b      	cmp	r3, r1
    1f70:	d301      	bcc.n	1f76 <__udivsi3+0x46>
    1f72:	03cb      	lsls	r3, r1, #15
    1f74:	1ac0      	subs	r0, r0, r3
    1f76:	4152      	adcs	r2, r2
    1f78:	0b83      	lsrs	r3, r0, #14
    1f7a:	428b      	cmp	r3, r1
    1f7c:	d301      	bcc.n	1f82 <__udivsi3+0x52>
    1f7e:	038b      	lsls	r3, r1, #14
    1f80:	1ac0      	subs	r0, r0, r3
    1f82:	4152      	adcs	r2, r2
    1f84:	0b43      	lsrs	r3, r0, #13
    1f86:	428b      	cmp	r3, r1
    1f88:	d301      	bcc.n	1f8e <__udivsi3+0x5e>
    1f8a:	034b      	lsls	r3, r1, #13
    1f8c:	1ac0      	subs	r0, r0, r3
    1f8e:	4152      	adcs	r2, r2
    1f90:	0b03      	lsrs	r3, r0, #12
    1f92:	428b      	cmp	r3, r1
    1f94:	d301      	bcc.n	1f9a <__udivsi3+0x6a>
    1f96:	030b      	lsls	r3, r1, #12
    1f98:	1ac0      	subs	r0, r0, r3
    1f9a:	4152      	adcs	r2, r2
    1f9c:	0ac3      	lsrs	r3, r0, #11
    1f9e:	428b      	cmp	r3, r1
    1fa0:	d301      	bcc.n	1fa6 <__udivsi3+0x76>
    1fa2:	02cb      	lsls	r3, r1, #11
    1fa4:	1ac0      	subs	r0, r0, r3
    1fa6:	4152      	adcs	r2, r2
    1fa8:	0a83      	lsrs	r3, r0, #10
    1faa:	428b      	cmp	r3, r1
    1fac:	d301      	bcc.n	1fb2 <__udivsi3+0x82>
    1fae:	028b      	lsls	r3, r1, #10
    1fb0:	1ac0      	subs	r0, r0, r3
    1fb2:	4152      	adcs	r2, r2
    1fb4:	0a43      	lsrs	r3, r0, #9
    1fb6:	428b      	cmp	r3, r1
    1fb8:	d301      	bcc.n	1fbe <__udivsi3+0x8e>
    1fba:	024b      	lsls	r3, r1, #9
    1fbc:	1ac0      	subs	r0, r0, r3
    1fbe:	4152      	adcs	r2, r2
    1fc0:	0a03      	lsrs	r3, r0, #8
    1fc2:	428b      	cmp	r3, r1
    1fc4:	d301      	bcc.n	1fca <__udivsi3+0x9a>
    1fc6:	020b      	lsls	r3, r1, #8
    1fc8:	1ac0      	subs	r0, r0, r3
    1fca:	4152      	adcs	r2, r2
    1fcc:	d2cd      	bcs.n	1f6a <__udivsi3+0x3a>
    1fce:	09c3      	lsrs	r3, r0, #7
    1fd0:	428b      	cmp	r3, r1
    1fd2:	d301      	bcc.n	1fd8 <__udivsi3+0xa8>
    1fd4:	01cb      	lsls	r3, r1, #7
    1fd6:	1ac0      	subs	r0, r0, r3
    1fd8:	4152      	adcs	r2, r2
    1fda:	0983      	lsrs	r3, r0, #6
    1fdc:	428b      	cmp	r3, r1
    1fde:	d301      	bcc.n	1fe4 <__udivsi3+0xb4>
    1fe0:	018b      	lsls	r3, r1, #6
    1fe2:	1ac0      	subs	r0, r0, r3
    1fe4:	4152      	adcs	r2, r2
    1fe6:	0943      	lsrs	r3, r0, #5
    1fe8:	428b      	cmp	r3, r1
    1fea:	d301      	bcc.n	1ff0 <__udivsi3+0xc0>
    1fec:	014b      	lsls	r3, r1, #5
    1fee:	1ac0      	subs	r0, r0, r3
    1ff0:	4152      	adcs	r2, r2
    1ff2:	0903      	lsrs	r3, r0, #4
    1ff4:	428b      	cmp	r3, r1
    1ff6:	d301      	bcc.n	1ffc <__udivsi3+0xcc>
    1ff8:	010b      	lsls	r3, r1, #4
    1ffa:	1ac0      	subs	r0, r0, r3
    1ffc:	4152      	adcs	r2, r2
    1ffe:	08c3      	lsrs	r3, r0, #3
    2000:	428b      	cmp	r3, r1
    2002:	d301      	bcc.n	2008 <__udivsi3+0xd8>
    2004:	00cb      	lsls	r3, r1, #3
    2006:	1ac0      	subs	r0, r0, r3
    2008:	4152      	adcs	r2, r2
    200a:	0883      	lsrs	r3, r0, #2
    200c:	428b      	cmp	r3, r1
    200e:	d301      	bcc.n	2014 <__udivsi3+0xe4>
    2010:	008b      	lsls	r3, r1, #2
    2012:	1ac0      	subs	r0, r0, r3
    2014:	4152      	adcs	r2, r2
    2016:	0843      	lsrs	r3, r0, #1
    2018:	428b      	cmp	r3, r1
    201a:	d301      	bcc.n	2020 <__udivsi3+0xf0>
    201c:	004b      	lsls	r3, r1, #1
    201e:	1ac0      	subs	r0, r0, r3
    2020:	4152      	adcs	r2, r2
    2022:	1a41      	subs	r1, r0, r1
    2024:	d200      	bcs.n	2028 <__udivsi3+0xf8>
    2026:	4601      	mov	r1, r0
    2028:	4152      	adcs	r2, r2
    202a:	4610      	mov	r0, r2
    202c:	4770      	bx	lr
    202e:	e7ff      	b.n	2030 <__udivsi3+0x100>
    2030:	b501      	push	{r0, lr}
    2032:	2000      	movs	r0, #0
    2034:	f000 f806 	bl	2044 <__aeabi_idiv0>
    2038:	bd02      	pop	{r1, pc}
    203a:	46c0      	nop			; (mov r8, r8)

0000203c <__aeabi_uidivmod>:
    203c:	2900      	cmp	r1, #0
    203e:	d0f7      	beq.n	2030 <__udivsi3+0x100>
    2040:	e776      	b.n	1f30 <__udivsi3>
    2042:	4770      	bx	lr

00002044 <__aeabi_idiv0>:
    2044:	4770      	bx	lr
    2046:	46c0      	nop			; (mov r8, r8)

00002048 <__libc_init_array>:
    2048:	b570      	push	{r4, r5, r6, lr}
    204a:	2600      	movs	r6, #0
    204c:	4d0c      	ldr	r5, [pc, #48]	; (2080 <__libc_init_array+0x38>)
    204e:	4c0d      	ldr	r4, [pc, #52]	; (2084 <__libc_init_array+0x3c>)
    2050:	1b64      	subs	r4, r4, r5
    2052:	10a4      	asrs	r4, r4, #2
    2054:	42a6      	cmp	r6, r4
    2056:	d109      	bne.n	206c <__libc_init_array+0x24>
    2058:	2600      	movs	r6, #0
    205a:	f000 f8bd 	bl	21d8 <_init>
    205e:	4d0a      	ldr	r5, [pc, #40]	; (2088 <__libc_init_array+0x40>)
    2060:	4c0a      	ldr	r4, [pc, #40]	; (208c <__libc_init_array+0x44>)
    2062:	1b64      	subs	r4, r4, r5
    2064:	10a4      	asrs	r4, r4, #2
    2066:	42a6      	cmp	r6, r4
    2068:	d105      	bne.n	2076 <__libc_init_array+0x2e>
    206a:	bd70      	pop	{r4, r5, r6, pc}
    206c:	00b3      	lsls	r3, r6, #2
    206e:	58eb      	ldr	r3, [r5, r3]
    2070:	4798      	blx	r3
    2072:	3601      	adds	r6, #1
    2074:	e7ee      	b.n	2054 <__libc_init_array+0xc>
    2076:	00b3      	lsls	r3, r6, #2
    2078:	58eb      	ldr	r3, [r5, r3]
    207a:	4798      	blx	r3
    207c:	3601      	adds	r6, #1
    207e:	e7f2      	b.n	2066 <__libc_init_array+0x1e>
    2080:	200000e8 	.word	0x200000e8
    2084:	200000e8 	.word	0x200000e8
    2088:	200000e8 	.word	0x200000e8
    208c:	200000f8 	.word	0x200000f8

00002090 <malloc>:
    2090:	b510      	push	{r4, lr}
    2092:	4b03      	ldr	r3, [pc, #12]	; (20a0 <malloc+0x10>)
    2094:	0001      	movs	r1, r0
    2096:	6818      	ldr	r0, [r3, #0]
    2098:	f000 f816 	bl	20c8 <_malloc_r>
    209c:	bd10      	pop	{r4, pc}
    209e:	46c0      	nop			; (mov r8, r8)
    20a0:	20000084 	.word	0x20000084

000020a4 <memcpy>:
    20a4:	2300      	movs	r3, #0
    20a6:	b510      	push	{r4, lr}
    20a8:	429a      	cmp	r2, r3
    20aa:	d100      	bne.n	20ae <memcpy+0xa>
    20ac:	bd10      	pop	{r4, pc}
    20ae:	5ccc      	ldrb	r4, [r1, r3]
    20b0:	54c4      	strb	r4, [r0, r3]
    20b2:	3301      	adds	r3, #1
    20b4:	e7f8      	b.n	20a8 <memcpy+0x4>

000020b6 <memset>:
    20b6:	0003      	movs	r3, r0
    20b8:	1882      	adds	r2, r0, r2
    20ba:	4293      	cmp	r3, r2
    20bc:	d100      	bne.n	20c0 <memset+0xa>
    20be:	4770      	bx	lr
    20c0:	7019      	strb	r1, [r3, #0]
    20c2:	3301      	adds	r3, #1
    20c4:	e7f9      	b.n	20ba <memset+0x4>
	...

000020c8 <_malloc_r>:
    20c8:	2303      	movs	r3, #3
    20ca:	b570      	push	{r4, r5, r6, lr}
    20cc:	1ccd      	adds	r5, r1, #3
    20ce:	439d      	bics	r5, r3
    20d0:	3508      	adds	r5, #8
    20d2:	0006      	movs	r6, r0
    20d4:	2d0c      	cmp	r5, #12
    20d6:	d21e      	bcs.n	2116 <_malloc_r+0x4e>
    20d8:	250c      	movs	r5, #12
    20da:	42a9      	cmp	r1, r5
    20dc:	d81d      	bhi.n	211a <_malloc_r+0x52>
    20de:	0030      	movs	r0, r6
    20e0:	f000 f869 	bl	21b6 <__malloc_lock>
    20e4:	4a25      	ldr	r2, [pc, #148]	; (217c <_malloc_r+0xb4>)
    20e6:	6814      	ldr	r4, [r2, #0]
    20e8:	0021      	movs	r1, r4
    20ea:	2900      	cmp	r1, #0
    20ec:	d119      	bne.n	2122 <_malloc_r+0x5a>
    20ee:	4c24      	ldr	r4, [pc, #144]	; (2180 <_malloc_r+0xb8>)
    20f0:	6823      	ldr	r3, [r4, #0]
    20f2:	2b00      	cmp	r3, #0
    20f4:	d103      	bne.n	20fe <_malloc_r+0x36>
    20f6:	0030      	movs	r0, r6
    20f8:	f000 f844 	bl	2184 <_sbrk_r>
    20fc:	6020      	str	r0, [r4, #0]
    20fe:	0029      	movs	r1, r5
    2100:	0030      	movs	r0, r6
    2102:	f000 f83f 	bl	2184 <_sbrk_r>
    2106:	1c43      	adds	r3, r0, #1
    2108:	d12c      	bne.n	2164 <_malloc_r+0x9c>
    210a:	230c      	movs	r3, #12
    210c:	0030      	movs	r0, r6
    210e:	6033      	str	r3, [r6, #0]
    2110:	f000 f852 	bl	21b8 <__malloc_unlock>
    2114:	e003      	b.n	211e <_malloc_r+0x56>
    2116:	2d00      	cmp	r5, #0
    2118:	dadf      	bge.n	20da <_malloc_r+0x12>
    211a:	230c      	movs	r3, #12
    211c:	6033      	str	r3, [r6, #0]
    211e:	2000      	movs	r0, #0
    2120:	bd70      	pop	{r4, r5, r6, pc}
    2122:	680b      	ldr	r3, [r1, #0]
    2124:	1b5b      	subs	r3, r3, r5
    2126:	d41a      	bmi.n	215e <_malloc_r+0x96>
    2128:	2b0b      	cmp	r3, #11
    212a:	d903      	bls.n	2134 <_malloc_r+0x6c>
    212c:	600b      	str	r3, [r1, #0]
    212e:	18cc      	adds	r4, r1, r3
    2130:	6025      	str	r5, [r4, #0]
    2132:	e003      	b.n	213c <_malloc_r+0x74>
    2134:	428c      	cmp	r4, r1
    2136:	d10e      	bne.n	2156 <_malloc_r+0x8e>
    2138:	6863      	ldr	r3, [r4, #4]
    213a:	6013      	str	r3, [r2, #0]
    213c:	0030      	movs	r0, r6
    213e:	f000 f83b 	bl	21b8 <__malloc_unlock>
    2142:	0020      	movs	r0, r4
    2144:	2207      	movs	r2, #7
    2146:	300b      	adds	r0, #11
    2148:	1d23      	adds	r3, r4, #4
    214a:	4390      	bics	r0, r2
    214c:	1ac3      	subs	r3, r0, r3
    214e:	d0e7      	beq.n	2120 <_malloc_r+0x58>
    2150:	425a      	negs	r2, r3
    2152:	50e2      	str	r2, [r4, r3]
    2154:	e7e4      	b.n	2120 <_malloc_r+0x58>
    2156:	684b      	ldr	r3, [r1, #4]
    2158:	6063      	str	r3, [r4, #4]
    215a:	000c      	movs	r4, r1
    215c:	e7ee      	b.n	213c <_malloc_r+0x74>
    215e:	000c      	movs	r4, r1
    2160:	6849      	ldr	r1, [r1, #4]
    2162:	e7c2      	b.n	20ea <_malloc_r+0x22>
    2164:	2303      	movs	r3, #3
    2166:	1cc4      	adds	r4, r0, #3
    2168:	439c      	bics	r4, r3
    216a:	42a0      	cmp	r0, r4
    216c:	d0e0      	beq.n	2130 <_malloc_r+0x68>
    216e:	1a21      	subs	r1, r4, r0
    2170:	0030      	movs	r0, r6
    2172:	f000 f807 	bl	2184 <_sbrk_r>
    2176:	1c43      	adds	r3, r0, #1
    2178:	d1da      	bne.n	2130 <_malloc_r+0x68>
    217a:	e7c6      	b.n	210a <_malloc_r+0x42>
    217c:	20000898 	.word	0x20000898
    2180:	2000089c 	.word	0x2000089c

00002184 <_sbrk_r>:
    2184:	2300      	movs	r3, #0
    2186:	b570      	push	{r4, r5, r6, lr}
    2188:	4c06      	ldr	r4, [pc, #24]	; (21a4 <_sbrk_r+0x20>)
    218a:	0005      	movs	r5, r0
    218c:	0008      	movs	r0, r1
    218e:	6023      	str	r3, [r4, #0]
    2190:	f000 f814 	bl	21bc <_sbrk>
    2194:	1c43      	adds	r3, r0, #1
    2196:	d103      	bne.n	21a0 <_sbrk_r+0x1c>
    2198:	6823      	ldr	r3, [r4, #0]
    219a:	2b00      	cmp	r3, #0
    219c:	d000      	beq.n	21a0 <_sbrk_r+0x1c>
    219e:	602b      	str	r3, [r5, #0]
    21a0:	bd70      	pop	{r4, r5, r6, pc}
    21a2:	46c0      	nop			; (mov r8, r8)
    21a4:	200008a4 	.word	0x200008a4

000021a8 <strlen>:
    21a8:	2300      	movs	r3, #0
    21aa:	5cc2      	ldrb	r2, [r0, r3]
    21ac:	3301      	adds	r3, #1
    21ae:	2a00      	cmp	r2, #0
    21b0:	d1fb      	bne.n	21aa <strlen+0x2>
    21b2:	1e58      	subs	r0, r3, #1
    21b4:	4770      	bx	lr

000021b6 <__malloc_lock>:
    21b6:	4770      	bx	lr

000021b8 <__malloc_unlock>:
    21b8:	4770      	bx	lr
	...

000021bc <_sbrk>:
    21bc:	4a04      	ldr	r2, [pc, #16]	; (21d0 <_sbrk+0x14>)
    21be:	6813      	ldr	r3, [r2, #0]
    21c0:	2b00      	cmp	r3, #0
    21c2:	d003      	beq.n	21cc <_sbrk+0x10>
    21c4:	1818      	adds	r0, r3, r0
    21c6:	6010      	str	r0, [r2, #0]
    21c8:	0018      	movs	r0, r3
    21ca:	4770      	bx	lr
    21cc:	4b01      	ldr	r3, [pc, #4]	; (21d4 <_sbrk+0x18>)
    21ce:	e7f9      	b.n	21c4 <_sbrk+0x8>
    21d0:	200008a0 	.word	0x200008a0
    21d4:	200008a8 	.word	0x200008a8

000021d8 <_init>:
    21d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21da:	46c0      	nop			; (mov r8, r8)
    21dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    21de:	bc08      	pop	{r3}
    21e0:	469e      	mov	lr, r3
    21e2:	4770      	bx	lr

000021e4 <_fini>:
    21e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21e6:	46c0      	nop			; (mov r8, r8)
    21e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    21ea:	bc08      	pop	{r3}
    21ec:	469e      	mov	lr, r3
    21ee:	4770      	bx	lr
    21f0:	74736574 	.word	0x74736574
    21f4:	00000000 	.word	0x00000000

000021f8 <_ZTV26DoubleBufferedEPOutHandler>:
	...
    2200:	00000777 00000659 000005b5              w...Y.......

0000220c <_ZL14STRING_PRODUCT>:
    220c:	74616546 20726568 0000304d              Feather M0..

00002218 <_ZL15STRING_LANGUAGE>:
    2218:	04090304                                ....

0000221c <_ZL19STRING_MANUFACTURER>:
    221c:	66616441 74697572 00011200                       Adafruit.

00002225 <_ZL21USB_DeviceDescriptorB>:
    2225:	02000112 400102ef 800b239a 02010100     .......@.#......
    2235:	00000103                                         ...

00002238 <g_APinDescription>:
    2238:	00000000 0000000b 00000002 00000004     ................
    2248:	ffff00ff 000bffff 00000000 0000000a     ................
    2258:	00000002 00000004 ffff00ff 000affff     ................
    2268:	00000000 0000000e 00000008 00000004     ................
    2278:	ffff00ff 000effff 00000000 00000009     ................
    2288:	00000004 0000001c 000100ff 00090001     ................
    2298:	00000000 00000008 00000004 0000001c     ................
    22a8:	000000ff 00100000 00000000 0000000f     ................
    22b8:	00000004 0000001c 030100ff 000f0301     ................
    22c8:	00000000 00000014 00000005 0000002c     ............,...
    22d8:	000200ff 00040002 00000000 00000015     ................
    22e8:	00000005 0000002c 000300ff 00050003     ....,...........
    22f8:	00000000 00000006 00000004 0000001c     ................
    2308:	010000ff 00060100 00000000 00000007     ................
    2318:	00000004 0000001c 010100ff 00070101     ................
    2328:	00000000 00000012 00000004 0000001c     ................
    2338:	030000ff 00020300 00000000 00000010     ................
    2348:	00000004 0000001c 020000ff 00000200     ................
    2358:	00000000 00000013 00000005 0000002c     ............,...
    2368:	000300ff 00030003 00000000 00000011     ................
    2378:	00000004 0000001c 020100ff 00010201     ................
    2388:	00000000 00000002 00000001 00000002     ................
    2398:	ffff0000 0002ffff 00000001 00000008     ................
    23a8:	00000001 00000018 04000002 00080400     ................
    23b8:	00000001 00000009 00000001 00000018     ................
    23c8:	04010003 00090401 00000000 00000004     ................
    23d8:	00000001 00000000 ffff0004 0004ffff     ................
    23e8:	00000000 00000005 00000001 00000000     ................
    23f8:	ffff0005 0005ffff 00000001 00000002     ................
    2408:	00000001 00000000 ffff000a 0002ffff     ................
    2418:	00000000 00000016 00000002 00000004     ................
    2428:	ffff00ff 0006ffff 00000000 00000017     ................
    2438:	00000002 00000004 ffff00ff 0007ffff     ................
    2448:	00000000 0000000c 00000003 00000004     ................
    2458:	ffff00ff 000cffff 00000001 0000000a     ................
    2468:	00000003 00000004 ffff00ff 000affff     ................
    2478:	00000001 0000000b 00000003 00000004     ................
    2488:	ffff00ff 000bffff 00000001 00000003     ................
    2498:	0000000b 00000004 ffff00ff 00ffffff     ................
    24a8:	00000000 0000001b 0000000b 00000004     ................
    24b8:	ffff00ff 00ffffff 00000000 0000001c     ................
    24c8:	00000006 00000000 ffff00ff 00ffffff     ................
    24d8:	00000000 00000018 00000006 00000000     ................
    24e8:	ffff00ff 00ffffff 00000000 00000019     ................
    24f8:	00000006 00000000 ffff00ff 00ffffff     ................
    2508:	00000001 00000016 00000003 00000000     ................
    2518:	ffff00ff 00ffffff 00000001 00000017     ................
    2528:	00000003 00000000 ffff00ff 00ffffff     ................
    2538:	00000000 00000016 00000002 00000000     ................
    2548:	ffff00ff 00ffffff 00000000 00000017     ................
    2558:	00000002 00000000 ffff00ff 00ffffff     ................
    2568:	00000000 00000013 00000002 00000000     ................
    2578:	ffff00ff 00ffffff 00000000 00000010     ................
    2588:	00000002 00000000 ffff00ff 00ffffff     ................
    2598:	00000000 00000012 00000002 00000000     ................
    25a8:	ffff00ff 00ffffff 00000000 00000011     ................
    25b8:	00000002 00000000 ffff00ff 00ffffff     ................
    25c8:	00000000 0000000d 00000004 0000000c     ................
    25d8:	000100ff 000dffff 00000000 00000015     ................
    25e8:	00000005 0000000c 000300ff 00ffffff     ................
    25f8:	00000000 00000006 00000004 0000000c     ................
    2608:	010000ff 00ffffff 00000000 00000007     ................
    2618:	00000004 0000000c 010100ff 00ffffff     ................
    2628:	00000000 00000003 00000001 00000002     ................
    2638:	ffff00ff 00ffffff 00000000 00000002     ................
    2648:	00000001 00000002 ffff0014 0002ffff     ................

00002658 <_ZTV4Uart>:
	...
    2660:	00001a03 00001e5d 000019bb 000019a3     ....]...........
    2670:	00001999 000019c5 000019f9 0000196d     ............m...
    2680:	00001b75 0000197d 00001969              u...}...i...

0000268c <_ZTV7Serial_>:
	...
    2694:	00001c69 00001c95 00001c65 00001c89     i.......e.......
    26a4:	00001c7d 00001ccd 00001cb1              }...........

000026b0 <__EH_FRAME_BEGIN__>:
    26b0:	00000000                                ....
