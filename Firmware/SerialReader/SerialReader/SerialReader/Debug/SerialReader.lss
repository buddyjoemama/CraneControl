
SerialReader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002664  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000100  20000000  00002664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000007b8  20000100  00002764  00020100  2**2
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
  4 .comment      00000059  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
  5 .debug_info   00050702  00000000  00000000  00020181  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00005fd9  00000000  00000000  00070883  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000071c3  00000000  00000000  0007685c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000008b0  00000000  00000000  0007da1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00001008  00000000  00000000  0007e2cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001c1a0  00000000  00000000  0007f2d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000deca  00000000  00000000  0009b477  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0008293d  00000000  00000000  000a9341  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000016b8  00000000  00000000  0012bc80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:

void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
       0:	00 80 00 20 35 02 00 00 1d 02 00 00 1d 02 00 00     ... 5...........
	...
      2c:	1d 02 00 00 00 00 00 00 00 00 00 00 1d 02 00 00     ................
      3c:	89 02 00 00 1d 02 00 00 1d 02 00 00 1d 02 00 00     ................
      4c:	1d 02 00 00 1d 02 00 00 1d 02 00 00 1d 02 00 00     ................
      5c:	21 02 00 00 1d 02 00 00 dd 18 00 00 1d 02 00 00     !...............
      6c:	1d 02 00 00 1d 02 00 00 1d 02 00 00 ed 18 00 00     ................
      7c:	1d 02 00 00 1d 02 00 00 1d 02 00 00 1d 02 00 00     ................
      8c:	1d 02 00 00 00 00 00 00 1d 02 00 00 1d 02 00 00     ................
      9c:	1d 02 00 00 1d 02 00 00 1d 02 00 00 1d 02 00 00     ................
      ac:	1d 02 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000100 	.word	0x20000100
      d4:	00000000 	.word	0x00000000
      d8:	00002660 	.word	0x00002660

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000104 	.word	0x20000104
     108:	00002660 	.word	0x00002660
     10c:	200000fc 	.word	0x200000fc
     110:	00000000 	.word	0x00000000

00000114 <_Z5Shiftii>:
		}
	}
}

void Shift(int northChip, int southChip)
{
     114:	b570      	push	{r4, r5, r6, lr}
     116:	000d      	movs	r5, r1
     118:	0004      	movs	r4, r0
	digitalWrite(latchPin, LOW);
     11a:	2100      	movs	r1, #0
     11c:	200a      	movs	r0, #10
     11e:	f001 fb2f 	bl	1780 <digitalWrite>
	shiftOut(dataPin, clockPin, MSBFIRST, southChip);
     122:	002b      	movs	r3, r5
     124:	2201      	movs	r2, #1
     126:	210b      	movs	r1, #11
     128:	200c      	movs	r0, #12
     12a:	f001 fbb3 	bl	1894 <shiftOut>
	shiftOut(dataPin, clockPin, MSBFIRST, northChip);
     12e:	0023      	movs	r3, r4
     130:	2201      	movs	r2, #1
     132:	210b      	movs	r1, #11
     134:	200c      	movs	r0, #12
     136:	f001 fbad 	bl	1894 <shiftOut>
	digitalWrite(latchPin, HIGH);
     13a:	2101      	movs	r1, #1
     13c:	200a      	movs	r0, #10
     13e:	f001 fb1f 	bl	1780 <digitalWrite>
}
     142:	bd70      	pop	{r4, r5, r6, pc}

00000144 <setup>:
	Serial.begin(9600);
     144:	2196      	movs	r1, #150	; 0x96
void setup() {
     146:	b570      	push	{r4, r5, r6, lr}
	Serial.begin(9600);
     148:	0189      	lsls	r1, r1, #6
     14a:	4823      	ldr	r0, [pc, #140]	; (1d8 <setup+0x94>)
     14c:	f000 fa78 	bl	640 <_ZN7Serial_5beginEm>
	pinMode(latchPin, OUTPUT);
     150:	2101      	movs	r1, #1
     152:	200a      	movs	r0, #10
     154:	f001 fac8 	bl	16e8 <pinMode>
	pinMode(clockPin, OUTPUT);
     158:	2101      	movs	r1, #1
     15a:	200b      	movs	r0, #11
     15c:	f001 fac4 	bl	16e8 <pinMode>
	pinMode(dataPin, OUTPUT);
     160:	2101      	movs	r1, #1
     162:	200c      	movs	r0, #12
     164:	f001 fac0 	bl	16e8 <pinMode>
	Shift(255, 255);
     168:	21ff      	movs	r1, #255	; 0xff
     16a:	0008      	movs	r0, r1
     16c:	f7ff ffd2 	bl	114 <_Z5Shiftii>
	delay(3000);
     170:	481a      	ldr	r0, [pc, #104]	; (1dc <setup+0x98>)
     172:	f000 f89d 	bl	2b0 <delay>
	Shift(0, 0);
     176:	2100      	movs	r1, #0
     178:	0008      	movs	r0, r1
     17a:	f7ff ffcb 	bl	114 <_Z5Shiftii>
	for(int i = 0; i < 6; i++)
     17e:	2400      	movs	r4, #0
		Shift(1 << i, 0);
     180:	2501      	movs	r5, #1
     182:	0028      	movs	r0, r5
     184:	2100      	movs	r1, #0
     186:	40a0      	lsls	r0, r4
     188:	f7ff ffc4 	bl	114 <_Z5Shiftii>
		delay(1000);
     18c:	20fa      	movs	r0, #250	; 0xfa
	for(int i = 0; i < 6; i++)
     18e:	3401      	adds	r4, #1
		delay(1000);
     190:	0080      	lsls	r0, r0, #2
     192:	f000 f88d 	bl	2b0 <delay>
	for(int i = 0; i < 6; i++)
     196:	2c06      	cmp	r4, #6
     198:	d1f3      	bne.n	182 <setup+0x3e>
	delay(1000);
     19a:	20fa      	movs	r0, #250	; 0xfa
     19c:	0080      	lsls	r0, r0, #2
     19e:	f000 f887 	bl	2b0 <delay>
	Shift(0, 0);
     1a2:	2100      	movs	r1, #0
     1a4:	0008      	movs	r0, r1
     1a6:	f7ff ffb5 	bl	114 <_Z5Shiftii>
	for(int i = 0; i < 6; i++)
     1aa:	2400      	movs	r4, #0
		Shift(0, 1 << i);
     1ac:	2501      	movs	r5, #1
     1ae:	0029      	movs	r1, r5
     1b0:	2000      	movs	r0, #0
     1b2:	40a1      	lsls	r1, r4
     1b4:	f7ff ffae 	bl	114 <_Z5Shiftii>
		delay(1000);
     1b8:	20fa      	movs	r0, #250	; 0xfa
	for(int i = 0; i < 6; i++)
     1ba:	3401      	adds	r4, #1
		delay(1000);
     1bc:	0080      	lsls	r0, r0, #2
     1be:	f000 f877 	bl	2b0 <delay>
	for(int i = 0; i < 6; i++)
     1c2:	2c06      	cmp	r4, #6
     1c4:	d1f3      	bne.n	1ae <setup+0x6a>
	delay(1000);
     1c6:	20fa      	movs	r0, #250	; 0xfa
     1c8:	0080      	lsls	r0, r0, #2
     1ca:	f000 f871 	bl	2b0 <delay>
	Shift(0, 0);
     1ce:	2100      	movs	r1, #0
     1d0:	0008      	movs	r0, r1
     1d2:	f7ff ff9f 	bl	114 <_Z5Shiftii>
}
     1d6:	bd70      	pop	{r4, r5, r6, pc}
     1d8:	20000124 	.word	0x20000124
     1dc:	00000bb8 	.word	0x00000bb8

000001e0 <loop>:
{
     1e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(Serial.available() > 0) {
     1e2:	4c0c      	ldr	r4, [pc, #48]	; (214 <loop+0x34>)
     1e4:	0020      	movs	r0, r4
     1e6:	f000 f9a5 	bl	534 <_ZN7Serial_9availableEv>
     1ea:	2800      	cmp	r0, #0
     1ec:	dd10      	ble.n	210 <loop+0x30>
		if(Serial.readBytes(buffer, 2) > 0) {
     1ee:	ad01      	add	r5, sp, #4
     1f0:	2202      	movs	r2, #2
     1f2:	0029      	movs	r1, r5
     1f4:	0020      	movs	r0, r4
     1f6:	f000 fa24 	bl	642 <_ZN7Serial_9readBytesEPcj>
     1fa:	2800      	cmp	r0, #0
     1fc:	d008      	beq.n	210 <loop+0x30>
			Shift(buffer[0], buffer[1]);
     1fe:	7869      	ldrb	r1, [r5, #1]
     200:	7828      	ldrb	r0, [r5, #0]
     202:	f7ff ff87 	bl	114 <_Z5Shiftii>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     206:	2202      	movs	r2, #2
     208:	4903      	ldr	r1, [pc, #12]	; (218 <loop+0x38>)
     20a:	0020      	movs	r0, r4
     20c:	f000 f99e 	bl	54c <_ZN7Serial_5writeEPKhj>
}
     210:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
     212:	46c0      	nop			; (mov r8, r8)
     214:	20000124 	.word	0x20000124
     218:	00002178 	.word	0x00002178

0000021c <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
     21c:	be03      	bkpt	0x0003
     21e:	e7fe      	b.n	21e <Dummy_Handler+0x2>

00000220 <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
     220:	4b03      	ldr	r3, [pc, #12]	; (230 <USB_Handler+0x10>)
{
     222:	b510      	push	{r4, lr}
  if (usb_isr)
     224:	681b      	ldr	r3, [r3, #0]
     226:	2b00      	cmp	r3, #0
     228:	d000      	beq.n	22c <USB_Handler+0xc>
    usb_isr();
     22a:	4798      	blx	r3
}
     22c:	bd10      	pop	{r4, pc}
     22e:	46c0      	nop			; (mov r8, r8)
     230:	2000011c 	.word	0x2000011c

00000234 <Reset_Handler>:
{
     234:	b570      	push	{r4, r5, r6, lr}
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     236:	490f      	ldr	r1, [pc, #60]	; (274 <Reset_Handler+0x40>)
     238:	4c0f      	ldr	r4, [pc, #60]	; (278 <Reset_Handler+0x44>)
     23a:	42a1      	cmp	r1, r4
     23c:	d104      	bne.n	248 <Reset_Handler+0x14>
  SystemInit();
     23e:	f000 f8bd 	bl	3bc <SystemInit>
  main();
     242:	f000 f851 	bl	2e8 <main>
     246:	e7fe      	b.n	246 <Reset_Handler+0x12>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     248:	4d0c      	ldr	r5, [pc, #48]	; (27c <Reset_Handler+0x48>)
     24a:	2300      	movs	r3, #0
     24c:	428d      	cmp	r5, r1
     24e:	d0f6      	beq.n	23e <Reset_Handler+0xa>
     250:	18ca      	adds	r2, r1, r3
     252:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
     254:	42a2      	cmp	r2, r4
     256:	d305      	bcc.n	264 <Reset_Handler+0x30>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     258:	4290      	cmp	r0, r2
     25a:	d0f0      	beq.n	23e <Reset_Handler+0xa>
     25c:	4b08      	ldr	r3, [pc, #32]	; (280 <Reset_Handler+0x4c>)
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     25e:	4909      	ldr	r1, [pc, #36]	; (284 <Reset_Handler+0x50>)
      *pDest = 0;
     260:	2200      	movs	r2, #0
     262:	e004      	b.n	26e <Reset_Handler+0x3a>
      *pDest = *pSrc;
     264:	6800      	ldr	r0, [r0, #0]
     266:	3304      	adds	r3, #4
     268:	6010      	str	r0, [r2, #0]
     26a:	e7f1      	b.n	250 <Reset_Handler+0x1c>
      *pDest = 0;
     26c:	c304      	stmia	r3!, {r2}
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     26e:	428b      	cmp	r3, r1
     270:	d3fc      	bcc.n	26c <Reset_Handler+0x38>
     272:	e7e4      	b.n	23e <Reset_Handler+0xa>
     274:	20000000 	.word	0x20000000
     278:	20000100 	.word	0x20000100
     27c:	00002664 	.word	0x00002664
     280:	20000100 	.word	0x20000100
     284:	200008b8 	.word	0x200008b8

00000288 <SysTick_Handler>:
{
     288:	b510      	push	{r4, lr}
  if (sysTickHook())
     28a:	f000 f82a 	bl	2e2 <sysTickHook>
     28e:	2800      	cmp	r0, #0
     290:	d101      	bne.n	296 <SysTick_Handler+0xe>
  SysTick_DefaultHandler();
     292:	f000 f81b 	bl	2cc <SysTick_DefaultHandler>
}
     296:	bd10      	pop	{r4, pc}

00000298 <USB_SetHandler>:

void USB_SetHandler(void (*new_usb_isr)(void))
{
  usb_isr = new_usb_isr;
     298:	4b01      	ldr	r3, [pc, #4]	; (2a0 <USB_SetHandler+0x8>)
     29a:	6018      	str	r0, [r3, #0]
}
     29c:	4770      	bx	lr
     29e:	46c0      	nop			; (mov r8, r8)
     2a0:	2000011c 	.word	0x2000011c

000002a4 <millis>:
static volatile uint32_t _ulTickCount=0 ;

uint32_t millis( void )
{
// todo: ensure no interrupts
  return _ulTickCount ;
     2a4:	4b01      	ldr	r3, [pc, #4]	; (2ac <millis+0x8>)
     2a6:	6818      	ldr	r0, [r3, #0]
}
     2a8:	4770      	bx	lr
     2aa:	46c0      	nop			; (mov r8, r8)
     2ac:	20000120 	.word	0x20000120

000002b0 <delay>:
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}

void delay( uint32_t ms )
{
     2b0:	b570      	push	{r4, r5, r6, lr}
     2b2:	1e04      	subs	r4, r0, #0
  if ( ms == 0 )
     2b4:	d007      	beq.n	2c6 <delay+0x16>
  {
    return ;
  }

  uint32_t start = _ulTickCount ;
     2b6:	4d04      	ldr	r5, [pc, #16]	; (2c8 <delay+0x18>)
     2b8:	682e      	ldr	r6, [r5, #0]

  do
  {
    yield() ;
     2ba:	f000 f811 	bl	2e0 <yield>
  } while ( _ulTickCount - start < ms ) ;
     2be:	682b      	ldr	r3, [r5, #0]
     2c0:	1b9b      	subs	r3, r3, r6
     2c2:	429c      	cmp	r4, r3
     2c4:	d8f9      	bhi.n	2ba <delay+0xa>
}
     2c6:	bd70      	pop	{r4, r5, r6, pc}
     2c8:	20000120 	.word	0x20000120

000002cc <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
     2cc:	b510      	push	{r4, lr}
  // Increment tick count each ms
  _ulTickCount++;
     2ce:	4a03      	ldr	r2, [pc, #12]	; (2dc <SysTick_DefaultHandler+0x10>)
     2d0:	6813      	ldr	r3, [r2, #0]
     2d2:	3301      	adds	r3, #1
     2d4:	6013      	str	r3, [r2, #0]
  tickReset();
     2d6:	f000 f835 	bl	344 <tickReset>
}
     2da:	bd10      	pop	{r4, pc}
     2dc:	20000120 	.word	0x20000120

000002e0 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
     2e0:	4770      	bx	lr

000002e2 <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
     2e2:	2000      	movs	r0, #0
     2e4:	4770      	bx	lr

000002e6 <_Z11initVariantv>:
#include "Arduino.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     2e6:	4770      	bx	lr

000002e8 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
     2e8:	b510      	push	{r4, lr}
  init();
     2ea:	f001 f953 	bl	1594 <init>

  __libc_init_array();
     2ee:	f001 fe6f 	bl	1fd0 <__libc_init_array>

  initVariant();
     2f2:	f7ff fff8 	bl	2e6 <_Z11initVariantv>

  delay(1);
     2f6:	2001      	movs	r0, #1
     2f8:	f7ff ffda 	bl	2b0 <delay>
#if defined(USBCON)
  USBDevice.init();
     2fc:	4c08      	ldr	r4, [pc, #32]	; (320 <main+0x38>)
     2fe:	0020      	movs	r0, r4
     300:	f000 fbda 	bl	ab8 <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
     304:	0020      	movs	r0, r4
     306:	f000 fc4f 	bl	ba8 <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
     30a:	f7ff ff1b 	bl	144 <setup>

  for (;;)
  {
    loop();
     30e:	f7ff ff67 	bl	1e0 <loop>
    if (serialEventRun) serialEventRun();
     312:	4b04      	ldr	r3, [pc, #16]	; (324 <main+0x3c>)
     314:	2b00      	cmp	r3, #0
     316:	d0fa      	beq.n	30e <main+0x26>
     318:	e000      	b.n	31c <main+0x34>
     31a:	bf00      	nop
     31c:	e7f7      	b.n	30e <main+0x26>
     31e:	46c0      	nop			; (mov r8, r8)
     320:	20000140 	.word	0x20000140
     324:	00000000 	.word	0x00000000

00000328 <initiateReset>:
}

static int ticks = -1;

void initiateReset(int _ticks) {
	ticks = _ticks;
     328:	4b01      	ldr	r3, [pc, #4]	; (330 <initiateReset+0x8>)
     32a:	6018      	str	r0, [r3, #0]
}
     32c:	4770      	bx	lr
     32e:	46c0      	nop			; (mov r8, r8)
     330:	20000000 	.word	0x20000000

00000334 <cancelReset>:

void cancelReset() {
	ticks = -1;
     334:	2201      	movs	r2, #1
     336:	4b02      	ldr	r3, [pc, #8]	; (340 <cancelReset+0xc>)
     338:	4252      	negs	r2, r2
     33a:	601a      	str	r2, [r3, #0]
}
     33c:	4770      	bx	lr
     33e:	46c0      	nop			; (mov r8, r8)
     340:	20000000 	.word	0x20000000

00000344 <tickReset>:

void tickReset() {
	if (ticks == -1)
     344:	4a16      	ldr	r2, [pc, #88]	; (3a0 <tickReset+0x5c>)
void tickReset() {
     346:	b510      	push	{r4, lr}
	if (ticks == -1)
     348:	6813      	ldr	r3, [r2, #0]
     34a:	1c59      	adds	r1, r3, #1
     34c:	d027      	beq.n	39e <tickReset+0x5a>
		return;
	ticks--;
     34e:	3b01      	subs	r3, #1
     350:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
     352:	2b00      	cmp	r3, #0
     354:	d123      	bne.n	39e <tickReset+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     356:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
     358:	4b12      	ldr	r3, [pc, #72]	; (3a4 <tickReset+0x60>)
     35a:	4a13      	ldr	r2, [pc, #76]	; (3a8 <tickReset+0x64>)
     35c:	3304      	adds	r3, #4
     35e:	4293      	cmp	r3, r2
     360:	d808      	bhi.n	374 <tickReset+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     362:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     366:	4a11      	ldr	r2, [pc, #68]	; (3ac <tickReset+0x68>)
     368:	4b11      	ldr	r3, [pc, #68]	; (3b0 <tickReset+0x6c>)
     36a:	60da      	str	r2, [r3, #12]
     36c:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     370:	46c0      	nop			; (mov r8, r8)
     372:	e7fd      	b.n	370 <tickReset+0x2c>
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     374:	4a0f      	ldr	r2, [pc, #60]	; (3b4 <tickReset+0x70>)
	while (!nvmReady())
     376:	2101      	movs	r1, #1
     378:	0010      	movs	r0, r2
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     37a:	7d14      	ldrb	r4, [r2, #20]
	while (!nvmReady())
     37c:	420c      	tst	r4, r1
     37e:	d0fc      	beq.n	37a <tickReset+0x36>
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     380:	2120      	movs	r1, #32
     382:	8b14      	ldrh	r4, [r2, #24]
     384:	31ff      	adds	r1, #255	; 0xff
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     386:	089b      	lsrs	r3, r3, #2
     388:	005b      	lsls	r3, r3, #1
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     38a:	4321      	orrs	r1, r4
     38c:	8311      	strh	r1, [r2, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     38e:	61d3      	str	r3, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
     390:	4b09      	ldr	r3, [pc, #36]	; (3b8 <tickReset+0x74>)
     392:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
     394:	2301      	movs	r3, #1
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     396:	7d02      	ldrb	r2, [r0, #20]
	while (!nvmReady())
     398:	421a      	tst	r2, r3
     39a:	d0fc      	beq.n	396 <tickReset+0x52>
     39c:	e7e1      	b.n	362 <tickReset+0x1e>
		banzai();
}
     39e:	bd10      	pop	{r4, pc}
     3a0:	20000000 	.word	0x20000000
     3a4:	00000000 	.word	0x00000000
     3a8:	00000203 	.word	0x00000203
     3ac:	05fa0004 	.word	0x05fa0004
     3b0:	e000ed00 	.word	0xe000ed00
     3b4:	41004000 	.word	0x41004000
     3b8:	ffffa502 	.word	0xffffa502

000003bc <SystemInit>:
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     3bc:	221e      	movs	r2, #30
{
     3be:	b570      	push	{r4, r5, r6, lr}
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     3c0:	4846      	ldr	r0, [pc, #280]	; (4dc <SystemInit+0x120>)

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     3c2:	4947      	ldr	r1, [pc, #284]	; (4e0 <SystemInit+0x124>)
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     3c4:	6843      	ldr	r3, [r0, #4]
     3c6:	4393      	bics	r3, r2
     3c8:	3a1c      	subs	r2, #28
     3ca:	4313      	orrs	r3, r2
     3cc:	6043      	str	r3, [r0, #4]
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     3ce:	2308      	movs	r3, #8
     3d0:	698c      	ldr	r4, [r1, #24]
     3d2:	4323      	orrs	r3, r4
     3d4:	618b      	str	r3, [r1, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     3d6:	4c43      	ldr	r4, [pc, #268]	; (4e4 <SystemInit+0x128>)
     3d8:	4b43      	ldr	r3, [pc, #268]	; (4e8 <SystemInit+0x12c>)
     3da:	829c      	strh	r4, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
     3dc:	8a9c      	ldrh	r4, [r3, #20]
     3de:	4314      	orrs	r4, r2
     3e0:	829c      	strh	r4, [r3, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
     3e2:	68dc      	ldr	r4, [r3, #12]
     3e4:	4214      	tst	r4, r2
     3e6:	d0fc      	beq.n	3e2 <SystemInit+0x26>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
     3e8:	2401      	movs	r4, #1
     3ea:	4a40      	ldr	r2, [pc, #256]	; (4ec <SystemInit+0x130>)
     3ec:	7014      	strb	r4, [r2, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     3ee:	7815      	ldrb	r5, [r2, #0]
     3f0:	4225      	tst	r5, r4
     3f2:	d003      	beq.n	3fc <SystemInit+0x40>
     3f4:	7855      	ldrb	r5, [r2, #1]
     3f6:	b26d      	sxtb	r5, r5
     3f8:	2d00      	cmp	r5, #0
     3fa:	dbf8      	blt.n	3ee <SystemInit+0x32>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
     3fc:	2401      	movs	r4, #1
     3fe:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     400:	7854      	ldrb	r4, [r2, #1]
     402:	b264      	sxtb	r4, r4
     404:	2c00      	cmp	r4, #0
     406:	dbfb      	blt.n	400 <SystemInit+0x44>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
     408:	4c39      	ldr	r4, [pc, #228]	; (4f0 <SystemInit+0x134>)
     40a:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     40c:	7854      	ldrb	r4, [r2, #1]
     40e:	b264      	sxtb	r4, r4
     410:	2c00      	cmp	r4, #0
     412:	dbfb      	blt.n	40c <SystemInit+0x50>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
     414:	2482      	movs	r4, #130	; 0x82
     416:	01e4      	lsls	r4, r4, #7
     418:	8054      	strh	r4, [r2, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     41a:	7854      	ldrb	r4, [r2, #1]
     41c:	b264      	sxtb	r4, r4
     41e:	2c00      	cmp	r4, #0
     420:	dbfb      	blt.n	41a <SystemInit+0x5e>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     422:	2402      	movs	r4, #2
     424:	849c      	strh	r4, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     426:	340e      	adds	r4, #14
     428:	68dd      	ldr	r5, [r3, #12]
     42a:	4225      	tst	r5, r4
     42c:	d0fc      	beq.n	428 <SystemInit+0x6c>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
     42e:	4c31      	ldr	r4, [pc, #196]	; (4f4 <SystemInit+0x138>)
     430:	62dc      	str	r4, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK/VARIANT_MAINOSC) ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     432:	2410      	movs	r4, #16
     434:	68dd      	ldr	r5, [r3, #12]
     436:	4225      	tst	r5, r4
     438:	d0fc      	beq.n	434 <SystemInit+0x78>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
     43a:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
     43c:	4c2e      	ldr	r4, [pc, #184]	; (4f8 <SystemInit+0x13c>)
     43e:	432c      	orrs	r4, r5
     440:	849c      	strh	r4, [r3, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     442:	2410      	movs	r4, #16
     444:	68dd      	ldr	r5, [r3, #12]
     446:	4225      	tst	r5, r4
     448:	d0fc      	beq.n	444 <SystemInit+0x88>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     44a:	2402      	movs	r4, #2
     44c:	8c9d      	ldrh	r5, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     44e:	2680      	movs	r6, #128	; 0x80
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     450:	432c      	orrs	r4, r5
     452:	849c      	strh	r4, [r3, #36]	; 0x24
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     454:	2440      	movs	r4, #64	; 0x40
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     456:	68dd      	ldr	r5, [r3, #12]
     458:	4235      	tst	r5, r6
     45a:	d0fc      	beq.n	456 <SystemInit+0x9a>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     45c:	68dd      	ldr	r5, [r3, #12]
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     45e:	4225      	tst	r5, r4
     460:	d0f9      	beq.n	456 <SystemInit+0x9a>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     462:	2410      	movs	r4, #16
     464:	68dd      	ldr	r5, [r3, #12]
     466:	4225      	tst	r5, r4
     468:	d0fc      	beq.n	464 <SystemInit+0xa8>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
     46a:	2400      	movs	r4, #0
     46c:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     46e:	7854      	ldrb	r4, [r2, #1]
     470:	b264      	sxtb	r4, r4
     472:	2c00      	cmp	r4, #0
     474:	dbfb      	blt.n	46e <SystemInit+0xb2>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
     476:	4c21      	ldr	r4, [pc, #132]	; (4fc <SystemInit+0x140>)
     478:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     47a:	7854      	ldrb	r4, [r2, #1]
     47c:	b264      	sxtb	r4, r4
     47e:	2c00      	cmp	r4, #0
     480:	dbfb      	blt.n	47a <SystemInit+0xbe>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     482:	6a1c      	ldr	r4, [r3, #32]
     484:	4d1e      	ldr	r5, [pc, #120]	; (500 <SystemInit+0x144>)
     486:	402c      	ands	r4, r5
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     488:	2580      	movs	r5, #128	; 0x80
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     48a:	621c      	str	r4, [r3, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     48c:	6a1c      	ldr	r4, [r3, #32]
     48e:	43ac      	bics	r4, r5
     490:	621c      	str	r4, [r3, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
     492:	2303      	movs	r3, #3
     494:	6093      	str	r3, [r2, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
     496:	4b1b      	ldr	r3, [pc, #108]	; (504 <SystemInit+0x148>)
     498:	6053      	str	r3, [r2, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     49a:	7853      	ldrb	r3, [r2, #1]
     49c:	b25b      	sxtb	r3, r3
     49e:	2b00      	cmp	r3, #0
     4a0:	dbfb      	blt.n	49a <SystemInit+0xde>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     4a2:	2300      	movs	r3, #0

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     4a4:	24ff      	movs	r4, #255	; 0xff
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     4a6:	720b      	strb	r3, [r1, #8]
  SystemCoreClock=VARIANT_MCK ;
     4a8:	4a17      	ldr	r2, [pc, #92]	; (508 <SystemInit+0x14c>)
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
     4aa:	724b      	strb	r3, [r1, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
     4ac:	728b      	strb	r3, [r1, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
     4ae:	72cb      	strb	r3, [r1, #11]
  SystemCoreClock=VARIANT_MCK ;
     4b0:	4b16      	ldr	r3, [pc, #88]	; (50c <SystemInit+0x150>)
     4b2:	601a      	str	r2, [r3, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     4b4:	4b16      	ldr	r3, [pc, #88]	; (510 <SystemInit+0x154>)
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     4b6:	4a17      	ldr	r2, [pc, #92]	; (514 <SystemInit+0x158>)
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     4b8:	681b      	ldr	r3, [r3, #0]
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     4ba:	6811      	ldr	r1, [r2, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     4bc:	069a      	lsls	r2, r3, #26
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     4be:	015b      	lsls	r3, r3, #5
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     4c0:	0ec9      	lsrs	r1, r1, #27
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     4c2:	4023      	ands	r3, r4
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     4c4:	0f52      	lsrs	r2, r2, #29

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     4c6:	0212      	lsls	r2, r2, #8
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     4c8:	430b      	orrs	r3, r1
  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     4ca:	4313      	orrs	r3, r2
     4cc:	4a12      	ldr	r2, [pc, #72]	; (518 <SystemInit+0x15c>)
     4ce:	8513      	strh	r3, [r2, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
     4d0:	2380      	movs	r3, #128	; 0x80
     4d2:	6842      	ldr	r2, [r0, #4]
     4d4:	4313      	orrs	r3, r2
     4d6:	6043      	str	r3, [r0, #4]
}
     4d8:	bd70      	pop	{r4, r5, r6, pc}
     4da:	46c0      	nop			; (mov r8, r8)
     4dc:	41004000 	.word	0x41004000
     4e0:	40000400 	.word	0x40000400
     4e4:	0000060c 	.word	0x0000060c
     4e8:	40000800 	.word	0x40000800
     4ec:	40000c00 	.word	0x40000c00
     4f0:	00010501 	.word	0x00010501
     4f4:	7dff05b8 	.word	0x7dff05b8
     4f8:	00000a04 	.word	0x00000a04
     4fc:	00030700 	.word	0x00030700
     500:	fffffcff 	.word	0xfffffcff
     504:	00010603 	.word	0x00010603
     508:	02dc6c00 	.word	0x02dc6c00
     50c:	20000080 	.word	0x20000080
     510:	00806024 	.word	0x00806024
     514:	00806020 	.word	0x00806020
     518:	42004000 	.word	0x42004000

0000051c <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
     51c:	203f      	movs	r0, #63	; 0x3f
     51e:	4770      	bx	lr

00000520 <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
     520:	b513      	push	{r0, r1, r4, lr}
     522:	466b      	mov	r3, sp
	return write(&c, 1);
     524:	6802      	ldr	r2, [r0, #0]
size_t Serial_::write(uint8_t c) {
     526:	71d9      	strb	r1, [r3, #7]
     528:	3307      	adds	r3, #7
	return write(&c, 1);
     52a:	6854      	ldr	r4, [r2, #4]
     52c:	0019      	movs	r1, r3
     52e:	2201      	movs	r2, #1
     530:	47a0      	blx	r4
}
     532:	bd16      	pop	{r1, r2, r4, pc}

00000534 <_ZN7Serial_9availableEv>:
{
     534:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT);
     536:	2102      	movs	r1, #2
     538:	6900      	ldr	r0, [r0, #16]
     53a:	f000 fc37 	bl	dac <_ZN14USBDeviceClass9availableEm>
}
     53e:	bd10      	pop	{r4, pc}

00000540 <_ZN7Serial_5flushEv>:
{
     540:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
     542:	2103      	movs	r1, #3
     544:	6900      	ldr	r0, [r0, #16]
     546:	f000 fc47 	bl	dd8 <_ZN14USBDeviceClass5flushEm>
}
     54a:	bd10      	pop	{r4, pc}

0000054c <_ZN7Serial_5writeEPKhj>:
{
     54c:	b510      	push	{r4, lr}
     54e:	0013      	movs	r3, r2
     550:	0004      	movs	r4, r0
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
     552:	000a      	movs	r2, r1
     554:	6900      	ldr	r0, [r0, #16]
     556:	2103      	movs	r1, #3
     558:	f000 fd38 	bl	fcc <_ZN14USBDeviceClass4sendEmPKvm>
	if (r > 0) {
     55c:	2800      	cmp	r0, #0
     55e:	d101      	bne.n	564 <_ZN7Serial_5writeEPKhj+0x18>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     560:	2301      	movs	r3, #1
     562:	6063      	str	r3, [r4, #4]
}
     564:	bd10      	pop	{r4, pc}
	...

00000568 <_ZN7Serial_4peekEv>:
{
     568:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
     56a:	4c05      	ldr	r4, [pc, #20]	; (580 <_ZN7Serial_4peekEv+0x18>)
     56c:	6823      	ldr	r3, [r4, #0]
     56e:	1c5a      	adds	r2, r3, #1
     570:	d104      	bne.n	57c <_ZN7Serial_4peekEv+0x14>
	_serialPeek = read();
     572:	6803      	ldr	r3, [r0, #0]
     574:	68db      	ldr	r3, [r3, #12]
     576:	4798      	blx	r3
     578:	0003      	movs	r3, r0
     57a:	6020      	str	r0, [r4, #0]
}
     57c:	0018      	movs	r0, r3
     57e:	bd10      	pop	{r4, pc}
     580:	20000054 	.word	0x20000054

00000584 <_ZN7Serial_4readEv>:
	if (_serialPeek != -1) {
     584:	4b07      	ldr	r3, [pc, #28]	; (5a4 <_ZN7Serial_4readEv+0x20>)
{
     586:	0002      	movs	r2, r0
	if (_serialPeek != -1) {
     588:	6818      	ldr	r0, [r3, #0]
{
     58a:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
     58c:	1c41      	adds	r1, r0, #1
     58e:	d003      	beq.n	598 <_ZN7Serial_4readEv+0x14>
		_serialPeek = -1;
     590:	2201      	movs	r2, #1
     592:	4252      	negs	r2, r2
     594:	601a      	str	r2, [r3, #0]
}
     596:	bd10      	pop	{r4, pc}
	return usb.recv(CDC_ENDPOINT_OUT);
     598:	2102      	movs	r1, #2
     59a:	6910      	ldr	r0, [r2, #16]
     59c:	f000 fd08 	bl	fb0 <_ZN14USBDeviceClass4recvEm>
     5a0:	e7f9      	b.n	596 <_ZN7Serial_4readEv+0x12>
     5a2:	46c0      	nop			; (mov r8, r8)
     5a4:	20000054 	.word	0x20000054

000005a8 <_Z16CDC_GetInterfacePh>:
{
     5a8:	b510      	push	{r4, lr}
	interfaceNum[0] += 2;	// uses 2
     5aa:	7803      	ldrb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
     5ac:	2242      	movs	r2, #66	; 0x42
	interfaceNum[0] += 2;	// uses 2
     5ae:	3302      	adds	r3, #2
     5b0:	7003      	strb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
     5b2:	4902      	ldr	r1, [pc, #8]	; (5bc <_Z16CDC_GetInterfacePh+0x14>)
     5b4:	4802      	ldr	r0, [pc, #8]	; (5c0 <_Z16CDC_GetInterfacePh+0x18>)
     5b6:	f000 fdb5 	bl	1124 <_ZN14USBDeviceClass11sendControlEPKvm>
}
     5ba:	bd10      	pop	{r4, pc}
     5bc:	20000010 	.word	0x20000010
     5c0:	20000140 	.word	0x20000140

000005c4 <_Z9CDC_SetupR8USBSetup>:
{
     5c4:	b510      	push	{r4, lr}
	uint8_t requestType = setup.bmRequestType;
     5c6:	7801      	ldrb	r1, [r0, #0]
{
     5c8:	0003      	movs	r3, r0
	uint8_t r = setup.bRequest;
     5ca:	7842      	ldrb	r2, [r0, #1]
	return false;
     5cc:	2000      	movs	r0, #0
	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
     5ce:	29a1      	cmp	r1, #161	; 0xa1
     5d0:	d108      	bne.n	5e4 <_Z9CDC_SetupR8USBSetup+0x20>
		if (r == CDC_GET_LINE_CODING)
     5d2:	2a21      	cmp	r2, #33	; 0x21
     5d4:	d105      	bne.n	5e2 <_Z9CDC_SetupR8USBSetup+0x1e>
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
     5d6:	3a1a      	subs	r2, #26
     5d8:	4916      	ldr	r1, [pc, #88]	; (634 <_Z9CDC_SetupR8USBSetup+0x70>)
     5da:	4817      	ldr	r0, [pc, #92]	; (638 <_Z9CDC_SetupR8USBSetup+0x74>)
     5dc:	f000 fda2 	bl	1124 <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
     5e0:	2001      	movs	r0, #1
}
     5e2:	bd10      	pop	{r4, pc}
	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
     5e4:	2921      	cmp	r1, #33	; 0x21
     5e6:	d1fc      	bne.n	5e2 <_Z9CDC_SetupR8USBSetup+0x1e>
		if (r == CDC_SET_LINE_CODING)
     5e8:	2a20      	cmp	r2, #32
     5ea:	d111      	bne.n	610 <_Z9CDC_SetupR8USBSetup+0x4c>
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
     5ec:	3a19      	subs	r2, #25
     5ee:	4911      	ldr	r1, [pc, #68]	; (634 <_Z9CDC_SetupR8USBSetup+0x70>)
     5f0:	4811      	ldr	r0, [pc, #68]	; (638 <_Z9CDC_SetupR8USBSetup+0x74>)
     5f2:	f000 fc35 	bl	e60 <_ZN14USBDeviceClass11recvControlEPvm>
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
     5f6:	2296      	movs	r2, #150	; 0x96
     5f8:	4b0e      	ldr	r3, [pc, #56]	; (634 <_Z9CDC_SetupR8USBSetup+0x70>)
     5fa:	00d2      	lsls	r2, r2, #3
     5fc:	6819      	ldr	r1, [r3, #0]
     5fe:	4291      	cmp	r1, r2
     600:	d103      	bne.n	60a <_Z9CDC_SetupR8USBSetup+0x46>
     602:	2401      	movs	r4, #1
     604:	79d8      	ldrb	r0, [r3, #7]
     606:	4004      	ands	r4, r0
     608:	d00e      	beq.n	628 <_Z9CDC_SetupR8USBSetup+0x64>
				cancelReset();
     60a:	f7ff fe93 	bl	334 <cancelReset>
     60e:	e00e      	b.n	62e <_Z9CDC_SetupR8USBSetup+0x6a>
		if (r == CDC_SET_CONTROL_LINE_STATE)
     610:	2a22      	cmp	r2, #34	; 0x22
     612:	d103      	bne.n	61c <_Z9CDC_SetupR8USBSetup+0x58>
			_usbLineInfo.lineState = setup.wValueL;
     614:	789a      	ldrb	r2, [r3, #2]
     616:	4b07      	ldr	r3, [pc, #28]	; (634 <_Z9CDC_SetupR8USBSetup+0x70>)
     618:	71da      	strb	r2, [r3, #7]
     61a:	e7ec      	b.n	5f6 <_Z9CDC_SetupR8USBSetup+0x32>
		if (CDC_SEND_BREAK == r)
     61c:	2a23      	cmp	r2, #35	; 0x23
     61e:	d1e0      	bne.n	5e2 <_Z9CDC_SetupR8USBSetup+0x1e>
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
     620:	885a      	ldrh	r2, [r3, #2]
     622:	4b06      	ldr	r3, [pc, #24]	; (63c <_Z9CDC_SetupR8USBSetup+0x78>)
     624:	601a      	str	r2, [r3, #0]
			return false;
     626:	e7dc      	b.n	5e2 <_Z9CDC_SetupR8USBSetup+0x1e>
				initiateReset(250);
     628:	20fa      	movs	r0, #250	; 0xfa
     62a:	f7ff fe7d 	bl	328 <initiateReset>
			return false;
     62e:	2000      	movs	r0, #0
     630:	e7d7      	b.n	5e2 <_Z9CDC_SetupR8USBSetup+0x1e>
     632:	46c0      	nop			; (mov r8, r8)
     634:	20000008 	.word	0x20000008
     638:	20000140 	.word	0x20000140
     63c:	20000004 	.word	0x20000004

00000640 <_ZN7Serial_5beginEm>:
}
     640:	4770      	bx	lr

00000642 <_ZN7Serial_9readBytesEPcj>:
{
     642:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     644:	0005      	movs	r5, r0
     646:	9101      	str	r1, [sp, #4]
     648:	0017      	movs	r7, r2
	_startMillis = millis();
     64a:	f7ff fe2b 	bl	2a4 <millis>
	size_t count = 0;
     64e:	2400      	movs	r4, #0
	_startMillis = millis();
     650:	60e8      	str	r0, [r5, #12]
	while (count < length)
     652:	42bc      	cmp	r4, r7
     654:	d211      	bcs.n	67a <_ZN7Serial_9readBytesEPcj+0x38>
		uint32_t n = usb.recv(CDC_ENDPOINT_OUT, buffer+count, length-count);
     656:	9a01      	ldr	r2, [sp, #4]
     658:	1b3b      	subs	r3, r7, r4
     65a:	1912      	adds	r2, r2, r4
     65c:	2102      	movs	r1, #2
     65e:	6928      	ldr	r0, [r5, #16]
     660:	f000 fc38 	bl	ed4 <_ZN14USBDeviceClass4recvEmPvm>
     664:	1e06      	subs	r6, r0, #0
		if (n == 0 && (millis() - _startMillis) >= _timeout)
     666:	d106      	bne.n	676 <_ZN7Serial_9readBytesEPcj+0x34>
     668:	f7ff fe1c 	bl	2a4 <millis>
     66c:	68eb      	ldr	r3, [r5, #12]
     66e:	1ac0      	subs	r0, r0, r3
     670:	68ab      	ldr	r3, [r5, #8]
     672:	4298      	cmp	r0, r3
     674:	d201      	bcs.n	67a <_ZN7Serial_9readBytesEPcj+0x38>
		count += n;
     676:	19a4      	adds	r4, r4, r6
	while (count < length)
     678:	e7eb      	b.n	652 <_ZN7Serial_9readBytesEPcj+0x10>
}
     67a:	0020      	movs	r0, r4
     67c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00000680 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     680:	22fa      	movs	r2, #250	; 0xfa
  public:
    Print() : write_error(0) {}
     682:	2100      	movs	r1, #0
     684:	4b05      	ldr	r3, [pc, #20]	; (69c <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x1c>)
     686:	0092      	lsls	r2, r2, #2
     688:	609a      	str	r2, [r3, #8]
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
     68a:	4a05      	ldr	r2, [pc, #20]	; (6a0 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x20>)
     68c:	6059      	str	r1, [r3, #4]
     68e:	3208      	adds	r2, #8
     690:	601a      	str	r2, [r3, #0]
     692:	4a04      	ldr	r2, [pc, #16]	; (6a4 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x24>)
     694:	7619      	strb	r1, [r3, #24]
     696:	611a      	str	r2, [r3, #16]

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ Serial(USBDevice);
     698:	4770      	bx	lr
     69a:	46c0      	nop			; (mov r8, r8)
     69c:	20000124 	.word	0x20000124
     6a0:	0000217c 	.word	0x0000217c
     6a4:	20000140 	.word	0x20000140

000006a8 <_ZN14USBDeviceClass6initEPEmm.part.5>:
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
     6a8:	b570      	push	{r4, r5, r6, lr}
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     6aa:	26c0      	movs	r6, #192	; 0xc0
     6ac:	b2c1      	uxtb	r1, r0
     6ae:	4c1b      	ldr	r4, [pc, #108]	; (71c <_ZN14USBDeviceClass6initEPEmm.part.5+0x74>)
     6b0:	014b      	lsls	r3, r1, #5
     6b2:	18e3      	adds	r3, r4, r3
     6b4:	689a      	ldr	r2, [r3, #8]
     6b6:	4d1a      	ldr	r5, [pc, #104]	; (720 <_ZN14USBDeviceClass6initEPEmm.part.5+0x78>)
     6b8:	05b6      	lsls	r6, r6, #22
     6ba:	402a      	ands	r2, r5
     6bc:	4332      	orrs	r2, r6
     6be:	609a      	str	r2, [r3, #8]
	}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
	{
		// Setup Control OUT
		usbd.epBank0SetSize(ep, 64);
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
     6c0:	4a18      	ldr	r2, [pc, #96]	; (724 <_ZN14USBDeviceClass6initEPEmm.part.5+0x7c>)
     6c2:	0180      	lsls	r0, r0, #6
     6c4:	1810      	adds	r0, r2, r0
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     6c6:	000a      	movs	r2, r1
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     6c8:	6058      	str	r0, [r3, #4]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     6ca:	2007      	movs	r0, #7
     6cc:	6824      	ldr	r4, [r4, #0]
     6ce:	3208      	adds	r2, #8
     6d0:	0152      	lsls	r2, r2, #5
     6d2:	5d11      	ldrb	r1, [r2, r4]
     6d4:	4381      	bics	r1, r0
     6d6:	0008      	movs	r0, r1
     6d8:	2101      	movs	r1, #1
     6da:	4301      	orrs	r1, r0
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     6dc:	2070      	movs	r0, #112	; 0x70
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     6de:	5511      	strb	r1, [r2, r4]
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     6e0:	6999      	ldr	r1, [r3, #24]
     6e2:	4029      	ands	r1, r5
     6e4:	4331      	orrs	r1, r6
     6e6:	6199      	str	r1, [r3, #24]
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     6e8:	490f      	ldr	r1, [pc, #60]	; (728 <_ZN14USBDeviceClass6initEPEmm.part.5+0x80>)
     6ea:	6159      	str	r1, [r3, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     6ec:	5d11      	ldrb	r1, [r2, r4]
     6ee:	4381      	bics	r1, r0
     6f0:	0008      	movs	r0, r1
     6f2:	2110      	movs	r1, #16
     6f4:	4301      	orrs	r1, r0
     6f6:	5511      	strb	r1, [r2, r4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     6f8:	6899      	ldr	r1, [r3, #8]
     6fa:	480c      	ldr	r0, [pc, #48]	; (72c <_ZN14USBDeviceClass6initEPEmm.part.5+0x84>)
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
     6fc:	18a2      	adds	r2, r4, r2
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     6fe:	4008      	ands	r0, r1
     700:	2180      	movs	r1, #128	; 0x80
     702:	0349      	lsls	r1, r1, #13
     704:	4301      	orrs	r1, r0
     706:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     708:	6899      	ldr	r1, [r3, #8]
     70a:	0b89      	lsrs	r1, r1, #14
     70c:	0389      	lsls	r1, r1, #14
     70e:	6099      	str	r1, [r3, #8]
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
     710:	2340      	movs	r3, #64	; 0x40
     712:	7951      	ldrb	r1, [r2, #5]
     714:	430b      	orrs	r3, r1
     716:	7153      	strb	r3, [r2, #5]
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
     718:	bd70      	pop	{r4, r5, r6, pc}
     71a:	46c0      	nop			; (mov r8, r8)
     71c:	200005f8 	.word	0x200005f8
     720:	8fffffff 	.word	0x8fffffff
     724:	2000032c 	.word	0x2000032c
     728:	2000016c 	.word	0x2000016c
     72c:	f0003fff 	.word	0xf0003fff

00000730 <_ZN20USBDevice_SAMD21G18x5resetEv>:

	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
     730:	b570      	push	{r4, r5, r6, lr}
	usb.CTRLA.bit.SWRST = 1;
     732:	0004      	movs	r4, r0
     734:	2301      	movs	r3, #1
     736:	cc20      	ldmia	r4!, {r5}
	memset(EP, 0, sizeof(EP));
     738:	2100      	movs	r1, #0
	usb.CTRLA.bit.SWRST = 1;
     73a:	782a      	ldrb	r2, [r5, #0]
	memset(EP, 0, sizeof(EP));
     73c:	0020      	movs	r0, r4
	usb.CTRLA.bit.SWRST = 1;
     73e:	4313      	orrs	r3, r2
	memset(EP, 0, sizeof(EP));
     740:	2280      	movs	r2, #128	; 0x80
	usb.CTRLA.bit.SWRST = 1;
     742:	702b      	strb	r3, [r5, #0]
	memset(EP, 0, sizeof(EP));
     744:	0052      	lsls	r2, r2, #1
     746:	f001 fc7a 	bl	203e <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
     74a:	78ab      	ldrb	r3, [r5, #2]
     74c:	07db      	lsls	r3, r3, #31
     74e:	d4fc      	bmi.n	74a <_ZN20USBDevice_SAMD21G18x5resetEv+0x1a>
	usb.DESCADD.reg = (uint32_t)(&EP);
     750:	626c      	str	r4, [r5, #36]	; 0x24
}
     752:	bd70      	pop	{r4, r5, r6, pc}

00000754 <_ZN20USBDevice_SAMD21G18x9calibrateEv>:
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
     754:	221f      	movs	r2, #31
     756:	4b14      	ldr	r3, [pc, #80]	; (7a8 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x54>)
void USBDevice_SAMD21G18x::calibrate() {
     758:	b570      	push	{r4, r5, r6, lr}
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
     75a:	681b      	ldr	r3, [r3, #0]
     75c:	0b59      	lsrs	r1, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
     75e:	0c9c      	lsrs	r4, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
     760:	019b      	lsls	r3, r3, #6
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
     762:	4011      	ands	r1, r2
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
     764:	0f5b      	lsrs	r3, r3, #29
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
     766:	4022      	ands	r2, r4

	if (pad_transn == 0x1F)  // maximum value (31)
     768:	291f      	cmp	r1, #31
     76a:	d100      	bne.n	76e <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x1a>
		pad_transn = 5;
     76c:	391a      	subs	r1, #26
	if (pad_transp == 0x1F)  // maximum value (31)
     76e:	2a1f      	cmp	r2, #31
     770:	d100      	bne.n	774 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x20>
		pad_transp = 29;
     772:	3a02      	subs	r2, #2
	if (pad_trim == 0x7)     // maximum value (7)
     774:	2b07      	cmp	r3, #7
     776:	d100      	bne.n	77a <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x26>
		pad_trim = 3;
     778:	3b04      	subs	r3, #4

	usb.PADCAL.bit.TRANSN = pad_transn;
     77a:	251f      	movs	r5, #31
     77c:	6800      	ldr	r0, [r0, #0]
     77e:	018e      	lsls	r6, r1, #6
     780:	8d04      	ldrh	r4, [r0, #40]	; 0x28
     782:	490a      	ldr	r1, [pc, #40]	; (7ac <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x58>)
	usb.PADCAL.bit.TRANSP = pad_transp;
     784:	402a      	ands	r2, r5
	usb.PADCAL.bit.TRANSN = pad_transn;
     786:	4021      	ands	r1, r4
     788:	4331      	orrs	r1, r6
     78a:	8501      	strh	r1, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
     78c:	8d01      	ldrh	r1, [r0, #40]	; 0x28
     78e:	0014      	movs	r4, r2
     790:	000a      	movs	r2, r1
     792:	43aa      	bics	r2, r5
     794:	4322      	orrs	r2, r4
     796:	8502      	strh	r2, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
     798:	8d02      	ldrh	r2, [r0, #40]	; 0x28
     79a:	0319      	lsls	r1, r3, #12
     79c:	4b04      	ldr	r3, [pc, #16]	; (7b0 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x5c>)
     79e:	4013      	ands	r3, r2
     7a0:	430b      	orrs	r3, r1
     7a2:	8503      	strh	r3, [r0, #40]	; 0x28
}
     7a4:	bd70      	pop	{r4, r5, r6, pc}
     7a6:	46c0      	nop			; (mov r8, r8)
     7a8:	00806024 	.word	0x00806024
     7ac:	fffff83f 	.word	0xfffff83f
     7b0:	ffff8fff 	.word	0xffff8fff

000007b4 <_ZN7__GuardC1Ev>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     7b4:	f3ef 8310 	mrs	r3, PRIMASK
 * TODO: Move into a separate header file and make an API out of it
 */

class __Guard {
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
     7b8:	6003      	str	r3, [r0, #0]
     7ba:	2301      	movs	r3, #1
     7bc:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     7be:	b672      	cpsid	i
		__disable_irq();
	}
     7c0:	4770      	bx	lr

000007c2 <_ZN7__GuardD1Ev>:
	~__Guard() {
		if (primask == 0) {
     7c2:	6803      	ldr	r3, [r0, #0]
     7c4:	2b00      	cmp	r3, #0
     7c6:	d102      	bne.n	7ce <_ZN7__GuardD1Ev+0xc>
  __ASM volatile ("cpsie i" : : : "memory");
     7c8:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
     7ca:	f3bf 8f6f 	isb	sy
			__enable_irq();
			// http://infocenter.arm.com/help/topic/com.arm.doc.dai0321a/BIHBFEIB.html
			__ISB();
		}
	}
     7ce:	4770      	bx	lr

000007d0 <_ZNK26DoubleBufferedEPOutHandler9availableEv>:
			release();
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
     7d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (current == 0) {
     7d2:	6905      	ldr	r5, [r0, #16]
	virtual uint32_t available() const {
     7d4:	0004      	movs	r4, r0
			bool ready = false;
			synchronized {
     7d6:	4668      	mov	r0, sp
		if (current == 0) {
     7d8:	2d00      	cmp	r5, #0
     7da:	d114      	bne.n	806 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x36>
			synchronized {
     7dc:	f7ff ffea 	bl	7b4 <_ZN7__GuardC1Ev>
     7e0:	9b01      	ldr	r3, [sp, #4]
				ready = ready0;
     7e2:	1d62      	adds	r2, r4, #5
			synchronized {
     7e4:	3b01      	subs	r3, #1
     7e6:	d302      	bcc.n	7ee <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x1e>
				ready = ready0;
     7e8:	7fd5      	ldrb	r5, [r2, #31]
     7ea:	b2ed      	uxtb	r5, r5
     7ec:	e7fa      	b.n	7e4 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x14>
			synchronized {
     7ee:	4668      	mov	r0, sp
     7f0:	9301      	str	r3, [sp, #4]
     7f2:	f7ff ffe6 	bl	7c2 <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
     7f6:	2d00      	cmp	r5, #0
     7f8:	d101      	bne.n	7fe <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2e>
     7fa:	2000      	movs	r0, #0
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
		}
	}
     7fc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			return ready ? (last0 - first0) : 0;
     7fe:	6a20      	ldr	r0, [r4, #32]
     800:	69e3      	ldr	r3, [r4, #28]
			return ready ? (last1 - first1) : 0;
     802:	1ac0      	subs	r0, r0, r3
     804:	e7fa      	b.n	7fc <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2c>
			synchronized {
     806:	f7ff ffd5 	bl	7b4 <_ZN7__GuardC1Ev>
				ready = ready1;
     80a:	0022      	movs	r2, r4
			bool ready = false;
     80c:	2500      	movs	r5, #0
     80e:	9b01      	ldr	r3, [sp, #4]
				ready = ready1;
     810:	3234      	adds	r2, #52	; 0x34
			synchronized {
     812:	3b01      	subs	r3, #1
     814:	d302      	bcc.n	81c <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x4c>
				ready = ready1;
     816:	7815      	ldrb	r5, [r2, #0]
     818:	b2ed      	uxtb	r5, r5
			synchronized {
     81a:	e7fa      	b.n	812 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x42>
     81c:	4668      	mov	r0, sp
     81e:	9301      	str	r3, [sp, #4]
     820:	f7ff ffcf 	bl	7c2 <_ZN7__GuardD1Ev>
			return ready ? (last1 - first1) : 0;
     824:	2d00      	cmp	r5, #0
     826:	d0e8      	beq.n	7fa <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2a>
     828:	6b20      	ldr	r0, [r4, #48]	; 0x30
     82a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     82c:	e7e9      	b.n	802 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x32>
	...

00000830 <_ZN26DoubleBufferedEPOutHandler7releaseEv>:

	void release() {
     830:	b5f0      	push	{r4, r5, r6, r7, lr}
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     832:	2501      	movs	r5, #1
		// Release OUT EP
		usbd.epBank0EnableTransferComplete(ep);
     834:	6846      	ldr	r6, [r0, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     836:	7a03      	ldrb	r3, [r0, #8]
     838:	6831      	ldr	r1, [r6, #0]
     83a:	015a      	lsls	r2, r3, #5
     83c:	188c      	adds	r4, r1, r2
     83e:	34ff      	adds	r4, #255	; 0xff
     840:	7aa7      	ldrb	r7, [r4, #10]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     842:	18b2      	adds	r2, r6, r2
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     844:	433d      	orrs	r5, r7
     846:	72a5      	strb	r5, [r4, #10]
		usbd.epBank0SetMultiPacketSize(ep, size);
     848:	68c4      	ldr	r4, [r0, #12]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     84a:	4d09      	ldr	r5, [pc, #36]	; (870 <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x40>)
     84c:	6890      	ldr	r0, [r2, #8]
     84e:	04a4      	lsls	r4, r4, #18
     850:	4028      	ands	r0, r5
     852:	0924      	lsrs	r4, r4, #4
     854:	4320      	orrs	r0, r4
     856:	6090      	str	r0, [r2, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     858:	6890      	ldr	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     85a:	3308      	adds	r3, #8
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     85c:	0b80      	lsrs	r0, r0, #14
     85e:	0380      	lsls	r0, r0, #14
     860:	6090      	str	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     862:	2240      	movs	r2, #64	; 0x40
     864:	015b      	lsls	r3, r3, #5
     866:	18cb      	adds	r3, r1, r3
     868:	7919      	ldrb	r1, [r3, #4]
     86a:	430a      	orrs	r2, r1
     86c:	711a      	strb	r2, [r3, #4]
		usbd.epBank0SetByteCount(ep, 0);
		usbd.epBank0ResetReady(ep);
	}
     86e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     870:	f0003fff 	.word	0xf0003fff

00000874 <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
	virtual uint32_t recv(void *_data, uint32_t len)
     874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (current == 0) {
     876:	6903      	ldr	r3, [r0, #16]
	virtual uint32_t recv(void *_data, uint32_t len)
     878:	0004      	movs	r4, r0
     87a:	000e      	movs	r6, r1
     87c:	0017      	movs	r7, r2
			synchronized {
     87e:	4668      	mov	r0, sp
		if (current == 0) {
     880:	2b00      	cmp	r3, #0
     882:	d13d      	bne.n	900 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x8c>
			synchronized {
     884:	f7ff ff96 	bl	7b4 <_ZN7__GuardC1Ev>
     888:	9b01      	ldr	r3, [sp, #4]
				if (!ready0) {
     88a:	1d61      	adds	r1, r4, #5
     88c:	3b01      	subs	r3, #1
			synchronized {
     88e:	1c5a      	adds	r2, r3, #1
     890:	d00c      	beq.n	8ac <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x38>
				if (!ready0) {
     892:	7fcd      	ldrb	r5, [r1, #31]
     894:	1e5a      	subs	r2, r3, #1
     896:	b2ed      	uxtb	r5, r5
     898:	2d00      	cmp	r5, #0
     89a:	d105      	bne.n	8a8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x34>
				synchronized {
     89c:	4668      	mov	r0, sp
     89e:	9301      	str	r3, [sp, #4]
     8a0:	f7ff ff8f 	bl	7c2 <_ZN7__GuardD1Ev>
	}
     8a4:	0028      	movs	r0, r5
     8a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     8a8:	0013      	movs	r3, r2
     8aa:	e7f0      	b.n	88e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1a>
			synchronized {
     8ac:	4668      	mov	r0, sp
     8ae:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first0 < last0; i++) {
     8b0:	2500      	movs	r5, #0
			synchronized {
     8b2:	f7ff ff86 	bl	7c2 <_ZN7__GuardD1Ev>
     8b6:	69e3      	ldr	r3, [r4, #28]
			for (i=0; i<len && first0 < last0; i++) {
     8b8:	42af      	cmp	r7, r5
     8ba:	d002      	beq.n	8c2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x4e>
     8bc:	6a22      	ldr	r2, [r4, #32]
     8be:	4293      	cmp	r3, r2
     8c0:	d357      	bcc.n	972 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfe>
			if (first0 == last0) {
     8c2:	6a22      	ldr	r2, [r4, #32]
     8c4:	4293      	cmp	r3, r2
     8c6:	d1ed      	bne.n	8a4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first0 = 0;
     8c8:	2300      	movs	r3, #0
     8ca:	61e3      	str	r3, [r4, #28]
				current = 1;
     8cc:	3301      	adds	r3, #1
     8ce:	6123      	str	r3, [r4, #16]
				synchronized {
     8d0:	4668      	mov	r0, sp
     8d2:	f7ff ff6f 	bl	7b4 <_ZN7__GuardC1Ev>
					if (notify) {
     8d6:	0022      	movs	r2, r4
					ready0 = false;
     8d8:	2100      	movs	r1, #0
     8da:	9b01      	ldr	r3, [sp, #4]
     8dc:	1d67      	adds	r7, r4, #5
     8de:	3b01      	subs	r3, #1
					if (notify) {
     8e0:	3235      	adds	r2, #53	; 0x35
				synchronized {
     8e2:	1c58      	adds	r0, r3, #1
     8e4:	d0da      	beq.n	89c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready0 = false;
     8e6:	77f9      	strb	r1, [r7, #31]
					if (notify) {
     8e8:	7810      	ldrb	r0, [r2, #0]
     8ea:	1e5e      	subs	r6, r3, #1
     8ec:	2800      	cmp	r0, #0
     8ee:	d005      	beq.n	8fc <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x88>
						notify = false;
     8f0:	7011      	strb	r1, [r2, #0]
						release();
     8f2:	0020      	movs	r0, r4
     8f4:	9301      	str	r3, [sp, #4]
     8f6:	f7ff ff9b 	bl	830 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     8fa:	e7ec      	b.n	8d6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x62>
					if (notify) {
     8fc:	0033      	movs	r3, r6
     8fe:	e7f0      	b.n	8e2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x6e>
			synchronized {
     900:	f7ff ff58 	bl	7b4 <_ZN7__GuardC1Ev>
				if (!ready1) {
     904:	0021      	movs	r1, r4
     906:	9b01      	ldr	r3, [sp, #4]
     908:	3134      	adds	r1, #52	; 0x34
     90a:	3b01      	subs	r3, #1
			synchronized {
     90c:	1c5a      	adds	r2, r3, #1
     90e:	d006      	beq.n	91e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xaa>
				if (!ready1) {
     910:	780d      	ldrb	r5, [r1, #0]
     912:	1e5a      	subs	r2, r3, #1
     914:	b2ed      	uxtb	r5, r5
     916:	2d00      	cmp	r5, #0
     918:	d0c0      	beq.n	89c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
     91a:	0013      	movs	r3, r2
     91c:	e7f6      	b.n	90c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x98>
			synchronized {
     91e:	4668      	mov	r0, sp
     920:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first1 < last1; i++) {
     922:	2500      	movs	r5, #0
			synchronized {
     924:	f7ff ff4d 	bl	7c2 <_ZN7__GuardD1Ev>
     928:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			for (i=0; i<len && first1 < last1; i++) {
     92a:	42bd      	cmp	r5, r7
     92c:	d002      	beq.n	934 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc0>
     92e:	6b22      	ldr	r2, [r4, #48]	; 0x30
     930:	4293      	cmp	r3, r2
     932:	d326      	bcc.n	982 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x10e>
			if (first1 == last1) {
     934:	6b22      	ldr	r2, [r4, #48]	; 0x30
     936:	4293      	cmp	r3, r2
     938:	d1b4      	bne.n	8a4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first1 = 0;
     93a:	2300      	movs	r3, #0
				synchronized {
     93c:	4668      	mov	r0, sp
				first1 = 0;
     93e:	62e3      	str	r3, [r4, #44]	; 0x2c
				current = 0;
     940:	6123      	str	r3, [r4, #16]
				synchronized {
     942:	f7ff ff37 	bl	7b4 <_ZN7__GuardC1Ev>
					ready1 = false;
     946:	0027      	movs	r7, r4
					if (notify) {
     948:	0022      	movs	r2, r4
					ready1 = false;
     94a:	2100      	movs	r1, #0
     94c:	9b01      	ldr	r3, [sp, #4]
     94e:	3734      	adds	r7, #52	; 0x34
     950:	3b01      	subs	r3, #1
					if (notify) {
     952:	3235      	adds	r2, #53	; 0x35
				synchronized {
     954:	1c58      	adds	r0, r3, #1
     956:	d0a1      	beq.n	89c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready1 = false;
     958:	7039      	strb	r1, [r7, #0]
					if (notify) {
     95a:	7810      	ldrb	r0, [r2, #0]
     95c:	1e5e      	subs	r6, r3, #1
     95e:	2800      	cmp	r0, #0
     960:	d005      	beq.n	96e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfa>
						notify = false;
     962:	7011      	strb	r1, [r2, #0]
						release();
     964:	0020      	movs	r0, r4
     966:	9301      	str	r3, [sp, #4]
     968:	f7ff ff62 	bl	830 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     96c:	e7eb      	b.n	946 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd2>
     96e:	0033      	movs	r3, r6
     970:	e7f0      	b.n	954 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xe0>
				data[i] = data0[first0++];
     972:	1c5a      	adds	r2, r3, #1
     974:	61e2      	str	r2, [r4, #28]
     976:	69a2      	ldr	r2, [r4, #24]
     978:	18d3      	adds	r3, r2, r3
     97a:	781b      	ldrb	r3, [r3, #0]
     97c:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first0 < last0; i++) {
     97e:	3501      	adds	r5, #1
     980:	e799      	b.n	8b6 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x42>
				data[i] = data1[first1++];
     982:	1c5a      	adds	r2, r3, #1
     984:	62e2      	str	r2, [r4, #44]	; 0x2c
     986:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     988:	18d3      	adds	r3, r2, r3
     98a:	781b      	ldrb	r3, [r3, #0]
     98c:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first1 < last1; i++) {
     98e:	3501      	adds	r5, #1
     990:	e7ca      	b.n	928 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xb4>

00000992 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
	virtual void handleEndpoint()
     992:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     994:	7a02      	ldrb	r2, [r0, #8]
		if (usbd.epBank0IsTransferComplete(ep))
     996:	6843      	ldr	r3, [r0, #4]
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     998:	0011      	movs	r1, r2
	virtual void handleEndpoint()
     99a:	0004      	movs	r4, r0
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     99c:	3108      	adds	r1, #8
     99e:	6818      	ldr	r0, [r3, #0]
     9a0:	0149      	lsls	r1, r1, #5
     9a2:	1841      	adds	r1, r0, r1
     9a4:	79c8      	ldrb	r0, [r1, #7]
		if (usbd.epBank0IsTransferComplete(ep))
     9a6:	07c0      	lsls	r0, r0, #31
     9a8:	d525      	bpl.n	9f6 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x64>
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
     9aa:	2501      	movs	r5, #1
     9ac:	0152      	lsls	r2, r2, #5
     9ae:	71cd      	strb	r5, [r1, #7]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     9b0:	189b      	adds	r3, r3, r2
     9b2:	689a      	ldr	r2, [r3, #8]
			if (incoming == 0) {
     9b4:	6961      	ldr	r1, [r4, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     9b6:	0492      	lsls	r2, r2, #18
     9b8:	0c92      	lsrs	r2, r2, #18
			if (incoming == 0) {
     9ba:	2900      	cmp	r1, #0
     9bc:	d11f      	bne.n	9fe <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x6c>
				last0 = usbd.epBank0ByteCount(ep);
     9be:	6222      	str	r2, [r4, #32]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     9c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
				incoming = 1;
     9c2:	6165      	str	r5, [r4, #20]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     9c4:	605a      	str	r2, [r3, #4]
				ready0 = true;
     9c6:	1d63      	adds	r3, r4, #5
     9c8:	77dd      	strb	r5, [r3, #31]
				synchronized {
     9ca:	4668      	mov	r0, sp
     9cc:	f7ff fef2 	bl	7b4 <_ZN7__GuardC1Ev>
					if (ready1) {
     9d0:	0025      	movs	r5, r4
     9d2:	0021      	movs	r1, r4
     9d4:	9b01      	ldr	r3, [sp, #4]
     9d6:	3534      	adds	r5, #52	; 0x34
     9d8:	3b01      	subs	r3, #1
     9da:	3135      	adds	r1, #53	; 0x35
				synchronized {
     9dc:	1c5a      	adds	r2, r3, #1
     9de:	d02b      	beq.n	a38 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xa6>
					if (ready1) {
     9e0:	782a      	ldrb	r2, [r5, #0]
     9e2:	1e58      	subs	r0, r3, #1
     9e4:	b2d2      	uxtb	r2, r2
     9e6:	2a00      	cmp	r2, #0
     9e8:	d006      	beq.n	9f8 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x66>
     9ea:	9301      	str	r3, [sp, #4]
						notify = true;
     9ec:	2301      	movs	r3, #1
     9ee:	700b      	strb	r3, [r1, #0]
						return;
     9f0:	4668      	mov	r0, sp
     9f2:	f7ff fee6 	bl	7c2 <_ZN7__GuardD1Ev>
	}
     9f6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
					notify = false;
     9f8:	700a      	strb	r2, [r1, #0]
				synchronized {
     9fa:	0003      	movs	r3, r0
     9fc:	e7ee      	b.n	9dc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x4a>
				last1 = usbd.epBank0ByteCount(ep);
     9fe:	6322      	str	r2, [r4, #48]	; 0x30
				incoming = 0;
     a00:	2200      	movs	r2, #0
     a02:	6162      	str	r2, [r4, #20]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     a04:	69a2      	ldr	r2, [r4, #24]
				synchronized {
     a06:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     a08:	605a      	str	r2, [r3, #4]
				synchronized {
     a0a:	f7ff fed3 	bl	7b4 <_ZN7__GuardC1Ev>
					ready1 = true;
     a0e:	0026      	movs	r6, r4
     a10:	0021      	movs	r1, r4
     a12:	9b01      	ldr	r3, [sp, #4]
     a14:	3634      	adds	r6, #52	; 0x34
     a16:	3b01      	subs	r3, #1
					if (ready0) {
     a18:	1d67      	adds	r7, r4, #5
     a1a:	3135      	adds	r1, #53	; 0x35
				synchronized {
     a1c:	1c5a      	adds	r2, r3, #1
     a1e:	d00b      	beq.n	a38 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xa6>
					ready1 = true;
     a20:	7035      	strb	r5, [r6, #0]
					if (ready0) {
     a22:	7ffa      	ldrb	r2, [r7, #31]
     a24:	1e58      	subs	r0, r3, #1
     a26:	b2d2      	uxtb	r2, r2
     a28:	2a00      	cmp	r2, #0
     a2a:	d002      	beq.n	a32 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xa0>
     a2c:	9301      	str	r3, [sp, #4]
						notify = true;
     a2e:	700d      	strb	r5, [r1, #0]
     a30:	e7de      	b.n	9f0 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x5e>
					notify = false;
     a32:	700a      	strb	r2, [r1, #0]
				synchronized {
     a34:	0003      	movs	r3, r0
     a36:	e7f1      	b.n	a1c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x8a>
     a38:	4668      	mov	r0, sp
     a3a:	9301      	str	r3, [sp, #4]
     a3c:	f7ff fec1 	bl	7c2 <_ZN7__GuardD1Ev>
			release();
     a40:	0020      	movs	r0, r4
     a42:	f7ff fef5 	bl	830 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     a46:	e7d6      	b.n	9f6 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x64>

00000a48 <_ZN14USBDeviceClass14SendInterfacesEPm>:
{
     a48:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
     a4a:	466b      	mov	r3, sp
     a4c:	1ddc      	adds	r4, r3, #7
     a4e:	2300      	movs	r3, #0
{
     a50:	000d      	movs	r5, r1
	total[0] += CDC_GetInterface(&interfaces);
     a52:	0020      	movs	r0, r4
	uint8_t interfaces = 0;
     a54:	7023      	strb	r3, [r4, #0]
	total[0] += CDC_GetInterface(&interfaces);
     a56:	f7ff fda7 	bl	5a8 <_Z16CDC_GetInterfacePh>
     a5a:	682b      	ldr	r3, [r5, #0]
     a5c:	1818      	adds	r0, r3, r0
     a5e:	6028      	str	r0, [r5, #0]
	total[0] += PluggableUSB().getInterface(&interfaces);
     a60:	f001 f9a8 	bl	1db4 <_Z12PluggableUSBv>
     a64:	0021      	movs	r1, r4
     a66:	f001 f961 	bl	1d2c <_ZN13PluggableUSB_12getInterfaceEPh>
     a6a:	682b      	ldr	r3, [r5, #0]
     a6c:	1818      	adds	r0, r3, r0
     a6e:	6028      	str	r0, [r5, #0]
	return interfaces;
     a70:	7820      	ldrb	r0, [r4, #0]
}
     a72:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00000a74 <_ZN14USBDeviceClass14handleEndpointEh>:
	if (ep == CDC_ENDPOINT_IN)
     a74:	2903      	cmp	r1, #3
     a76:	d10e      	bne.n	a96 <_ZN14USBDeviceClass14handleEndpointEh+0x22>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
     a78:	2280      	movs	r2, #128	; 0x80
     a7a:	4b0e      	ldr	r3, [pc, #56]	; (ab4 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
     a7c:	3162      	adds	r1, #98	; 0x62
     a7e:	681b      	ldr	r3, [r3, #0]
     a80:	31ff      	adds	r1, #255	; 0xff
     a82:	5c58      	ldrb	r0, [r3, r1]
     a84:	4252      	negs	r2, r2
     a86:	4302      	orrs	r2, r0
     a88:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     a8a:	2268      	movs	r2, #104	; 0x68
     a8c:	3963      	subs	r1, #99	; 0x63
     a8e:	39ff      	subs	r1, #255	; 0xff
     a90:	32ff      	adds	r2, #255	; 0xff
     a92:	5499      	strb	r1, [r3, r2]
}
     a94:	4770      	bx	lr
	if (ep == CDC_ENDPOINT_ACM)
     a96:	2901      	cmp	r1, #1
     a98:	d1fc      	bne.n	a94 <_ZN14USBDeviceClass14handleEndpointEh+0x20>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
     a9a:	2280      	movs	r2, #128	; 0x80
     a9c:	4b05      	ldr	r3, [pc, #20]	; (ab4 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
     a9e:	3124      	adds	r1, #36	; 0x24
     aa0:	681b      	ldr	r3, [r3, #0]
     aa2:	31ff      	adds	r1, #255	; 0xff
     aa4:	5c58      	ldrb	r0, [r3, r1]
     aa6:	4252      	negs	r2, r2
     aa8:	4302      	orrs	r2, r0
     aaa:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     aac:	3923      	subs	r1, #35	; 0x23
     aae:	39ff      	subs	r1, #255	; 0xff
     ab0:	2228      	movs	r2, #40	; 0x28
     ab2:	e7ed      	b.n	a90 <_ZN14USBDeviceClass14handleEndpointEh+0x1c>
     ab4:	200005f8 	.word	0x200005f8

00000ab8 <_ZN14USBDeviceClass4initEv>:
{
     ab8:	b570      	push	{r4, r5, r6, lr}
	txLEDPulse = 0;
     aba:	2500      	movs	r5, #0
     abc:	4b2f      	ldr	r3, [pc, #188]	; (b7c <_ZN14USBDeviceClass4initEv+0xc4>)
	pinMode(PIN_LED_TXL, OUTPUT);
     abe:	2101      	movs	r1, #1
{
     ac0:	0004      	movs	r4, r0
	pinMode(PIN_LED_TXL, OUTPUT);
     ac2:	201a      	movs	r0, #26
	txLEDPulse = 0;
     ac4:	701d      	strb	r5, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
     ac6:	f000 fe0f 	bl	16e8 <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
     aca:	2101      	movs	r1, #1
     acc:	201a      	movs	r0, #26
     ace:	f000 fe57 	bl	1780 <digitalWrite>
	rxLEDPulse = 0;
     ad2:	4b2b      	ldr	r3, [pc, #172]	; (b80 <_ZN14USBDeviceClass4initEv+0xc8>)
	pinMode(PIN_LED_RXL, OUTPUT);
     ad4:	2101      	movs	r1, #1
     ad6:	2019      	movs	r0, #25
	rxLEDPulse = 0;
     ad8:	701d      	strb	r5, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
     ada:	f000 fe05 	bl	16e8 <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
     ade:	2101      	movs	r1, #1
     ae0:	2019      	movs	r0, #25
     ae2:	f000 fe4d 	bl	1780 <digitalWrite>
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
     ae6:	2320      	movs	r3, #32
     ae8:	4a26      	ldr	r2, [pc, #152]	; (b84 <_ZN14USBDeviceClass4initEv+0xcc>)
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
     aea:	200f      	movs	r0, #15
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
     aec:	69d1      	ldr	r1, [r2, #28]
     aee:	430b      	orrs	r3, r1
     af0:	61d3      	str	r3, [r2, #28]
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
     af2:	2201      	movs	r2, #1
     af4:	4924      	ldr	r1, [pc, #144]	; (b88 <_ZN14USBDeviceClass4initEv+0xd0>)
     af6:	780b      	ldrb	r3, [r1, #0]
     af8:	4313      	orrs	r3, r2
     afa:	700b      	strb	r3, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
     afc:	4b23      	ldr	r3, [pc, #140]	; (b8c <_ZN14USBDeviceClass4initEv+0xd4>)
     afe:	7819      	ldrb	r1, [r3, #0]
     b00:	4381      	bics	r1, r0
     b02:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
     b04:	2106      	movs	r1, #6
     b06:	781d      	ldrb	r5, [r3, #0]
     b08:	4329      	orrs	r1, r5
     b0a:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
     b0c:	4920      	ldr	r1, [pc, #128]	; (b90 <_ZN14USBDeviceClass4initEv+0xd8>)
     b0e:	780d      	ldrb	r5, [r1, #0]
     b10:	432a      	orrs	r2, r5
     b12:	700a      	strb	r2, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
     b14:	781a      	ldrb	r2, [r3, #0]
     b16:	4002      	ands	r2, r0
     b18:	701a      	strb	r2, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
     b1a:	2260      	movs	r2, #96	; 0x60
     b1c:	7819      	ldrb	r1, [r3, #0]
     b1e:	430a      	orrs	r2, r1
     b20:	701a      	strb	r2, [r3, #0]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
     b22:	4b1c      	ldr	r3, [pc, #112]	; (b94 <_ZN14USBDeviceClass4initEv+0xdc>)
     b24:	4a1c      	ldr	r2, [pc, #112]	; (b98 <_ZN14USBDeviceClass4initEv+0xe0>)
     b26:	805a      	strh	r2, [r3, #2]
	while (GCLK->STATUS.bit.SYNCBUSY)
     b28:	785a      	ldrb	r2, [r3, #1]
     b2a:	09d2      	lsrs	r2, r2, #7
     b2c:	d1fc      	bne.n	b28 <_ZN14USBDeviceClass4initEv+0x70>
	USB_SetHandler(&UDD_Handler);
     b2e:	481b      	ldr	r0, [pc, #108]	; (b9c <_ZN14USBDeviceClass4initEv+0xe4>)
     b30:	f7ff fbb2 	bl	298 <USB_SetHandler>
	usbd.reset();
     b34:	4d1a      	ldr	r5, [pc, #104]	; (ba0 <_ZN14USBDeviceClass4initEv+0xe8>)
     b36:	0028      	movs	r0, r5
     b38:	f7ff fdfa 	bl	730 <_ZN20USBDevice_SAMD21G18x5resetEv>
	usbd.calibrate();
     b3c:	0028      	movs	r0, r5
     b3e:	f7ff fe09 	bl	754 <_ZN20USBDevice_SAMD21G18x9calibrateEv>
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
     b42:	217f      	movs	r1, #127	; 0x7f
     b44:	682b      	ldr	r3, [r5, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     b46:	20c1      	movs	r0, #193	; 0xc1
     b48:	781a      	ldrb	r2, [r3, #0]
     b4a:	0080      	lsls	r0, r0, #2
     b4c:	400a      	ands	r2, r1
     b4e:	701a      	strb	r2, [r3, #0]
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
     b50:	2204      	movs	r2, #4
     b52:	7819      	ldrb	r1, [r3, #0]
     b54:	430a      	orrs	r2, r1
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
     b56:	210c      	movs	r1, #12
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
     b58:	701a      	strb	r2, [r3, #0]
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
     b5a:	891a      	ldrh	r2, [r3, #8]
     b5c:	438a      	bics	r2, r1
     b5e:	4911      	ldr	r1, [pc, #68]	; (ba4 <_ZN14USBDeviceClass4initEv+0xec>)
     b60:	811a      	strh	r2, [r3, #8]
     b62:	580a      	ldr	r2, [r1, r0]
     b64:	0212      	lsls	r2, r2, #8
     b66:	0a12      	lsrs	r2, r2, #8
     b68:	500a      	str	r2, [r1, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     b6a:	2280      	movs	r2, #128	; 0x80
     b6c:	600a      	str	r2, [r1, #0]
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
     b6e:	7819      	ldrb	r1, [r3, #0]
     b70:	3a7e      	subs	r2, #126	; 0x7e
     b72:	430a      	orrs	r2, r1
     b74:	701a      	strb	r2, [r3, #0]
	initialized = true;
     b76:	2301      	movs	r3, #1
     b78:	7023      	strb	r3, [r4, #0]
}
     b7a:	bd70      	pop	{r4, r5, r6, pc}
     b7c:	20000161 	.word	0x20000161
     b80:	20000160 	.word	0x20000160
     b84:	40000400 	.word	0x40000400
     b88:	41004458 	.word	0x41004458
     b8c:	4100443c 	.word	0x4100443c
     b90:	41004459 	.word	0x41004459
     b94:	40000c00 	.word	0x40000c00
     b98:	00004006 	.word	0x00004006
     b9c:	00001575 	.word	0x00001575
     ba0:	200005f8 	.word	0x200005f8
     ba4:	e000e100 	.word	0xe000e100

00000ba8 <_ZN14USBDeviceClass6attachEv>:
	if (!initialized)
     ba8:	7800      	ldrb	r0, [r0, #0]
     baa:	2800      	cmp	r0, #0
     bac:	d010      	beq.n	bd0 <_ZN14USBDeviceClass6attachEv+0x28>
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
     bae:	2101      	movs	r1, #1
     bb0:	4b08      	ldr	r3, [pc, #32]	; (bd4 <_ZN14USBDeviceClass6attachEv+0x2c>)
     bb2:	681b      	ldr	r3, [r3, #0]
     bb4:	891a      	ldrh	r2, [r3, #8]
     bb6:	438a      	bics	r2, r1
     bb8:	811a      	strh	r2, [r3, #8]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
     bba:	2208      	movs	r2, #8
     bbc:	8b19      	ldrh	r1, [r3, #24]
     bbe:	430a      	orrs	r2, r1
     bc0:	831a      	strh	r2, [r3, #24]
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
     bc2:	2204      	movs	r2, #4
     bc4:	8b19      	ldrh	r1, [r3, #24]
     bc6:	430a      	orrs	r2, r1
     bc8:	831a      	strh	r2, [r3, #24]
	_usbConfiguration = 0;
     bca:	2200      	movs	r2, #0
     bcc:	4b02      	ldr	r3, [pc, #8]	; (bd8 <_ZN14USBDeviceClass6attachEv+0x30>)
     bce:	601a      	str	r2, [r3, #0]
}
     bd0:	4770      	bx	lr
     bd2:	46c0      	nop			; (mov r8, r8)
     bd4:	200005f8 	.word	0x200005f8
     bd8:	200005f0 	.word	0x200005f0

00000bdc <_ZN14USBDeviceClass10setAddressEm>:
{
     bdc:	b510      	push	{r4, lr}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     bde:	4a0f      	ldr	r2, [pc, #60]	; (c1c <_ZN14USBDeviceClass10setAddressEm+0x40>)
     be0:	6993      	ldr	r3, [r2, #24]
     be2:	0b9b      	lsrs	r3, r3, #14
     be4:	039b      	lsls	r3, r3, #14
     be6:	6193      	str	r3, [r2, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     be8:	6813      	ldr	r3, [r2, #0]
     bea:	2202      	movs	r2, #2
     bec:	33ff      	adds	r3, #255	; 0xff
     bee:	721a      	strb	r2, [r3, #8]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
     bf0:	7998      	ldrb	r0, [r3, #6]
     bf2:	3a82      	subs	r2, #130	; 0x82
     bf4:	4302      	orrs	r2, r0
     bf6:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
     bf8:	7a1a      	ldrb	r2, [r3, #8]
	while (!usbd.epBank1IsTransferComplete(0)) {}
     bfa:	0792      	lsls	r2, r2, #30
     bfc:	d5fc      	bpl.n	bf8 <_ZN14USBDeviceClass10setAddressEm+0x1c>
	USB->DEVICE.DADD.bit.DADD = addr; // Address
     bfe:	247f      	movs	r4, #127	; 0x7f
     c00:	4a07      	ldr	r2, [pc, #28]	; (c20 <_ZN14USBDeviceClass10setAddressEm+0x44>)
     c02:	4021      	ands	r1, r4
     c04:	7a93      	ldrb	r3, [r2, #10]
     c06:	0008      	movs	r0, r1
     c08:	43a3      	bics	r3, r4
     c0a:	0019      	movs	r1, r3
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
     c0c:	2380      	movs	r3, #128	; 0x80
	USB->DEVICE.DADD.bit.DADD = addr; // Address
     c0e:	4301      	orrs	r1, r0
     c10:	7291      	strb	r1, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
     c12:	7a91      	ldrb	r1, [r2, #10]
     c14:	425b      	negs	r3, r3
     c16:	430b      	orrs	r3, r1
     c18:	7293      	strb	r3, [r2, #10]
}
     c1a:	bd10      	pop	{r4, pc}
     c1c:	200005f8 	.word	0x200005f8
     c20:	41005000 	.word	0x41005000

00000c24 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
     c24:	b510      	push	{r4, lr}
	if (CDC_ACM_INTERFACE == i)
     c26:	790b      	ldrb	r3, [r1, #4]
{
     c28:	000c      	movs	r4, r1
	if (CDC_ACM_INTERFACE == i)
     c2a:	2b00      	cmp	r3, #0
     c2c:	d10c      	bne.n	c48 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x24>
		if (CDC_Setup(setup) == false) {
     c2e:	0008      	movs	r0, r1
     c30:	f7ff fcc8 	bl	5c4 <_Z9CDC_SetupR8USBSetup>
     c34:	2800      	cmp	r0, #0
     c36:	d001      	beq.n	c3c <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x18>
		return true;
     c38:	2001      	movs	r0, #1
}
     c3a:	bd10      	pop	{r4, pc}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     c3c:	4a09      	ldr	r2, [pc, #36]	; (c64 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
     c3e:	6993      	ldr	r3, [r2, #24]
     c40:	0b9b      	lsrs	r3, r3, #14
     c42:	039b      	lsls	r3, r3, #14
     c44:	6193      	str	r3, [r2, #24]
     c46:	e7f7      	b.n	c38 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
	bool ret = PluggableUSB().setup(setup);
     c48:	f001 f8b4 	bl	1db4 <_Z12PluggableUSBv>
     c4c:	0021      	movs	r1, r4
     c4e:	f001 f8a0 	bl	1d92 <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
     c52:	2800      	cmp	r0, #0
     c54:	d1f0      	bne.n	c38 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
     c56:	4a03      	ldr	r2, [pc, #12]	; (c64 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
     c58:	6993      	ldr	r3, [r2, #24]
     c5a:	0b9b      	lsrs	r3, r3, #14
     c5c:	039b      	lsls	r3, r3, #14
     c5e:	6193      	str	r3, [r2, #24]
     c60:	e7eb      	b.n	c3a <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x16>
     c62:	46c0      	nop			; (mov r8, r8)
     c64:	200005f8 	.word	0x200005f8

00000c68 <_ZN14USBDeviceClass6initEPEmm>:
{
     c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     c6a:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
     c6c:	2a83      	cmp	r2, #131	; 0x83
     c6e:	d119      	bne.n	ca4 <_ZN14USBDeviceClass6initEPEmm+0x3c>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     c70:	b2cb      	uxtb	r3, r1
     c72:	4c40      	ldr	r4, [pc, #256]	; (d74 <_ZN14USBDeviceClass6initEPEmm+0x10c>)
     c74:	015a      	lsls	r2, r3, #5
     c76:	18a2      	adds	r2, r4, r2
     c78:	6991      	ldr	r1, [r2, #24]
     c7a:	483f      	ldr	r0, [pc, #252]	; (d78 <_ZN14USBDeviceClass6initEPEmm+0x110>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
     c7c:	01ad      	lsls	r5, r5, #6
     c7e:	4008      	ands	r0, r1
     c80:	21c0      	movs	r1, #192	; 0xc0
     c82:	0589      	lsls	r1, r1, #22
     c84:	4301      	orrs	r1, r0
     c86:	6191      	str	r1, [r2, #24]
     c88:	493c      	ldr	r1, [pc, #240]	; (d7c <_ZN14USBDeviceClass6initEPEmm+0x114>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     c8a:	6820      	ldr	r0, [r4, #0]
     c8c:	194d      	adds	r5, r1, r5
     c8e:	2170      	movs	r1, #112	; 0x70
     c90:	3308      	adds	r3, #8
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     c92:	6155      	str	r5, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     c94:	015b      	lsls	r3, r3, #5
     c96:	5c1a      	ldrb	r2, [r3, r0]
     c98:	438a      	bics	r2, r1
     c9a:	0011      	movs	r1, r2
     c9c:	2240      	movs	r2, #64	; 0x40
     c9e:	430a      	orrs	r2, r1
     ca0:	541a      	strb	r2, [r3, r0]
}
     ca2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
     ca4:	2a02      	cmp	r2, #2
     ca6:	d13d      	bne.n	d24 <_ZN14USBDeviceClass6initEPEmm+0xbc>
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
     ca8:	2038      	movs	r0, #56	; 0x38
     caa:	f000 fe71 	bl	1990 <_Znwj>
		notify(false)
     cae:	4b34      	ldr	r3, [pc, #208]	; (d80 <_ZN14USBDeviceClass6initEPEmm+0x118>)
     cb0:	2780      	movs	r7, #128	; 0x80
     cb2:	6003      	str	r3, [r0, #0]
     cb4:	2300      	movs	r3, #0
     cb6:	4e2f      	ldr	r6, [pc, #188]	; (d74 <_ZN14USBDeviceClass6initEPEmm+0x10c>)
     cb8:	007f      	lsls	r7, r7, #1
     cba:	1d42      	adds	r2, r0, #5
     cbc:	6203      	str	r3, [r0, #32]
     cbe:	6103      	str	r3, [r0, #16]
     cc0:	6143      	str	r3, [r0, #20]
     cc2:	61c3      	str	r3, [r0, #28]
     cc4:	6046      	str	r6, [r0, #4]
     cc6:	6085      	str	r5, [r0, #8]
     cc8:	60c7      	str	r7, [r0, #12]
     cca:	77d3      	strb	r3, [r2, #31]
     ccc:	322f      	adds	r2, #47	; 0x2f
     cce:	62c3      	str	r3, [r0, #44]	; 0x2c
     cd0:	6303      	str	r3, [r0, #48]	; 0x30
     cd2:	0004      	movs	r4, r0
     cd4:	7013      	strb	r3, [r2, #0]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
     cd6:	0038      	movs	r0, r7
		notify(false)
     cd8:	7053      	strb	r3, [r2, #1]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
     cda:	f001 f99d 	bl	2018 <malloc>
     cde:	9001      	str	r0, [sp, #4]
     ce0:	61a0      	str	r0, [r4, #24]
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
     ce2:	0038      	movs	r0, r7
     ce4:	f001 f998 	bl	2018 <malloc>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     ce8:	b2eb      	uxtb	r3, r5
     cea:	015a      	lsls	r2, r3, #5
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
     cec:	62a0      	str	r0, [r4, #40]	; 0x28
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     cee:	18b2      	adds	r2, r6, r2
     cf0:	6891      	ldr	r1, [r2, #8]
     cf2:	4821      	ldr	r0, [pc, #132]	; (d78 <_ZN14USBDeviceClass6initEPEmm+0x110>)
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     cf4:	3308      	adds	r3, #8
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     cf6:	4008      	ands	r0, r1
     cf8:	21c0      	movs	r1, #192	; 0xc0
     cfa:	0589      	lsls	r1, r1, #22
     cfc:	4301      	orrs	r1, r0
     cfe:	6091      	str	r1, [r2, #8]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     d00:	6830      	ldr	r0, [r6, #0]
     d02:	2607      	movs	r6, #7
     d04:	015b      	lsls	r3, r3, #5
     d06:	5c19      	ldrb	r1, [r3, r0]
     d08:	00ad      	lsls	r5, r5, #2
     d0a:	43b1      	bics	r1, r6
     d0c:	000e      	movs	r6, r1
     d0e:	2103      	movs	r1, #3
     d10:	4331      	orrs	r1, r6
     d12:	5419      	strb	r1, [r3, r0]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     d14:	9b01      	ldr	r3, [sp, #4]
		release();
     d16:	0020      	movs	r0, r4
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     d18:	6053      	str	r3, [r2, #4]
		release();
     d1a:	f7ff fd89 	bl	830 <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     d1e:	4b19      	ldr	r3, [pc, #100]	; (d84 <_ZN14USBDeviceClass6initEPEmm+0x11c>)
     d20:	50ec      	str	r4, [r5, r3]
     d22:	e7be      	b.n	ca2 <_ZN14USBDeviceClass6initEPEmm+0x3a>
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
     d24:	2a82      	cmp	r2, #130	; 0x82
     d26:	d11f      	bne.n	d68 <_ZN14USBDeviceClass6initEPEmm+0x100>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     d28:	b2cb      	uxtb	r3, r1
     d2a:	4c12      	ldr	r4, [pc, #72]	; (d74 <_ZN14USBDeviceClass6initEPEmm+0x10c>)
     d2c:	015a      	lsls	r2, r3, #5
     d2e:	18a2      	adds	r2, r4, r2
     d30:	6991      	ldr	r1, [r2, #24]
     d32:	4811      	ldr	r0, [pc, #68]	; (d78 <_ZN14USBDeviceClass6initEPEmm+0x110>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
     d34:	01ad      	lsls	r5, r5, #6
     d36:	4008      	ands	r0, r1
     d38:	21c0      	movs	r1, #192	; 0xc0
     d3a:	0589      	lsls	r1, r1, #22
     d3c:	4301      	orrs	r1, r0
     d3e:	6191      	str	r1, [r2, #24]
     d40:	490e      	ldr	r1, [pc, #56]	; (d7c <_ZN14USBDeviceClass6initEPEmm+0x114>)
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
     d42:	3308      	adds	r3, #8
     d44:	194d      	adds	r5, r1, r5
     d46:	2180      	movs	r1, #128	; 0x80
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     d48:	6155      	str	r5, [r2, #20]
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
     d4a:	6822      	ldr	r2, [r4, #0]
     d4c:	015b      	lsls	r3, r3, #5
     d4e:	18d0      	adds	r0, r2, r3
     d50:	7904      	ldrb	r4, [r0, #4]
     d52:	4249      	negs	r1, r1
     d54:	4321      	orrs	r1, r4
     d56:	7101      	strb	r1, [r0, #4]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     d58:	2070      	movs	r0, #112	; 0x70
     d5a:	5c99      	ldrb	r1, [r3, r2]
     d5c:	4381      	bics	r1, r0
     d5e:	0008      	movs	r0, r1
     d60:	2130      	movs	r1, #48	; 0x30
     d62:	4301      	orrs	r1, r0
     d64:	5499      	strb	r1, [r3, r2]
     d66:	e79c      	b.n	ca2 <_ZN14USBDeviceClass6initEPEmm+0x3a>
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
     d68:	2a00      	cmp	r2, #0
     d6a:	d19a      	bne.n	ca2 <_ZN14USBDeviceClass6initEPEmm+0x3a>
     d6c:	0008      	movs	r0, r1
     d6e:	f7ff fc9b 	bl	6a8 <_ZN14USBDeviceClass6initEPEmm.part.5>
}
     d72:	e796      	b.n	ca2 <_ZN14USBDeviceClass6initEPEmm+0x3a>
     d74:	200005f8 	.word	0x200005f8
     d78:	8fffffff 	.word	0x8fffffff
     d7c:	2000016c 	.word	0x2000016c
     d80:	000021a8 	.word	0x000021a8
     d84:	20000144 	.word	0x20000144

00000d88 <_ZN14USBDeviceClass13initEndpointsEv>:
void USBDeviceClass::initEndpoints() {
     d88:	b570      	push	{r4, r5, r6, lr}
     d8a:	0005      	movs	r5, r0
     d8c:	2401      	movs	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
     d8e:	4b06      	ldr	r3, [pc, #24]	; (da8 <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
     d90:	00a2      	lsls	r2, r4, #2
     d92:	58d2      	ldr	r2, [r2, r3]
     d94:	2a00      	cmp	r2, #0
     d96:	d005      	beq.n	da4 <_ZN14USBDeviceClass13initEndpointsEv+0x1c>
		initEP(i, EndPoints[i]);
     d98:	0021      	movs	r1, r4
     d9a:	0028      	movs	r0, r5
     d9c:	f7ff ff64 	bl	c68 <_ZN14USBDeviceClass6initEPEmm>
     da0:	3401      	adds	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
     da2:	e7f4      	b.n	d8e <_ZN14USBDeviceClass13initEndpointsEv+0x6>
}
     da4:	bd70      	pop	{r4, r5, r6, pc}
     da6:	46c0      	nop			; (mov r8, r8)
     da8:	20000058 	.word	0x20000058

00000dac <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
     dac:	4b08      	ldr	r3, [pc, #32]	; (dd0 <_ZN14USBDeviceClass9availableEm+0x24>)
     dae:	008a      	lsls	r2, r1, #2
     db0:	58d0      	ldr	r0, [r2, r3]
{
     db2:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
     db4:	2800      	cmp	r0, #0
     db6:	d003      	beq.n	dc0 <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
     db8:	6803      	ldr	r3, [r0, #0]
     dba:	689b      	ldr	r3, [r3, #8]
     dbc:	4798      	blx	r3
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
     dbe:	bd10      	pop	{r4, pc}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     dc0:	b2c9      	uxtb	r1, r1
     dc2:	4b04      	ldr	r3, [pc, #16]	; (dd4 <_ZN14USBDeviceClass9availableEm+0x28>)
     dc4:	0149      	lsls	r1, r1, #5
     dc6:	1859      	adds	r1, r3, r1
     dc8:	6888      	ldr	r0, [r1, #8]
     dca:	0480      	lsls	r0, r0, #18
     dcc:	0c80      	lsrs	r0, r0, #18
		return usbd.epBank0ByteCount(ep);
     dce:	e7f6      	b.n	dbe <_ZN14USBDeviceClass9availableEm+0x12>
     dd0:	20000144 	.word	0x20000144
     dd4:	200005f8 	.word	0x200005f8

00000dd8 <_ZN14USBDeviceClass5flushEm>:
{
     dd8:	b510      	push	{r4, lr}
     dda:	000c      	movs	r4, r1
	if (available(ep)) {
     ddc:	f7ff ffe6 	bl	dac <_ZN14USBDeviceClass9availableEm>
     de0:	2800      	cmp	r0, #0
     de2:	d00c      	beq.n	dfe <_ZN14USBDeviceClass5flushEm+0x26>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
     de4:	4b06      	ldr	r3, [pc, #24]	; (e00 <_ZN14USBDeviceClass5flushEm+0x28>)
     de6:	b2e4      	uxtb	r4, r4
     de8:	681b      	ldr	r3, [r3, #0]
     dea:	3408      	adds	r4, #8
     dec:	0164      	lsls	r4, r4, #5
     dee:	191c      	adds	r4, r3, r4
     df0:	2380      	movs	r3, #128	; 0x80
     df2:	7962      	ldrb	r2, [r4, #5]
     df4:	425b      	negs	r3, r3
     df6:	4313      	orrs	r3, r2
     df8:	7163      	strb	r3, [r4, #5]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     dfa:	2302      	movs	r3, #2
     dfc:	71e3      	strb	r3, [r4, #7]
}
     dfe:	bd10      	pop	{r4, pc}
     e00:	200005f8 	.word	0x200005f8

00000e04 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:
		return c;
	}
}

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
     e04:	b570      	push	{r4, r5, r6, lr}
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
     e06:	4b13      	ldr	r3, [pc, #76]	; (e54 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x50>)
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     e08:	b2cc      	uxtb	r4, r1
     e0a:	4a13      	ldr	r2, [pc, #76]	; (e58 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
     e0c:	0160      	lsls	r0, r4, #5
     e0e:	0189      	lsls	r1, r1, #6
     e10:	1859      	adds	r1, r3, r1
     e12:	1813      	adds	r3, r2, r0
     e14:	6059      	str	r1, [r3, #4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     e16:	6899      	ldr	r1, [r3, #8]
     e18:	4d10      	ldr	r5, [pc, #64]	; (e5c <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     e1a:	3408      	adds	r4, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     e1c:	400d      	ands	r5, r1
     e1e:	2180      	movs	r1, #128	; 0x80
     e20:	0289      	lsls	r1, r1, #10
     e22:	4329      	orrs	r1, r5
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     e24:	2540      	movs	r5, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     e26:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     e28:	6899      	ldr	r1, [r3, #8]
     e2a:	0b89      	lsrs	r1, r1, #14
     e2c:	0389      	lsls	r1, r1, #14
     e2e:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     e30:	6811      	ldr	r1, [r2, #0]
     e32:	0163      	lsls	r3, r4, #5
     e34:	18cb      	adds	r3, r1, r3
     e36:	791e      	ldrb	r6, [r3, #4]
     e38:	4335      	orrs	r5, r6
     e3a:	711d      	strb	r5, [r3, #4]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
     e3c:	799d      	ldrb	r5, [r3, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
     e3e:	066d      	lsls	r5, r5, #25
     e40:	d5fc      	bpl.n	e3c <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     e42:	0164      	lsls	r4, r4, #5
     e44:	1909      	adds	r1, r1, r4
     e46:	79cb      	ldrb	r3, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
     e48:	07db      	lsls	r3, r3, #31
     e4a:	d5fc      	bpl.n	e46 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     e4c:	1812      	adds	r2, r2, r0
     e4e:	6890      	ldr	r0, [r2, #8]
	return usbd.epBank0ByteCount(ep);
     e50:	b2c0      	uxtb	r0, r0
}
     e52:	bd70      	pop	{r4, r5, r6, pc}
     e54:	2000032c 	.word	0x2000032c
     e58:	200005f8 	.word	0x200005f8
     e5c:	f0003fff 	.word	0xf0003fff

00000e60 <_ZN14USBDeviceClass11recvControlEPvm>:
{
     e60:	b570      	push	{r4, r5, r6, lr}
     e62:	0014      	movs	r4, r2
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     e64:	2240      	movs	r2, #64	; 0x40
     e66:	4b0b      	ldr	r3, [pc, #44]	; (e94 <_ZN14USBDeviceClass11recvControlEPvm+0x34>)
     e68:	000d      	movs	r5, r1
     e6a:	681b      	ldr	r3, [r3, #0]
     e6c:	33ff      	adds	r3, #255	; 0xff
     e6e:	7959      	ldrb	r1, [r3, #5]
     e70:	430a      	orrs	r2, r1
     e72:	715a      	strb	r2, [r3, #5]
	uint32_t read = armRecvCtrlOUT(0);
     e74:	2100      	movs	r1, #0
     e76:	f7ff ffc5 	bl	e04 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
     e7a:	42a0      	cmp	r0, r4
     e7c:	d900      	bls.n	e80 <_ZN14USBDeviceClass11recvControlEPvm+0x20>
     e7e:	0020      	movs	r0, r4
	for (uint32_t i=0; i<len; i++) {
     e80:	2300      	movs	r3, #0
		data[i] = buffer[i];
     e82:	4905      	ldr	r1, [pc, #20]	; (e98 <_ZN14USBDeviceClass11recvControlEPvm+0x38>)
	for (uint32_t i=0; i<len; i++) {
     e84:	42a3      	cmp	r3, r4
     e86:	d003      	beq.n	e90 <_ZN14USBDeviceClass11recvControlEPvm+0x30>
		data[i] = buffer[i];
     e88:	5c5a      	ldrb	r2, [r3, r1]
     e8a:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i=0; i<len; i++) {
     e8c:	3301      	adds	r3, #1
     e8e:	e7f9      	b.n	e84 <_ZN14USBDeviceClass11recvControlEPvm+0x24>
}
     e90:	bd70      	pop	{r4, r5, r6, pc}
     e92:	46c0      	nop			; (mov r8, r8)
     e94:	200005f8 	.word	0x200005f8
     e98:	2000032c 	.word	0x2000032c

00000e9c <_ZN14USBDeviceClass7armRecvEm>:

uint8_t USBDeviceClass::armRecv(uint32_t ep)
{
     e9c:	b510      	push	{r4, lr}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     e9e:	b2c9      	uxtb	r1, r1
     ea0:	480b      	ldr	r0, [pc, #44]	; (ed0 <_ZN14USBDeviceClass7armRecvEm+0x34>)
     ea2:	0149      	lsls	r1, r1, #5
     ea4:	1842      	adds	r2, r0, r1
     ea6:	6893      	ldr	r3, [r2, #8]
     ea8:	049b      	lsls	r3, r3, #18
     eaa:	0c9b      	lsrs	r3, r3, #18
	uint16_t count = usbd.epBank0ByteCount(ep);
	if (count >= 64) {
     eac:	2b3f      	cmp	r3, #63	; 0x3f
     eae:	dd0b      	ble.n	ec8 <_ZN14USBDeviceClass7armRecvEm+0x2c>
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     eb0:	6894      	ldr	r4, [r2, #8]
		usbd.epBank0SetByteCount(ep, count - 64);
     eb2:	3b40      	subs	r3, #64	; 0x40
     eb4:	049b      	lsls	r3, r3, #18
     eb6:	0ba4      	lsrs	r4, r4, #14
     eb8:	0c9b      	lsrs	r3, r3, #18
     eba:	03a4      	lsls	r4, r4, #14
     ebc:	4323      	orrs	r3, r4
     ebe:	6093      	str	r3, [r2, #8]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     ec0:	1841      	adds	r1, r0, r1
     ec2:	6888      	ldr	r0, [r1, #8]
	} else {
		usbd.epBank0SetByteCount(ep, 0);
	}
	return usbd.epBank0ByteCount(ep);
     ec4:	b2c0      	uxtb	r0, r0
}
     ec6:	bd10      	pop	{r4, pc}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     ec8:	6893      	ldr	r3, [r2, #8]
     eca:	0b9b      	lsrs	r3, r3, #14
     ecc:	039b      	lsls	r3, r3, #14
     ece:	e7f6      	b.n	ebe <_ZN14USBDeviceClass7armRecvEm+0x22>
     ed0:	200005f8 	.word	0x200005f8

00000ed4 <_ZN14USBDeviceClass4recvEmPvm>:
{
     ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ed6:	001c      	movs	r4, r3
	if (!_usbConfiguration)
     ed8:	4b30      	ldr	r3, [pc, #192]	; (f9c <_ZN14USBDeviceClass4recvEmPvm+0xc8>)
{
     eda:	b085      	sub	sp, #20
	if (!_usbConfiguration)
     edc:	681b      	ldr	r3, [r3, #0]
{
     ede:	0006      	movs	r6, r0
     ee0:	000d      	movs	r5, r1
     ee2:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
     ee4:	2b00      	cmp	r3, #0
     ee6:	d055      	beq.n	f94 <_ZN14USBDeviceClass4recvEmPvm+0xc0>
	if (rxLEDPulse == 0)
     ee8:	4f2d      	ldr	r7, [pc, #180]	; (fa0 <_ZN14USBDeviceClass4recvEmPvm+0xcc>)
     eea:	7839      	ldrb	r1, [r7, #0]
     eec:	b2c9      	uxtb	r1, r1
     eee:	2900      	cmp	r1, #0
     ef0:	d102      	bne.n	ef8 <_ZN14USBDeviceClass4recvEmPvm+0x24>
		digitalWrite(PIN_LED_RXL, LOW);
     ef2:	2019      	movs	r0, #25
     ef4:	f000 fc44 	bl	1780 <digitalWrite>
	rxLEDPulse = TX_RX_LED_PULSE_MS;
     ef8:	2364      	movs	r3, #100	; 0x64
     efa:	703b      	strb	r3, [r7, #0]
	if (epHandlers[ep]) {
     efc:	4b29      	ldr	r3, [pc, #164]	; (fa4 <_ZN14USBDeviceClass4recvEmPvm+0xd0>)
     efe:	00aa      	lsls	r2, r5, #2
     f00:	58d0      	ldr	r0, [r2, r3]
     f02:	2800      	cmp	r0, #0
     f04:	d008      	beq.n	f18 <_ZN14USBDeviceClass4recvEmPvm+0x44>
		return epHandlers[ep]->recv(_data, len);
     f06:	6803      	ldr	r3, [r0, #0]
     f08:	0022      	movs	r2, r4
     f0a:	685b      	ldr	r3, [r3, #4]
     f0c:	9901      	ldr	r1, [sp, #4]
     f0e:	4798      	blx	r3
     f10:	0004      	movs	r4, r0
}
     f12:	0020      	movs	r0, r4
     f14:	b005      	add	sp, #20
     f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (available(ep) < len)
     f18:	0029      	movs	r1, r5
     f1a:	0030      	movs	r0, r6
     f1c:	f7ff ff46 	bl	dac <_ZN14USBDeviceClass9availableEm>
     f20:	4284      	cmp	r4, r0
     f22:	d904      	bls.n	f2e <_ZN14USBDeviceClass4recvEmPvm+0x5a>
		len = available(ep);
     f24:	0029      	movs	r1, r5
     f26:	0030      	movs	r0, r6
     f28:	f7ff ff40 	bl	dac <_ZN14USBDeviceClass9availableEm>
     f2c:	0004      	movs	r4, r0
	armRecv(ep);
     f2e:	0029      	movs	r1, r5
     f30:	0030      	movs	r0, r6
     f32:	f7ff ffb3 	bl	e9c <_ZN14USBDeviceClass7armRecvEm>
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
     f36:	2101      	movs	r1, #1
     f38:	b2eb      	uxtb	r3, r5
     f3a:	4f1b      	ldr	r7, [pc, #108]	; (fa8 <_ZN14USBDeviceClass4recvEmPvm+0xd4>)
     f3c:	9303      	str	r3, [sp, #12]
     f3e:	015b      	lsls	r3, r3, #5
     f40:	9302      	str	r3, [sp, #8]
     f42:	9a02      	ldr	r2, [sp, #8]
     f44:	683b      	ldr	r3, [r7, #0]
	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
     f46:	9801      	ldr	r0, [sp, #4]
     f48:	189b      	adds	r3, r3, r2
     f4a:	33ff      	adds	r3, #255	; 0xff
     f4c:	7a5a      	ldrb	r2, [r3, #9]
     f4e:	430a      	orrs	r2, r1
     f50:	4916      	ldr	r1, [pc, #88]	; (fac <_ZN14USBDeviceClass4recvEmPvm+0xd8>)
     f52:	725a      	strb	r2, [r3, #9]
     f54:	01ab      	lsls	r3, r5, #6
     f56:	18c9      	adds	r1, r1, r3
     f58:	0022      	movs	r2, r4
     f5a:	f001 f867 	bl	202c <memcpy>
	if (len && !available(ep)) {
     f5e:	2c00      	cmp	r4, #0
     f60:	d0d7      	beq.n	f12 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
     f62:	0029      	movs	r1, r5
     f64:	0030      	movs	r0, r6
     f66:	f7ff ff21 	bl	dac <_ZN14USBDeviceClass9availableEm>
     f6a:	2800      	cmp	r0, #0
     f6c:	d1d1      	bne.n	f12 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     f6e:	2140      	movs	r1, #64	; 0x40
     f70:	9b03      	ldr	r3, [sp, #12]
     f72:	683a      	ldr	r2, [r7, #0]
     f74:	3308      	adds	r3, #8
     f76:	015b      	lsls	r3, r3, #5
     f78:	18d3      	adds	r3, r2, r3
     f7a:	7918      	ldrb	r0, [r3, #4]
     f7c:	4301      	orrs	r1, r0
     f7e:	7119      	strb	r1, [r3, #4]
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
     f80:	2101      	movs	r1, #1
     f82:	71d9      	strb	r1, [r3, #7]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     f84:	2101      	movs	r1, #1
     f86:	9b02      	ldr	r3, [sp, #8]
     f88:	18d3      	adds	r3, r2, r3
     f8a:	33ff      	adds	r3, #255	; 0xff
     f8c:	7a9a      	ldrb	r2, [r3, #10]
     f8e:	430a      	orrs	r2, r1
     f90:	729a      	strb	r2, [r3, #10]
     f92:	e7be      	b.n	f12 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
		return -1;
     f94:	2401      	movs	r4, #1
     f96:	4264      	negs	r4, r4
     f98:	e7bb      	b.n	f12 <_ZN14USBDeviceClass4recvEmPvm+0x3e>
     f9a:	46c0      	nop			; (mov r8, r8)
     f9c:	200005f0 	.word	0x200005f0
     fa0:	20000160 	.word	0x20000160
     fa4:	20000144 	.word	0x20000144
     fa8:	200005f8 	.word	0x200005f8
     fac:	2000032c 	.word	0x2000032c

00000fb0 <_ZN14USBDeviceClass4recvEm>:
{
     fb0:	b513      	push	{r0, r1, r4, lr}
	if (recv(ep, &c, 1) != 1) {
     fb2:	466b      	mov	r3, sp
     fb4:	1ddc      	adds	r4, r3, #7
     fb6:	0022      	movs	r2, r4
     fb8:	2301      	movs	r3, #1
     fba:	f7ff ff8b 	bl	ed4 <_ZN14USBDeviceClass4recvEmPvm>
     fbe:	2801      	cmp	r0, #1
     fc0:	d101      	bne.n	fc6 <_ZN14USBDeviceClass4recvEm+0x16>
		return c;
     fc2:	7820      	ldrb	r0, [r4, #0]
}
     fc4:	bd16      	pop	{r1, r2, r4, pc}
		return -1;
     fc6:	2001      	movs	r0, #1
     fc8:	4240      	negs	r0, r0
     fca:	e7fb      	b.n	fc4 <_ZN14USBDeviceClass4recvEm+0x14>

00000fcc <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
     fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
     fce:	001e      	movs	r6, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
     fd0:	4b3a      	ldr	r3, [pc, #232]	; (10bc <_ZN14USBDeviceClass4sendEmPKvm+0xf0>)
{
     fd2:	b085      	sub	sp, #20
	if (!_usbConfiguration)
     fd4:	681b      	ldr	r3, [r3, #0]
{
     fd6:	000f      	movs	r7, r1
     fd8:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
     fda:	2b00      	cmp	r3, #0
     fdc:	d03f      	beq.n	105e <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;
	if (len > 16384)
     fde:	2380      	movs	r3, #128	; 0x80
     fe0:	01db      	lsls	r3, r3, #7
     fe2:	429e      	cmp	r6, r3
     fe4:	d83b      	bhi.n	105e <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
     fe6:	4c36      	ldr	r4, [pc, #216]	; (10c0 <_ZN14USBDeviceClass4sendEmPKvm+0xf4>)
     fe8:	7821      	ldrb	r1, [r4, #0]
     fea:	b2c9      	uxtb	r1, r1
     fec:	2900      	cmp	r1, #0
     fee:	d102      	bne.n	ff6 <_ZN14USBDeviceClass4sendEmPKvm+0x2a>
		digitalWrite(PIN_LED_TXL, LOW);
     ff0:	201a      	movs	r0, #26
     ff2:	f000 fbc5 	bl	1780 <digitalWrite>

	txLEDPulse = TX_RX_LED_PULSE_MS;
     ff6:	2364      	movs	r3, #100	; 0x64
	uint32_t written = 0;
     ff8:	2500      	movs	r5, #0
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
     ffa:	4a32      	ldr	r2, [pc, #200]	; (10c4 <_ZN14USBDeviceClass4sendEmPKvm+0xf8>)
	txLEDPulse = TX_RX_LED_PULSE_MS;
     ffc:	7023      	strb	r3, [r4, #0]
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
     ffe:	01bb      	lsls	r3, r7, #6
    1000:	18d3      	adds	r3, r2, r3
    1002:	9302      	str	r3, [sp, #8]
	while (len != 0)
    1004:	2e00      	cmp	r6, #0
    1006:	d02c      	beq.n	1062 <_ZN14USBDeviceClass4sendEmPKvm+0x96>
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    1008:	4b2f      	ldr	r3, [pc, #188]	; (10c8 <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
    100a:	681b      	ldr	r3, [r3, #0]
    100c:	9303      	str	r3, [sp, #12]
    100e:	23ff      	movs	r3, #255	; 0xff
    1010:	403b      	ands	r3, r7
    1012:	001c      	movs	r4, r3
    1014:	9300      	str	r3, [sp, #0]
    1016:	3408      	adds	r4, #8
    1018:	9b03      	ldr	r3, [sp, #12]
    101a:	0164      	lsls	r4, r4, #5
    101c:	191c      	adds	r4, r3, r4
    101e:	79a3      	ldrb	r3, [r4, #6]
    1020:	09db      	lsrs	r3, r3, #7
		if (usbd.epBank1IsReady(ep)) {
    1022:	d021      	beq.n	1068 <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    1024:	4b29      	ldr	r3, [pc, #164]	; (10cc <_ZN14USBDeviceClass4sendEmPKvm+0x100>)
    1026:	492a      	ldr	r1, [pc, #168]	; (10d0 <_ZN14USBDeviceClass4sendEmPKvm+0x104>)
    1028:	6818      	ldr	r0, [r3, #0]
    102a:	f000 ff45 	bl	1eb8 <__udivsi3>
    102e:	4b29      	ldr	r3, [pc, #164]	; (10d4 <_ZN14USBDeviceClass4sendEmPKvm+0x108>)
    1030:	2117      	movs	r1, #23
    1032:	4358      	muls	r0, r3
    1034:	f000 ff40 	bl	1eb8 <__udivsi3>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    1038:	4b27      	ldr	r3, [pc, #156]	; (10d8 <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    103a:	79e2      	ldrb	r2, [r4, #7]
			while (!usbd.epBank1IsTransferComplete(ep)) {
    103c:	0792      	lsls	r2, r2, #30
    103e:	d413      	bmi.n	1068 <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    1040:	5dda      	ldrb	r2, [r3, r7]
    1042:	2a00      	cmp	r2, #0
    1044:	d101      	bne.n	104a <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
    1046:	3801      	subs	r0, #1
    1048:	d2f7      	bcs.n	103a <_ZN14USBDeviceClass4sendEmPKvm+0x6e>
					LastTransmitTimedOut[ep] = 1;
    104a:	2201      	movs	r2, #1
    104c:	55da      	strb	r2, [r3, r7]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    104e:	9b00      	ldr	r3, [sp, #0]
    1050:	015a      	lsls	r2, r3, #5
    1052:	4b1d      	ldr	r3, [pc, #116]	; (10c8 <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
    1054:	189b      	adds	r3, r3, r2
    1056:	699a      	ldr	r2, [r3, #24]
    1058:	0b92      	lsrs	r2, r2, #14
    105a:	0392      	lsls	r2, r2, #14
    105c:	619a      	str	r2, [r3, #24]
					return -1;
    105e:	2501      	movs	r5, #1
    1060:	426d      	negs	r5, r5
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
    1062:	0028      	movs	r0, r5
    1064:	b005      	add	sp, #20
    1066:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LastTransmitTimedOut[ep] = 0;
    1068:	2200      	movs	r2, #0
    106a:	4b1b      	ldr	r3, [pc, #108]	; (10d8 <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
    106c:	0034      	movs	r4, r6
    106e:	55da      	strb	r2, [r3, r7]
    1070:	2e3f      	cmp	r6, #63	; 0x3f
    1072:	d900      	bls.n	1076 <_ZN14USBDeviceClass4sendEmPKvm+0xaa>
    1074:	243f      	movs	r4, #63	; 0x3f
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    1076:	0022      	movs	r2, r4
    1078:	9901      	ldr	r1, [sp, #4]
    107a:	9802      	ldr	r0, [sp, #8]
    107c:	f000 ffd6 	bl	202c <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1080:	9b00      	ldr	r3, [sp, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1082:	04a1      	lsls	r1, r4, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1084:	015a      	lsls	r2, r3, #5
    1086:	4b10      	ldr	r3, [pc, #64]	; (10c8 <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1088:	0c89      	lsrs	r1, r1, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    108a:	189b      	adds	r3, r3, r2
    108c:	9a02      	ldr	r2, [sp, #8]
		written += length;
    108e:	192d      	adds	r5, r5, r4
    1090:	615a      	str	r2, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1092:	699a      	ldr	r2, [r3, #24]
		len -= length;
    1094:	1b36      	subs	r6, r6, r4
    1096:	0b92      	lsrs	r2, r2, #14
    1098:	0392      	lsls	r2, r2, #14
    109a:	430a      	orrs	r2, r1
    109c:	619a      	str	r2, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    109e:	9b00      	ldr	r3, [sp, #0]
    10a0:	9a03      	ldr	r2, [sp, #12]
    10a2:	3308      	adds	r3, #8
    10a4:	015b      	lsls	r3, r3, #5
    10a6:	18d3      	adds	r3, r2, r3
    10a8:	2202      	movs	r2, #2
    10aa:	71da      	strb	r2, [r3, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    10ac:	7959      	ldrb	r1, [r3, #5]
    10ae:	3a82      	subs	r2, #130	; 0x82
    10b0:	430a      	orrs	r2, r1
    10b2:	715a      	strb	r2, [r3, #5]
		data = (char *)data + length;
    10b4:	9b01      	ldr	r3, [sp, #4]
    10b6:	191b      	adds	r3, r3, r4
    10b8:	9301      	str	r3, [sp, #4]
	while (len != 0)
    10ba:	e7a3      	b.n	1004 <_ZN14USBDeviceClass4sendEmPKvm+0x38>
    10bc:	200005f0 	.word	0x200005f0
    10c0:	20000161 	.word	0x20000161
    10c4:	2000016c 	.word	0x2000016c
    10c8:	200005f8 	.word	0x200005f8
    10cc:	20000080 	.word	0x20000080
    10d0:	000f4240 	.word	0x000f4240
    10d4:	00011170 	.word	0x00011170
    10d8:	20000163 	.word	0x20000163

000010dc <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    10dc:	b570      	push	{r4, r5, r6, lr}
    10de:	000d      	movs	r5, r1
    10e0:	001c      	movs	r4, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    10e2:	4e0d      	ldr	r6, [pc, #52]	; (1118 <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
    10e4:	01ab      	lsls	r3, r5, #6
    10e6:	18f6      	adds	r6, r6, r3
{
    10e8:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    10ea:	0030      	movs	r0, r6
    10ec:	0022      	movs	r2, r4
    10ee:	f000 ff9d 	bl	202c <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    10f2:	b2ed      	uxtb	r5, r5
    10f4:	4909      	ldr	r1, [pc, #36]	; (111c <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
    10f6:	016d      	lsls	r5, r5, #5
    10f8:	194d      	adds	r5, r1, r5
    10fa:	616e      	str	r6, [r5, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    10fc:	69ab      	ldr	r3, [r5, #24]
    10fe:	4a08      	ldr	r2, [pc, #32]	; (1120 <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
    1100:	0020      	movs	r0, r4
    1102:	4013      	ands	r3, r2
    1104:	61ab      	str	r3, [r5, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1106:	69ab      	ldr	r3, [r5, #24]
    1108:	04a2      	lsls	r2, r4, #18
    110a:	0b9b      	lsrs	r3, r3, #14
    110c:	0c92      	lsrs	r2, r2, #18
    110e:	039b      	lsls	r3, r3, #14
    1110:	4313      	orrs	r3, r2
    1112:	61ab      	str	r3, [r5, #24]
    1114:	bd70      	pop	{r4, r5, r6, pc}
    1116:	46c0      	nop			; (mov r8, r8)
    1118:	2000016c 	.word	0x2000016c
    111c:	200005f8 	.word	0x200005f8
    1120:	f0003fff 	.word	0xf0003fff

00001124 <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    1124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    1126:	4b10      	ldr	r3, [pc, #64]	; (1168 <_ZN14USBDeviceClass11sendControlEPKvm+0x44>)
{
    1128:	9001      	str	r0, [sp, #4]
	if (_dry_run == true)
    112a:	781b      	ldrb	r3, [r3, #0]
{
    112c:	000f      	movs	r7, r1
    112e:	0015      	movs	r5, r2
	if (_dry_run == true)
    1130:	2b00      	cmp	r3, #0
    1132:	d10c      	bne.n	114e <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		return length;

	if (_pack_message == true) {
    1134:	4b0d      	ldr	r3, [pc, #52]	; (116c <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)
    1136:	0016      	movs	r6, r2
    1138:	781c      	ldrb	r4, [r3, #0]
    113a:	2c00      	cmp	r4, #0
    113c:	d009      	beq.n	1152 <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
		memcpy(&_pack_buffer[_pack_size], data, len);
    113e:	4e0c      	ldr	r6, [pc, #48]	; (1170 <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
    1140:	480c      	ldr	r0, [pc, #48]	; (1174 <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
    1142:	8834      	ldrh	r4, [r6, #0]
    1144:	1900      	adds	r0, r0, r4
		_pack_size += len;
    1146:	1964      	adds	r4, r4, r5
		memcpy(&_pack_buffer[_pack_size], data, len);
    1148:	f000 ff70 	bl	202c <memcpy>
		_pack_size += len;
    114c:	8034      	strh	r4, [r6, #0]
		pos += sent;
		len -= sent;
 	}

	return length;
}
    114e:	0028      	movs	r0, r5
    1150:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 	while (len > 0)
    1152:	2e00      	cmp	r6, #0
    1154:	d0fb      	beq.n	114e <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		sent = armSend(EP0, data + pos, len);
    1156:	193a      	adds	r2, r7, r4
    1158:	0033      	movs	r3, r6
    115a:	2100      	movs	r1, #0
    115c:	9801      	ldr	r0, [sp, #4]
    115e:	f7ff ffbd 	bl	10dc <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
    1162:	1824      	adds	r4, r4, r0
		len -= sent;
    1164:	1a36      	subs	r6, r6, r0
 	while (len > 0)
    1166:	e7f4      	b.n	1152 <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
    1168:	200004ec 	.word	0x200004ec
    116c:	200005ed 	.word	0x200005ed
    1170:	200005ee 	.word	0x200005ee
    1174:	200004ed 	.word	0x200004ed

00001178 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>:
{
    1178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return false;
    117a:	2000      	movs	r0, #0
{
    117c:	af00      	add	r7, sp, #0
    117e:	000e      	movs	r6, r1
    1180:	0015      	movs	r5, r2
	if (maxlen < 2)
    1182:	2a01      	cmp	r2, #1
    1184:	dd26      	ble.n	11d4 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x5c>
	uint8_t buffer[maxlen];
    1186:	1dd3      	adds	r3, r2, #7
    1188:	466a      	mov	r2, sp
    118a:	08db      	lsrs	r3, r3, #3
    118c:	00db      	lsls	r3, r3, #3
    118e:	1ad3      	subs	r3, r2, r3
    1190:	469d      	mov	sp, r3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    1192:	0008      	movs	r0, r1
    1194:	f000 ffcc 	bl	2130 <strlen>
	uint8_t buffer[maxlen];
    1198:	466c      	mov	r4, sp
	buffer[1] = 0x03;
    119a:	2303      	movs	r3, #3
		buffer[i] = 0;
    119c:	2100      	movs	r1, #0
	buffer[0] = strlen((const char*)string) * 2 + 2;
    119e:	3001      	adds	r0, #1
    11a0:	0040      	lsls	r0, r0, #1
    11a2:	7020      	strb	r0, [r4, #0]
	buffer[1] = 0x03;
    11a4:	7063      	strb	r3, [r4, #1]
    11a6:	1e5a      	subs	r2, r3, #1
    11a8:	b2d2      	uxtb	r2, r2
	for (i = 2; i < maxlen && *string; i++) {
    11aa:	4295      	cmp	r5, r2
    11ac:	dd0b      	ble.n	11c6 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
    11ae:	7830      	ldrb	r0, [r6, #0]
    11b0:	2800      	cmp	r0, #0
    11b2:	d008      	beq.n	11c6 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
		buffer[i++] = *string++;
    11b4:	3601      	adds	r6, #1
    11b6:	54a0      	strb	r0, [r4, r2]
		if (i == maxlen) break;
    11b8:	429d      	cmp	r5, r3
    11ba:	d003      	beq.n	11c4 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4c>
		buffer[i] = 0;
    11bc:	54e1      	strb	r1, [r4, r3]
    11be:	3302      	adds	r3, #2
    11c0:	b2db      	uxtb	r3, r3
	for (i = 2; i < maxlen && *string; i++) {
    11c2:	e7f0      	b.n	11a6 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x2e>
    11c4:	002a      	movs	r2, r5
	return USBDevice.sendControl(buffer, i);
    11c6:	0021      	movs	r1, r4
    11c8:	4803      	ldr	r0, [pc, #12]	; (11d8 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x60>)
    11ca:	f7ff ffab 	bl	1124 <_ZN14USBDeviceClass11sendControlEPKvm>
    11ce:	1e43      	subs	r3, r0, #1
    11d0:	4198      	sbcs	r0, r3
    11d2:	b2c0      	uxtb	r0, r0
}
    11d4:	46bd      	mov	sp, r7
    11d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11d8:	20000140 	.word	0x20000140

000011dc <_ZN14USBDeviceClass17sendConfigurationEm>:
{
    11dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
    11de:	2700      	movs	r7, #0
	_dry_run = true;
    11e0:	2601      	movs	r6, #1
{
    11e2:	b087      	sub	sp, #28
	_dry_run = true;
    11e4:	4b1e      	ldr	r3, [pc, #120]	; (1260 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
{
    11e6:	9100      	str	r1, [sp, #0]
	uint8_t interfaces = SendInterfaces(&total);
    11e8:	a902      	add	r1, sp, #8
	_dry_run = true;
    11ea:	701e      	strb	r6, [r3, #0]
{
    11ec:	0005      	movs	r5, r0
	uint32_t total = 0;
    11ee:	9702      	str	r7, [sp, #8]
	uint8_t interfaces = SendInterfaces(&total);
    11f0:	f7ff fc2a 	bl	a48 <_ZN14USBDeviceClass14SendInterfacesEPm>
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    11f4:	ac03      	add	r4, sp, #12
	uint8_t interfaces = SendInterfaces(&total);
    11f6:	9001      	str	r0, [sp, #4]
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    11f8:	2209      	movs	r2, #9
    11fa:	0039      	movs	r1, r7
    11fc:	0020      	movs	r0, r4
    11fe:	f000 ff1e 	bl	203e <memset>
    1202:	2309      	movs	r3, #9
    1204:	7023      	strb	r3, [r4, #0]
    1206:	2302      	movs	r3, #2
    1208:	7063      	strb	r3, [r4, #1]
    120a:	339e      	adds	r3, #158	; 0x9e
    120c:	71e3      	strb	r3, [r4, #7]
    120e:	335a      	adds	r3, #90	; 0x5a
    1210:	7223      	strb	r3, [r4, #8]
    1212:	9b02      	ldr	r3, [sp, #8]
    1214:	7166      	strb	r6, [r4, #5]
    1216:	3309      	adds	r3, #9
    1218:	8063      	strh	r3, [r4, #2]
    121a:	466b      	mov	r3, sp
    121c:	791b      	ldrb	r3, [r3, #4]
    121e:	7123      	strb	r3, [r4, #4]
	_dry_run = false;
    1220:	4b0f      	ldr	r3, [pc, #60]	; (1260 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    1222:	701f      	strb	r7, [r3, #0]
	if (maxlen == sizeof(ConfigDescriptor)) {
    1224:	9b00      	ldr	r3, [sp, #0]
    1226:	2b09      	cmp	r3, #9
    1228:	d107      	bne.n	123a <_ZN14USBDeviceClass17sendConfigurationEm+0x5e>
		sendControl(&config, sizeof(ConfigDescriptor));
    122a:	001a      	movs	r2, r3
    122c:	0021      	movs	r1, r4
		sendControl(_pack_buffer, _pack_size);
    122e:	0028      	movs	r0, r5
    1230:	f7ff ff78 	bl	1124 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    1234:	2001      	movs	r0, #1
    1236:	b007      	add	sp, #28
    1238:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_pack_message = true;
    123a:	4b0a      	ldr	r3, [pc, #40]	; (1264 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	sendControl(&config, sizeof(ConfigDescriptor));
    123c:	2209      	movs	r2, #9
		_pack_message = true;
    123e:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    1240:	4e09      	ldr	r6, [pc, #36]	; (1268 <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	sendControl(&config, sizeof(ConfigDescriptor));
    1242:	0021      	movs	r1, r4
    1244:	0028      	movs	r0, r5
	total = 0;
    1246:	9702      	str	r7, [sp, #8]
		_pack_size = 0;
    1248:	8037      	strh	r7, [r6, #0]
	sendControl(&config, sizeof(ConfigDescriptor));
    124a:	f7ff ff6b 	bl	1124 <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    124e:	a902      	add	r1, sp, #8
    1250:	0028      	movs	r0, r5
    1252:	f7ff fbf9 	bl	a48 <_ZN14USBDeviceClass14SendInterfacesEPm>
		_pack_message = false;
    1256:	4b03      	ldr	r3, [pc, #12]	; (1264 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    1258:	8832      	ldrh	r2, [r6, #0]
		_pack_message = false;
    125a:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    125c:	4903      	ldr	r1, [pc, #12]	; (126c <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
    125e:	e7e6      	b.n	122e <_ZN14USBDeviceClass17sendConfigurationEm+0x52>
    1260:	200004ec 	.word	0x200004ec
    1264:	200005ed 	.word	0x200005ed
    1268:	200005ee 	.word	0x200005ee
    126c:	200004ed 	.word	0x200004ed

00001270 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:
{
    1270:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    1272:	78ce      	ldrb	r6, [r1, #3]
{
    1274:	b08a      	sub	sp, #40	; 0x28
    1276:	0005      	movs	r5, r0
    1278:	000c      	movs	r4, r1
	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    127a:	2e02      	cmp	r6, #2
    127c:	d108      	bne.n	1290 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x20>
		return USBDevice.sendConfiguration(setup.wLength);
    127e:	88c9      	ldrh	r1, [r1, #6]
    1280:	4821      	ldr	r0, [pc, #132]	; (1308 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x98>)
    1282:	f7ff ffab 	bl	11dc <_ZN14USBDeviceClass17sendConfigurationEm>
    1286:	1e43      	subs	r3, r0, #1
    1288:	4198      	sbcs	r0, r3
    128a:	b2c0      	uxtb	r0, r0
}
    128c:	b00a      	add	sp, #40	; 0x28
    128e:	bd70      	pop	{r4, r5, r6, pc}
	ret = PluggableUSB().getDescriptor(setup);
    1290:	f000 fd90 	bl	1db4 <_Z12PluggableUSBv>
    1294:	0021      	movs	r1, r4
    1296:	f000 fd5d 	bl	1d54 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    129a:	2800      	cmp	r0, #0
    129c:	d003      	beq.n	12a6 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x36>
		return (ret > 0 ? true : false);
    129e:	17c3      	asrs	r3, r0, #31
    12a0:	1a18      	subs	r0, r3, r0
    12a2:	0fc0      	lsrs	r0, r0, #31
    12a4:	e7f2      	b.n	128c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    12a6:	2e01      	cmp	r6, #1
    12a8:	d10b      	bne.n	12c2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x52>
		if (setup.wLength == 8)
    12aa:	88e2      	ldrh	r2, [r4, #6]
    12ac:	4917      	ldr	r1, [pc, #92]	; (130c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x9c>)
		if (*desc_addr > setup.wLength) {
    12ae:	2a11      	cmp	r2, #17
    12b0:	dc10      	bgt.n	12d4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
			desc_length = setup.wLength;
    12b2:	b2d2      	uxtb	r2, r2
	if (desc_length == 0) {
    12b4:	2a00      	cmp	r2, #0
    12b6:	d00d      	beq.n	12d4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
	sendControl(desc_addr, desc_length);
    12b8:	0028      	movs	r0, r5
    12ba:	f7ff ff33 	bl	1124 <_ZN14USBDeviceClass11sendControlEPKvm>
	return true;
    12be:	2001      	movs	r0, #1
    12c0:	e7e4      	b.n	128c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    12c2:	2e03      	cmp	r6, #3
    12c4:	d1e2      	bne.n	128c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		if (setup.wValueL == 0) {
    12c6:	78a3      	ldrb	r3, [r4, #2]
    12c8:	2b00      	cmp	r3, #0
    12ca:	d105      	bne.n	12d8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x68>
		if (*desc_addr > setup.wLength) {
    12cc:	88e2      	ldrh	r2, [r4, #6]
    12ce:	4910      	ldr	r1, [pc, #64]	; (1310 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xa0>)
    12d0:	2a03      	cmp	r2, #3
    12d2:	ddee      	ble.n	12b2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x42>
		desc_length = *desc_addr;
    12d4:	780a      	ldrb	r2, [r1, #0]
    12d6:	e7ef      	b.n	12b8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x48>
		else if (setup.wValueL == IPRODUCT) {
    12d8:	2b02      	cmp	r3, #2
    12da:	d105      	bne.n	12e8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x78>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    12dc:	79a2      	ldrb	r2, [r4, #6]
    12de:	490d      	ldr	r1, [pc, #52]	; (1314 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xa4>)
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    12e0:	0028      	movs	r0, r5
    12e2:	f7ff ff49 	bl	1178 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    12e6:	e7d1      	b.n	128c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		else if (setup.wValueL == IMANUFACTURER) {
    12e8:	2b01      	cmp	r3, #1
    12ea:	d102      	bne.n	12f2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x82>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    12ec:	79a2      	ldrb	r2, [r4, #6]
    12ee:	490a      	ldr	r1, [pc, #40]	; (1318 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xa8>)
    12f0:	e7f6      	b.n	12e0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
		else if (setup.wValueL == ISERIAL) {
    12f2:	2b03      	cmp	r3, #3
    12f4:	d1ca      	bne.n	128c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
			PluggableUSB().getShortName(name);
    12f6:	f000 fd5d 	bl	1db4 <_Z12PluggableUSBv>
    12fa:	a901      	add	r1, sp, #4
    12fc:	f000 fd3a 	bl	1d74 <_ZN13PluggableUSB_12getShortNameEPc>
			return sendStringDescriptor((uint8_t*)name, setup.wLength);
    1300:	79a2      	ldrb	r2, [r4, #6]
    1302:	a901      	add	r1, sp, #4
    1304:	e7ec      	b.n	12e0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
    1306:	46c0      	nop			; (mov r8, r8)
    1308:	20000140 	.word	0x20000140
    130c:	000021cd 	.word	0x000021cd
    1310:	000021c0 	.word	0x000021c0
    1314:	000021b4 	.word	0x000021b4
    1318:	000021c4 	.word	0x000021c4

0000131c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    131c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    131e:	0006      	movs	r6, r0
	switch (setup.bRequest) {
    1320:	7848      	ldrb	r0, [r1, #1]
{
    1322:	000d      	movs	r5, r1
	switch (setup.bRequest) {
    1324:	280b      	cmp	r0, #11
    1326:	d811      	bhi.n	134c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
    1328:	f000 fdbc 	bl	1ea4 <__gnu_thumb1_case_uqi>
    132c:	2e101d06 	.word	0x2e101d06
    1330:	70484310 	.word	0x70484310
    1334:	6c694f4c 	.word	0x6c694f4c
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    1338:	7809      	ldrb	r1, [r1, #0]
    133a:	aa01      	add	r2, sp, #4
    133c:	2900      	cmp	r1, #0
    133e:	d107      	bne.n	1350 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x34>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    1340:	2302      	movs	r3, #2
			uint8_t buff[] = { 0, 0 };
    1342:	7011      	strb	r1, [r2, #0]
    1344:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    1346:	0030      	movs	r0, r6
    1348:	f7ff fec8 	bl	10dc <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    134c:	2001      	movs	r0, #1
		return true;

	default:
		return true;
	}
}
    134e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
			uint8_t buff[] = { 0, 0 };
    1350:	2300      	movs	r3, #0
    1352:	7013      	strb	r3, [r2, #0]
    1354:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    1356:	4b2e      	ldr	r3, [pc, #184]	; (1410 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
			if (isRemoteWakeUpEnabled == 1)
    1358:	781b      	ldrb	r3, [r3, #0]
    135a:	2b01      	cmp	r3, #1
    135c:	d100      	bne.n	1360 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x44>
				buff[0] = 1;
    135e:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    1360:	2302      	movs	r3, #2
		armSend(0, (void*)&_usbSetInterface, 1);
    1362:	2100      	movs	r1, #0
    1364:	e7ef      	b.n	1346 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    1366:	788a      	ldrb	r2, [r1, #2]
    1368:	2300      	movs	r3, #0
    136a:	2a01      	cmp	r2, #1
    136c:	d104      	bne.n	1378 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x5c>
			uint8_t buff[] = { 0, 0 };
    136e:	aa01      	add	r2, sp, #4
    1370:	7013      	strb	r3, [r2, #0]
    1372:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    1374:	4b27      	ldr	r3, [pc, #156]	; (1414 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
    1376:	e7ef      	b.n	1358 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x3c>
			isEndpointHalt = 0;
    1378:	4a25      	ldr	r2, [pc, #148]	; (1410 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    137a:	7013      	strb	r3, [r2, #0]
    137c:	4a26      	ldr	r2, [pc, #152]	; (1418 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    137e:	6993      	ldr	r3, [r2, #24]
    1380:	0b9b      	lsrs	r3, r3, #14
    1382:	039b      	lsls	r3, r3, #14
    1384:	6193      	str	r3, [r2, #24]
    1386:	e7e1      	b.n	134c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    1388:	788c      	ldrb	r4, [r1, #2]
    138a:	2c01      	cmp	r4, #1
    138c:	d106      	bne.n	139c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
			uint8_t buff[] = { 0 };
    138e:	2100      	movs	r1, #0
			isRemoteWakeUpEnabled = 1;
    1390:	4b20      	ldr	r3, [pc, #128]	; (1414 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
			uint8_t buff[] = { 0 };
    1392:	aa01      	add	r2, sp, #4
			isRemoteWakeUpEnabled = 1;
    1394:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    1396:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    1398:	0023      	movs	r3, r4
    139a:	e7d4      	b.n	1346 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 0) // ENDPOINTHALT
    139c:	2c00      	cmp	r4, #0
    139e:	d108      	bne.n	13b2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x96>
			isEndpointHalt = 1;
    13a0:	2001      	movs	r0, #1
    13a2:	4b1b      	ldr	r3, [pc, #108]	; (1410 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    13a4:	4a1c      	ldr	r2, [pc, #112]	; (1418 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    13a6:	7018      	strb	r0, [r3, #0]
    13a8:	6993      	ldr	r3, [r2, #24]
    13aa:	0b9b      	lsrs	r3, r3, #14
    13ac:	039b      	lsls	r3, r3, #14
    13ae:	6193      	str	r3, [r2, #24]
			return true;
    13b0:	e7cd      	b.n	134e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		setAddress(setup.wValueL);
    13b2:	78a9      	ldrb	r1, [r5, #2]
    13b4:	0030      	movs	r0, r6
    13b6:	f7ff fc11 	bl	bdc <_ZN14USBDeviceClass10setAddressEm>
    13ba:	e7c7      	b.n	134c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		return sendDescriptor(setup);
    13bc:	0030      	movs	r0, r6
    13be:	f7ff ff57 	bl	1270 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    13c2:	e7c4      	b.n	134e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		armSend(0, (void*)&_usbConfiguration, 1);
    13c4:	2301      	movs	r3, #1
    13c6:	4a15      	ldr	r2, [pc, #84]	; (141c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    13c8:	e7cb      	b.n	1362 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    13ca:	780b      	ldrb	r3, [r1, #0]
			return false;
    13cc:	2000      	movs	r0, #0
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    13ce:	06db      	lsls	r3, r3, #27
    13d0:	d1bd      	bne.n	134e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			initEndpoints();
    13d2:	0030      	movs	r0, r6
    13d4:	f7ff fcd8 	bl	d88 <_ZN14USBDeviceClass13initEndpointsEv>
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    13d8:	202a      	movs	r0, #42	; 0x2a
    13da:	2102      	movs	r1, #2
			_usbConfiguration = setup.wValueL;
    13dc:	78aa      	ldrb	r2, [r5, #2]
    13de:	4b0f      	ldr	r3, [pc, #60]	; (141c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    13e0:	30ff      	adds	r0, #255	; 0xff
    13e2:	601a      	str	r2, [r3, #0]
    13e4:	4a0c      	ldr	r2, [pc, #48]	; (1418 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    13e6:	6813      	ldr	r3, [r2, #0]
    13e8:	5c1c      	ldrb	r4, [r3, r0]
    13ea:	4321      	orrs	r1, r4
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    13ec:	244a      	movs	r4, #74	; 0x4a
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    13ee:	5419      	strb	r1, [r3, r0]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    13f0:	34ff      	adds	r4, #255	; 0xff
    13f2:	5d19      	ldrb	r1, [r3, r4]
    13f4:	3829      	subs	r0, #41	; 0x29
    13f6:	38ff      	subs	r0, #255	; 0xff
    13f8:	4301      	orrs	r1, r0
    13fa:	5519      	strb	r1, [r3, r4]
    13fc:	e7d4      	b.n	13a8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x8c>
		armSend(0, (void*)&_usbSetInterface, 1);
    13fe:	2301      	movs	r3, #1
    1400:	4a07      	ldr	r2, [pc, #28]	; (1420 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    1402:	e7ae      	b.n	1362 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		_usbSetInterface = setup.wValueL;
    1404:	788a      	ldrb	r2, [r1, #2]
    1406:	4b06      	ldr	r3, [pc, #24]	; (1420 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    1408:	601a      	str	r2, [r3, #0]
    140a:	e7b7      	b.n	137c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		return false;
    140c:	2000      	movs	r0, #0
    140e:	e79e      	b.n	134e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
    1410:	20000162 	.word	0x20000162
    1414:	2000016a 	.word	0x2000016a
    1418:	200005f8 	.word	0x200005f8
    141c:	200005f0 	.word	0x200005f0
    1420:	200005f4 	.word	0x200005f4

00001424 <_ZN14USBDeviceClass10ISRHandlerEv>:

void USBDeviceClass::ISRHandler()
{

	if (_pack_message == true) {
    1424:	4b4b      	ldr	r3, [pc, #300]	; (1554 <_ZN14USBDeviceClass10ISRHandlerEv+0x130>)
{
    1426:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (_pack_message == true) {
    1428:	781c      	ldrb	r4, [r3, #0]
{
    142a:	0007      	movs	r7, r0
	if (_pack_message == true) {
    142c:	2c00      	cmp	r4, #0
    142e:	d17c      	bne.n	152a <_ZN14USBDeviceClass10ISRHandlerEv+0x106>
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    1430:	4e49      	ldr	r6, [pc, #292]	; (1558 <_ZN14USBDeviceClass10ISRHandlerEv+0x134>)
    1432:	6833      	ldr	r3, [r6, #0]
    1434:	8b9b      	ldrh	r3, [r3, #28]
		return;
	}
	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    1436:	071b      	lsls	r3, r3, #28
    1438:	d50d      	bpl.n	1456 <_ZN14USBDeviceClass10ISRHandlerEv+0x32>
    143a:	0020      	movs	r0, r4
    143c:	f7ff f934 	bl	6a8 <_ZN14USBDeviceClass6initEPEmm.part.5>
	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    1440:	6832      	ldr	r2, [r6, #0]
    1442:	2310      	movs	r3, #16
    1444:	0011      	movs	r1, r2
    1446:	31ff      	adds	r1, #255	; 0xff
    1448:	7a88      	ldrb	r0, [r1, #10]
    144a:	4303      	orrs	r3, r0
    144c:	728b      	strb	r3, [r1, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    144e:	4b43      	ldr	r3, [pc, #268]	; (155c <_ZN14USBDeviceClass10ISRHandlerEv+0x138>)
    1450:	601c      	str	r4, [r3, #0]
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    1452:	2308      	movs	r3, #8
    1454:	8393      	strh	r3, [r2, #28]
	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    1456:	6833      	ldr	r3, [r6, #0]
    1458:	8b9a      	ldrh	r2, [r3, #28]

		usbd.ackEndOfResetInterrupt();
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    145a:	0752      	lsls	r2, r2, #29
    145c:	d51f      	bpl.n	149e <_ZN14USBDeviceClass10ISRHandlerEv+0x7a>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    145e:	2204      	movs	r2, #4
    1460:	839a      	strh	r2, [r3, #28]
	{
		usbd.ackStartOfFrameInterrupt();

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    1462:	4a3f      	ldr	r2, [pc, #252]	; (1560 <_ZN14USBDeviceClass10ISRHandlerEv+0x13c>)
    1464:	7813      	ldrb	r3, [r2, #0]
    1466:	2b00      	cmp	r3, #0
    1468:	d00a      	beq.n	1480 <_ZN14USBDeviceClass10ISRHandlerEv+0x5c>
			txLEDPulse--;
    146a:	7813      	ldrb	r3, [r2, #0]
    146c:	3b01      	subs	r3, #1
    146e:	b2db      	uxtb	r3, r3
    1470:	7013      	strb	r3, [r2, #0]
			if (txLEDPulse == 0)
    1472:	7813      	ldrb	r3, [r2, #0]
    1474:	2b00      	cmp	r3, #0
    1476:	d103      	bne.n	1480 <_ZN14USBDeviceClass10ISRHandlerEv+0x5c>
				digitalWrite(PIN_LED_TXL, HIGH);
    1478:	2101      	movs	r1, #1
    147a:	201a      	movs	r0, #26
    147c:	f000 f980 	bl	1780 <digitalWrite>
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    1480:	4a38      	ldr	r2, [pc, #224]	; (1564 <_ZN14USBDeviceClass10ISRHandlerEv+0x140>)
    1482:	7813      	ldrb	r3, [r2, #0]
    1484:	2b00      	cmp	r3, #0
    1486:	d00a      	beq.n	149e <_ZN14USBDeviceClass10ISRHandlerEv+0x7a>
			rxLEDPulse--;
    1488:	7813      	ldrb	r3, [r2, #0]
    148a:	3b01      	subs	r3, #1
    148c:	b2db      	uxtb	r3, r3
    148e:	7013      	strb	r3, [r2, #0]
			if (rxLEDPulse == 0)
    1490:	7813      	ldrb	r3, [r2, #0]
    1492:	2b00      	cmp	r3, #0
    1494:	d103      	bne.n	149e <_ZN14USBDeviceClass10ISRHandlerEv+0x7a>
				digitalWrite(PIN_LED_RXL, HIGH);
    1496:	2101      	movs	r1, #1
    1498:	2019      	movs	r0, #25
    149a:	f000 f971 	bl	1780 <digitalWrite>
	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    149e:	6833      	ldr	r3, [r6, #0]
    14a0:	33ff      	adds	r3, #255	; 0xff
    14a2:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    14a4:	06d2      	lsls	r2, r2, #27
    14a6:	d520      	bpl.n	14ea <_ZN14USBDeviceClass10ISRHandlerEv+0xc6>
	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    14a8:	2210      	movs	r2, #16
    14aa:	721a      	strb	r2, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    14ac:	7959      	ldrb	r1, [r3, #5]
    14ae:	3230      	adds	r2, #48	; 0x30
    14b0:	430a      	orrs	r2, r1
    14b2:	715a      	strb	r2, [r3, #5]
		/* Clear the Bank 0 ready flag on Control OUT */
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    14b4:	2360      	movs	r3, #96	; 0x60
    14b6:	492c      	ldr	r1, [pc, #176]	; (1568 <_ZN14USBDeviceClass10ISRHandlerEv+0x144>)
			// Standard Requests
			ok = handleStandardSetup(*setup);
    14b8:	0038      	movs	r0, r7
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    14ba:	780a      	ldrb	r2, [r1, #0]
    14bc:	421a      	tst	r2, r3
    14be:	d135      	bne.n	152c <_ZN14USBDeviceClass10ISRHandlerEv+0x108>
			ok = handleStandardSetup(*setup);
    14c0:	f7ff ff2c 	bl	131c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(*setup);
		}

		if (ok) {
    14c4:	2800      	cmp	r0, #0
    14c6:	d034      	beq.n	1532 <_ZN14USBDeviceClass10ISRHandlerEv+0x10e>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    14c8:	2280      	movs	r2, #128	; 0x80
    14ca:	6833      	ldr	r3, [r6, #0]
    14cc:	4252      	negs	r2, r2
    14ce:	33ff      	adds	r3, #255	; 0xff
    14d0:	7999      	ldrb	r1, [r3, #6]
    14d2:	430a      	orrs	r2, r1
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    14d4:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    14d6:	6833      	ldr	r3, [r6, #0]
    14d8:	33ff      	adds	r3, #255	; 0xff
    14da:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    14dc:	0652      	lsls	r2, r2, #25
    14de:	d504      	bpl.n	14ea <_ZN14USBDeviceClass10ISRHandlerEv+0xc6>
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    14e0:	2240      	movs	r2, #64	; 0x40
    14e2:	721a      	strb	r2, [r3, #8]
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    14e4:	7a59      	ldrb	r1, [r3, #9]
    14e6:	430a      	orrs	r2, r1
    14e8:	725a      	strb	r2, [r3, #9]
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }
    14ea:	6833      	ldr	r3, [r6, #0]
		}

	} // end Received Setup handler

	uint8_t i=0;
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
    14ec:	2500      	movs	r5, #0
    14ee:	8c1c      	ldrh	r4, [r3, #32]
    14f0:	2301      	movs	r3, #1
    14f2:	439c      	bics	r4, r3
    14f4:	b2e4      	uxtb	r4, r4
	while (ept_int != 0)
	{
		// Check if endpoint has a pending interrupt
		if ((ept_int & (1 << i)) != 0)
    14f6:	9301      	str	r3, [sp, #4]
    14f8:	b2e9      	uxtb	r1, r5
	while (ept_int != 0)
    14fa:	2c00      	cmp	r4, #0
    14fc:	d015      	beq.n	152a <_ZN14USBDeviceClass10ISRHandlerEv+0x106>
		if ((ept_int & (1 << i)) != 0)
    14fe:	0023      	movs	r3, r4
    1500:	412b      	asrs	r3, r5
    1502:	9a01      	ldr	r2, [sp, #4]
    1504:	4213      	tst	r3, r2
    1506:	d00d      	beq.n	1524 <_ZN14USBDeviceClass10ISRHandlerEv+0x100>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    1508:	002b      	movs	r3, r5
    150a:	6832      	ldr	r2, [r6, #0]
    150c:	3308      	adds	r3, #8
    150e:	015b      	lsls	r3, r3, #5
    1510:	18d3      	adds	r3, r2, r3
    1512:	79da      	ldrb	r2, [r3, #7]
		{
			// Endpoint Transfer Complete (0/1) Interrupt
			if (usbd.epBank0IsTransferComplete(i) ||
    1514:	07d2      	lsls	r2, r2, #31
    1516:	d413      	bmi.n	1540 <_ZN14USBDeviceClass10ISRHandlerEv+0x11c>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    1518:	79db      	ldrb	r3, [r3, #7]
    151a:	079b      	lsls	r3, r3, #30
    151c:	d410      	bmi.n	1540 <_ZN14USBDeviceClass10ISRHandlerEv+0x11c>
					epHandlers[i]->handleEndpoint();
				} else {
					handleEndpoint(i);
				}
			}
			ept_int &= ~(1 << i);
    151e:	9b01      	ldr	r3, [sp, #4]
    1520:	40ab      	lsls	r3, r5
    1522:	439c      	bics	r4, r3
    1524:	3501      	adds	r5, #1
		}
		i++;
		if (i > USB_EPT_NUM)
    1526:	2d09      	cmp	r5, #9
    1528:	d1e6      	bne.n	14f8 <_ZN14USBDeviceClass10ISRHandlerEv+0xd4>
			break;  // fire exit
	}
}
    152a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			ok = handleClassInterfaceSetup(*setup);
    152c:	f7ff fb7a 	bl	c24 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    1530:	e7c8      	b.n	14c4 <_ZN14USBDeviceClass10ISRHandlerEv+0xa0>
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    1532:	2220      	movs	r2, #32
    1534:	4b0d      	ldr	r3, [pc, #52]	; (156c <_ZN14USBDeviceClass10ISRHandlerEv+0x148>)
    1536:	e7cd      	b.n	14d4 <_ZN14USBDeviceClass10ISRHandlerEv+0xb0>
					epHandlers[i]->handleEndpoint();
    1538:	6803      	ldr	r3, [r0, #0]
    153a:	681b      	ldr	r3, [r3, #0]
    153c:	4798      	blx	r3
    153e:	e7ee      	b.n	151e <_ZN14USBDeviceClass10ISRHandlerEv+0xfa>
				if (epHandlers[i]) {
    1540:	4b0b      	ldr	r3, [pc, #44]	; (1570 <_ZN14USBDeviceClass10ISRHandlerEv+0x14c>)
    1542:	00aa      	lsls	r2, r5, #2
    1544:	58d0      	ldr	r0, [r2, r3]
    1546:	2800      	cmp	r0, #0
    1548:	d1f6      	bne.n	1538 <_ZN14USBDeviceClass10ISRHandlerEv+0x114>
					handleEndpoint(i);
    154a:	0038      	movs	r0, r7
    154c:	f7ff fa92 	bl	a74 <_ZN14USBDeviceClass14handleEndpointEh>
    1550:	e7e5      	b.n	151e <_ZN14USBDeviceClass10ISRHandlerEv+0xfa>
    1552:	46c0      	nop			; (mov r8, r8)
    1554:	200005ed 	.word	0x200005ed
    1558:	200005f8 	.word	0x200005f8
    155c:	200005f0 	.word	0x200005f0
    1560:	20000161 	.word	0x20000161
    1564:	20000160 	.word	0x20000160
    1568:	2000032c 	.word	0x2000032c
    156c:	410050ff 	.word	0x410050ff
    1570:	20000144 	.word	0x20000144

00001574 <UDD_Handler>:
extern "C" void UDD_Handler(void) {
    1574:	b510      	push	{r4, lr}
	USBDevice.ISRHandler();
    1576:	4802      	ldr	r0, [pc, #8]	; (1580 <UDD_Handler+0xc>)
    1578:	f7ff ff54 	bl	1424 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    157c:	bd10      	pop	{r4, pc}
    157e:	46c0      	nop			; (mov r8, r8)
    1580:	20000140 	.word	0x20000140

00001584 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    1584:	4a01      	ldr	r2, [pc, #4]	; (158c <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0x8>)
    1586:	4b02      	ldr	r3, [pc, #8]	; (1590 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0xc>)
    1588:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    158a:	4770      	bx	lr
    158c:	41005000 	.word	0x41005000
    1590:	200005f8 	.word	0x200005f8

00001594 <init>:
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    1594:	21fa      	movs	r1, #250	; 0xfa
    1596:	4b31      	ldr	r3, [pc, #196]	; (165c <init+0xc8>)
{
    1598:	b510      	push	{r4, lr}
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    159a:	6818      	ldr	r0, [r3, #0]
    159c:	0089      	lsls	r1, r1, #2
    159e:	f000 fc8b 	bl	1eb8 <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    15a2:	4b2f      	ldr	r3, [pc, #188]	; (1660 <init+0xcc>)
    15a4:	3801      	subs	r0, #1
    15a6:	4298      	cmp	r0, r3
    15a8:	d856      	bhi.n	1658 <init+0xc4>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    15aa:	492e      	ldr	r1, [pc, #184]	; (1664 <init+0xd0>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    15ac:	4a2e      	ldr	r2, [pc, #184]	; (1668 <init+0xd4>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    15ae:	6048      	str	r0, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    15b0:	20c0      	movs	r0, #192	; 0xc0
    15b2:	6a13      	ldr	r3, [r2, #32]
    15b4:	0600      	lsls	r0, r0, #24
    15b6:	021b      	lsls	r3, r3, #8
    15b8:	0a1b      	lsrs	r3, r3, #8
    15ba:	4303      	orrs	r3, r0
    15bc:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    15be:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    15c0:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    15c2:	608c      	str	r4, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    15c4:	600b      	str	r3, [r1, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    15c6:	2180      	movs	r1, #128	; 0x80
    15c8:	6a13      	ldr	r3, [r2, #32]
    15ca:	0609      	lsls	r1, r1, #24
    15cc:	021b      	lsls	r3, r3, #8
    15ce:	0a1b      	lsrs	r3, r3, #8
    15d0:	430b      	orrs	r3, r1
    15d2:	6213      	str	r3, [r2, #32]
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    15d4:	22fc      	movs	r2, #252	; 0xfc
    15d6:	4b25      	ldr	r3, [pc, #148]	; (166c <init+0xd8>)
    15d8:	6a19      	ldr	r1, [r3, #32]
    15da:	430a      	orrs	r2, r1
    15dc:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    15de:	22fc      	movs	r2, #252	; 0xfc
    15e0:	6a19      	ldr	r1, [r3, #32]
    15e2:	0192      	lsls	r2, r2, #6
    15e4:	430a      	orrs	r2, r1
    15e6:	621a      	str	r2, [r3, #32]

  // ATSAMR, for example, doesn't have a DAC
#ifdef PM_APBCMASK_DAC
  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    15e8:	22a0      	movs	r2, #160	; 0xa0
    15ea:	6a19      	ldr	r1, [r3, #32]
    15ec:	02d2      	lsls	r2, r2, #11
    15ee:	430a      	orrs	r2, r1
    15f0:	621a      	str	r2, [r3, #32]
#endif

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
    pinMode( ul, INPUT ) ;
    15f2:	0020      	movs	r0, r4
    15f4:	2100      	movs	r1, #0
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    15f6:	3401      	adds	r4, #1
    pinMode( ul, INPUT ) ;
    15f8:	f000 f876 	bl	16e8 <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    15fc:	2c14      	cmp	r4, #20
    15fe:	d1f8      	bne.n	15f2 <init+0x5e>
  }

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    1600:	4b1b      	ldr	r3, [pc, #108]	; (1670 <init+0xdc>)
    1602:	001c      	movs	r4, r3
    1604:	785a      	ldrb	r2, [r3, #1]
    1606:	b252      	sxtb	r2, r2
    1608:	2a00      	cmp	r2, #0
    160a:	dbfb      	blt.n	1604 <init+0x70>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    160c:	4a19      	ldr	r2, [pc, #100]	; (1674 <init+0xe0>)
    160e:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    1610:	4b19      	ldr	r3, [pc, #100]	; (1678 <init+0xe4>)
    1612:	001a      	movs	r2, r3
    1614:	7e59      	ldrb	r1, [r3, #25]
    1616:	09c9      	lsrs	r1, r1, #7
    1618:	2901      	cmp	r1, #1
    161a:	d0fb      	beq.n	1614 <init+0x80>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    161c:	21e4      	movs	r1, #228	; 0xe4
    161e:	00c9      	lsls	r1, r1, #3
    1620:	8099      	strh	r1, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    1622:	213f      	movs	r1, #63	; 0x3f
    1624:	70d9      	strb	r1, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    1626:	7e53      	ldrb	r3, [r2, #25]
    1628:	09db      	lsrs	r3, r3, #7
    162a:	2b01      	cmp	r3, #1
    162c:	d0fb      	beq.n	1626 <init+0x92>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    162e:	23c0      	movs	r3, #192	; 0xc0

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    1630:	2000      	movs	r0, #0
  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    1632:	015b      	lsls	r3, r3, #5
    1634:	6113      	str	r3, [r2, #16]
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    1636:	7090      	strb	r0, [r2, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    1638:	f000 f824 	bl	1684 <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    163c:	7863      	ldrb	r3, [r4, #1]
    163e:	b25b      	sxtb	r3, r3
    1640:	2b00      	cmp	r3, #0
    1642:	dbfb      	blt.n	163c <init+0xa8>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    1644:	4b0d      	ldr	r3, [pc, #52]	; (167c <init+0xe8>)
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

 // ATSAMR, for example, doesn't have a DAC
#ifdef DAC
  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    1646:	4a0e      	ldr	r2, [pc, #56]	; (1680 <init+0xec>)
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    1648:	8063      	strh	r3, [r4, #2]
  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    164a:	79d3      	ldrb	r3, [r2, #7]
    164c:	09db      	lsrs	r3, r3, #7
    164e:	2b01      	cmp	r3, #1
    1650:	d0fb      	beq.n	164a <init+0xb6>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    1652:	2341      	movs	r3, #65	; 0x41
    1654:	7053      	strb	r3, [r2, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
#endif

}
    1656:	bd10      	pop	{r4, pc}
    1658:	e7fe      	b.n	1658 <init+0xc4>
    165a:	46c0      	nop			; (mov r8, r8)
    165c:	20000080 	.word	0x20000080
    1660:	00ffffff 	.word	0x00ffffff
    1664:	e000e010 	.word	0xe000e010
    1668:	e000ed00 	.word	0xe000ed00
    166c:	40000400 	.word	0x40000400
    1670:	40000c00 	.word	0x40000c00
    1674:	0000401e 	.word	0x0000401e
    1678:	42004000 	.word	0x42004000
    167c:	00004021 	.word	0x00004021
    1680:	42004800 	.word	0x42004800

00001684 <analogReference>:
static int _writeResolution = 8;

// Wait for synchronization of registers between the clock domains
static __inline__ void syncADC() __attribute__((always_inline, unused));
static void syncADC() {
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1684:	4a16      	ldr	r2, [pc, #88]	; (16e0 <analogReference+0x5c>)
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    1686:	b500      	push	{lr}
    1688:	0013      	movs	r3, r2
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    168a:	7e51      	ldrb	r1, [r2, #25]
    168c:	09c9      	lsrs	r1, r1, #7
    168e:	2901      	cmp	r1, #1
    1690:	d0fb      	beq.n	168a <analogReference+0x6>
  syncADC();
  switch (mode)
    1692:	3801      	subs	r0, #1
    1694:	2804      	cmp	r0, #4
    1696:	d816      	bhi.n	16c6 <analogReference+0x42>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    1698:	6919      	ldr	r1, [r3, #16]
    169a:	4a12      	ldr	r2, [pc, #72]	; (16e4 <analogReference+0x60>)
    169c:	400a      	ands	r2, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    169e:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    16a0:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    16a2:	785a      	ldrb	r2, [r3, #1]
    16a4:	438a      	bics	r2, r1
  switch (mode)
    16a6:	f000 fbfd 	bl	1ea4 <__gnu_thumb1_case_uqi>
    16aa:	0803      	.short	0x0803
    16ac:	0b06      	.short	0x0b06
    16ae:	03          	.byte	0x03
    16af:	00          	.byte	0x00
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    16b0:	0011      	movs	r1, r2
    16b2:	2201      	movs	r2, #1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    16b4:	430a      	orrs	r2, r1
    16b6:	705a      	strb	r2, [r3, #1]
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
      break;
  }
}
    16b8:	bd00      	pop	{pc}
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    16ba:	0011      	movs	r1, r2
    16bc:	2203      	movs	r2, #3
    16be:	e7f9      	b.n	16b4 <analogReference+0x30>
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    16c0:	0011      	movs	r1, r2
    16c2:	2202      	movs	r2, #2
    16c4:	e7f6      	b.n	16b4 <analogReference+0x30>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    16c6:	23f0      	movs	r3, #240	; 0xf0
    16c8:	6911      	ldr	r1, [r2, #16]
    16ca:	051b      	lsls	r3, r3, #20
    16cc:	430b      	orrs	r3, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    16ce:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    16d0:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    16d2:	7853      	ldrb	r3, [r2, #1]
    16d4:	438b      	bics	r3, r1
    16d6:	0019      	movs	r1, r3
    16d8:	2302      	movs	r3, #2
    16da:	430b      	orrs	r3, r1
    16dc:	7053      	strb	r3, [r2, #1]
}
    16de:	e7eb      	b.n	16b8 <analogReference+0x34>
    16e0:	42004000 	.word	0x42004000
    16e4:	f0ffffff 	.word	0xf0ffffff

000016e8 <pinMode>:
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    16e8:	2318      	movs	r3, #24
{
    16ea:	b530      	push	{r4, r5, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    16ec:	001d      	movs	r5, r3
{
    16ee:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    16f0:	4345      	muls	r5, r0
    16f2:	2008      	movs	r0, #8
    16f4:	4a20      	ldr	r2, [pc, #128]	; (1778 <pinMode+0x90>)
    16f6:	1955      	adds	r5, r2, r5
    16f8:	5628      	ldrsb	r0, [r5, r0]
    16fa:	3001      	adds	r0, #1
    16fc:	d014      	beq.n	1728 <pinMode+0x40>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    16fe:	2903      	cmp	r1, #3
    1700:	d812      	bhi.n	1728 <pinMode+0x40>
    1702:	0008      	movs	r0, r1
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    1704:	4363      	muls	r3, r4
    1706:	56d1      	ldrsb	r1, [r2, r3]
    1708:	18d3      	adds	r3, r2, r3
  switch ( ulMode )
    170a:	f000 fbcb 	bl	1ea4 <__gnu_thumb1_case_uqi>
    170e:	2802      	.short	0x2802
    1710:	1b0e      	.short	0x1b0e
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    1712:	6858      	ldr	r0, [r3, #4]
    1714:	01cb      	lsls	r3, r1, #7
    1716:	2102      	movs	r1, #2
    1718:	4a18      	ldr	r2, [pc, #96]	; (177c <pinMode+0x94>)
    171a:	189b      	adds	r3, r3, r2
    171c:	181a      	adds	r2, r3, r0
    171e:	3240      	adds	r2, #64	; 0x40
    1720:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1722:	2201      	movs	r2, #1
    1724:	4082      	lsls	r2, r0
    1726:	605a      	str	r2, [r3, #4]

    default:
      // do nothing
    break ;
  }
}
    1728:	bd30      	pop	{r4, r5, pc}
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    172a:	6858      	ldr	r0, [r3, #4]
    172c:	01cb      	lsls	r3, r1, #7
    172e:	2106      	movs	r1, #6
    1730:	4a12      	ldr	r2, [pc, #72]	; (177c <pinMode+0x94>)
    1732:	189b      	adds	r3, r3, r2
    1734:	181a      	adds	r2, r3, r0
    1736:	3240      	adds	r2, #64	; 0x40
    1738:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    173a:	2201      	movs	r2, #1
    173c:	4082      	lsls	r2, r0
    173e:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1740:	619a      	str	r2, [r3, #24]
    break ;
    1742:	e7f1      	b.n	1728 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    1744:	6858      	ldr	r0, [r3, #4]
    1746:	01cb      	lsls	r3, r1, #7
    1748:	2106      	movs	r1, #6
    174a:	4a0c      	ldr	r2, [pc, #48]	; (177c <pinMode+0x94>)
    174c:	189b      	adds	r3, r3, r2
    174e:	181a      	adds	r2, r3, r0
    1750:	3240      	adds	r2, #64	; 0x40
    1752:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1754:	2201      	movs	r2, #1
    1756:	4082      	lsls	r2, r0
    1758:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    175a:	615a      	str	r2, [r3, #20]
    break ;
    175c:	e7e4      	b.n	1728 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    175e:	6858      	ldr	r0, [r3, #4]
    1760:	01cb      	lsls	r3, r1, #7
    1762:	2102      	movs	r1, #2
    1764:	4a05      	ldr	r2, [pc, #20]	; (177c <pinMode+0x94>)
    1766:	189b      	adds	r3, r3, r2
    1768:	181a      	adds	r2, r3, r0
    176a:	3240      	adds	r2, #64	; 0x40
    176c:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    176e:	2201      	movs	r2, #1
    1770:	4082      	lsls	r2, r0
    1772:	609a      	str	r2, [r3, #8]
    break ;
    1774:	e7d8      	b.n	1728 <pinMode+0x40>
    1776:	46c0      	nop			; (mov r8, r8)
    1778:	000021e0 	.word	0x000021e0
    177c:	41004400 	.word	0x41004400

00001780 <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1780:	2318      	movs	r3, #24
{
    1782:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1784:	2408      	movs	r4, #8
    1786:	4358      	muls	r0, r3
    1788:	4a11      	ldr	r2, [pc, #68]	; (17d0 <digitalWrite+0x50>)
    178a:	1813      	adds	r3, r2, r0
    178c:	571c      	ldrsb	r4, [r3, r4]
    178e:	3401      	adds	r4, #1
    1790:	d01b      	beq.n	17ca <digitalWrite+0x4a>
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    1792:	2601      	movs	r6, #1
    1794:	0035      	movs	r5, r6
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    1796:	685f      	ldr	r7, [r3, #4]

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    1798:	5683      	ldrsb	r3, [r0, r2]
  uint32_t pinMask = (1ul << pin);
    179a:	40bd      	lsls	r5, r7
  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    179c:	4a0d      	ldr	r2, [pc, #52]	; (17d4 <digitalWrite+0x54>)
    179e:	01db      	lsls	r3, r3, #7
    17a0:	189a      	adds	r2, r3, r2
    17a2:	6890      	ldr	r0, [r2, #8]
    17a4:	4228      	tst	r0, r5
    17a6:	d10b      	bne.n	17c0 <digitalWrite+0x40>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    17a8:	000c      	movs	r4, r1
    17aa:	1e60      	subs	r0, r4, #1
    17ac:	4184      	sbcs	r4, r0
    17ae:	19d2      	adds	r2, r2, r7
    17b0:	3240      	adds	r2, #64	; 0x40
    17b2:	7810      	ldrb	r0, [r2, #0]
    17b4:	4034      	ands	r4, r6
    17b6:	3603      	adds	r6, #3
    17b8:	00a4      	lsls	r4, r4, #2
    17ba:	43b0      	bics	r0, r6
    17bc:	4320      	orrs	r0, r4
    17be:	7010      	strb	r0, [r2, #0]
  }

  switch ( ulVal )
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    17c0:	4a04      	ldr	r2, [pc, #16]	; (17d4 <digitalWrite+0x54>)
    17c2:	189b      	adds	r3, r3, r2
  switch ( ulVal )
    17c4:	2900      	cmp	r1, #0
    17c6:	d101      	bne.n	17cc <digitalWrite+0x4c>
      PORT->Group[port].OUTCLR.reg = pinMask;
    17c8:	615d      	str	r5, [r3, #20]
      PORT->Group[port].OUTSET.reg = pinMask;
    break ;
  }

  return ;
}
    17ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PORT->Group[port].OUTSET.reg = pinMask;
    17cc:	619d      	str	r5, [r3, #24]
    break ;
    17ce:	e7fc      	b.n	17ca <digitalWrite+0x4a>
    17d0:	000021e0 	.word	0x000021e0
    17d4:	41004400 	.word	0x41004400

000017d8 <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    17d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17da:	0003      	movs	r3, r0
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    17dc:	2018      	movs	r0, #24
    17de:	4358      	muls	r0, r3
    17e0:	4a2a      	ldr	r2, [pc, #168]	; (188c <pinPeripheral+0xb4>)
    17e2:	1810      	adds	r0, r2, r0
    17e4:	7a00      	ldrb	r0, [r0, #8]
    17e6:	b240      	sxtb	r0, r0
  {
    return -1 ;
    17e8:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    17ea:	3001      	adds	r0, #1
    17ec:	d013      	beq.n	1816 <pinPeripheral+0x3e>
  }

  switch ( ulPeripheral )
    17ee:	1c48      	adds	r0, r1, #1
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    17f0:	2400      	movs	r4, #0
  switch ( ulPeripheral )
    17f2:	280c      	cmp	r0, #12
    17f4:	d80f      	bhi.n	1816 <pinPeripheral+0x3e>
    17f6:	f000 fb55 	bl	1ea4 <__gnu_thumb1_case_uqi>
    17fa:	1c45      	.short	0x1c45
    17fc:	1c1c1c1c 	.word	0x1c1c1c1c
    1800:	071c1c1c 	.word	0x071c1c1c
    1804:	0707      	.short	0x0707
    1806:	07          	.byte	0x07
    1807:	00          	.byte	0x00
      if ( ulPeripheral == PIO_INPUT )
    1808:	2909      	cmp	r1, #9
    180a:	d106      	bne.n	181a <pinPeripheral+0x42>
        pinMode( ulPin, INPUT ) ;
    180c:	2100      	movs	r1, #0
          pinMode( ulPin, INPUT_PULLUP ) ;
    180e:	0018      	movs	r0, r3
    1810:	f7ff ff6a 	bl	16e8 <pinMode>
  return 0l ;
    1814:	2400      	movs	r4, #0
}
    1816:	0020      	movs	r0, r4
    1818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    181a:	290a      	cmp	r1, #10
    181c:	d101      	bne.n	1822 <pinPeripheral+0x4a>
          pinMode( ulPin, INPUT_PULLUP ) ;
    181e:	3908      	subs	r1, #8
    1820:	e7f5      	b.n	180e <pinPeripheral+0x36>
  return 0l ;
    1822:	2400      	movs	r4, #0
          if ( ulPeripheral == PIO_OUTPUT )
    1824:	290b      	cmp	r1, #11
    1826:	d1f6      	bne.n	1816 <pinPeripheral+0x3e>
            pinMode( ulPin, OUTPUT ) ;
    1828:	390a      	subs	r1, #10
    182a:	0018      	movs	r0, r3
    182c:	f7ff ff5c 	bl	16e8 <pinMode>
    1830:	e7f1      	b.n	1816 <pinPeripheral+0x3e>
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    1832:	2018      	movs	r0, #24
    1834:	4343      	muls	r3, r0
    1836:	18d0      	adds	r0, r2, r3
    1838:	6846      	ldr	r6, [r0, #4]
    183a:	2501      	movs	r5, #1
    183c:	0034      	movs	r4, r6
    183e:	56d2      	ldrsb	r2, [r2, r3]
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    1840:	4813      	ldr	r0, [pc, #76]	; (1890 <pinPeripheral+0xb8>)
    1842:	01d2      	lsls	r2, r2, #7
    1844:	1812      	adds	r2, r2, r0
    1846:	0873      	lsrs	r3, r6, #1
    1848:	18d3      	adds	r3, r2, r3
    184a:	3330      	adds	r3, #48	; 0x30
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    184c:	402c      	ands	r4, r5
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    184e:	7818      	ldrb	r0, [r3, #0]
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    1850:	2c00      	cmp	r4, #0
    1852:	d00b      	beq.n	186c <pinPeripheral+0x94>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    1854:	240f      	movs	r4, #15
    1856:	0109      	lsls	r1, r1, #4
    1858:	4020      	ands	r0, r4
    185a:	4301      	orrs	r1, r0
    185c:	b2c9      	uxtb	r1, r1
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    185e:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    1860:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    1862:	3240      	adds	r2, #64	; 0x40
    1864:	7813      	ldrb	r3, [r2, #0]
    1866:	431d      	orrs	r5, r3
    1868:	7015      	strb	r5, [r2, #0]
    186a:	e7d3      	b.n	1814 <pinPeripheral+0x3c>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    186c:	270f      	movs	r7, #15
    186e:	43b8      	bics	r0, r7
    1870:	4301      	orrs	r1, r0
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    1872:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    1874:	b2c9      	uxtb	r1, r1
    1876:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    1878:	0013      	movs	r3, r2
    187a:	3340      	adds	r3, #64	; 0x40
    187c:	781a      	ldrb	r2, [r3, #0]
    187e:	4315      	orrs	r5, r2
    1880:	701d      	strb	r5, [r3, #0]
    1882:	e7c8      	b.n	1816 <pinPeripheral+0x3e>
      return -1l ;
    1884:	2401      	movs	r4, #1
    1886:	4264      	negs	r4, r4
    1888:	e7c5      	b.n	1816 <pinPeripheral+0x3e>
    188a:	46c0      	nop			; (mov r8, r8)
    188c:	000021e0 	.word	0x000021e0
    1890:	41004400 	.word	0x41004400

00001894 <shiftOut>:

  return value ;
}

void shiftOut( uint32_t ulDataPin, uint32_t ulClockPin, uint32_t ulBitOrder, uint32_t ulVal )
{
    1894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1896:	0007      	movs	r7, r0
    1898:	000e      	movs	r6, r1
    189a:	2407      	movs	r4, #7
    189c:	2501      	movs	r5, #1
    189e:	9201      	str	r2, [sp, #4]
    18a0:	9300      	str	r3, [sp, #0]
  uint8_t i ;

  for ( i=0 ; i < 8 ; i++ )
  {
    if ( ulBitOrder == LSBFIRST )
    18a2:	9b01      	ldr	r3, [sp, #4]
    18a4:	2b00      	cmp	r3, #0
    18a6:	d115      	bne.n	18d4 <shiftOut+0x40>
    {
      digitalWrite( ulDataPin, !!(ulVal & (1 << i)) ) ;
    18a8:	0029      	movs	r1, r5
    18aa:	3307      	adds	r3, #7
    18ac:	1b1b      	subs	r3, r3, r4
    18ae:	4099      	lsls	r1, r3
    }
    else
    {
      digitalWrite( ulDataPin, !!(ulVal & (1 << (7 - i))) ) ;
    18b0:	9b00      	ldr	r3, [sp, #0]
    18b2:	0038      	movs	r0, r7
    18b4:	4019      	ands	r1, r3
    18b6:	1e4b      	subs	r3, r1, #1
    18b8:	4199      	sbcs	r1, r3
    18ba:	f7ff ff61 	bl	1780 <digitalWrite>
    }

    digitalWrite( ulClockPin, HIGH ) ;
    18be:	0029      	movs	r1, r5
    18c0:	0030      	movs	r0, r6
    18c2:	f7ff ff5d 	bl	1780 <digitalWrite>
    digitalWrite( ulClockPin, LOW ) ;
    18c6:	2100      	movs	r1, #0
    18c8:	0030      	movs	r0, r6
    18ca:	f7ff ff59 	bl	1780 <digitalWrite>
  for ( i=0 ; i < 8 ; i++ )
    18ce:	3c01      	subs	r4, #1
    18d0:	d2e7      	bcs.n	18a2 <shiftOut+0xe>
  }
}
    18d2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
      digitalWrite( ulDataPin, !!(ulVal & (1 << (7 - i))) ) ;
    18d4:	0029      	movs	r1, r5
    18d6:	40a1      	lsls	r1, r4
    18d8:	e7ea      	b.n	18b0 <shiftOut+0x1c>
	...

000018dc <SERCOM0_Handler>:
SERCOM sercom5( SERCOM5 ) ;

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
Uart Serial5( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
void SERCOM0_Handler()
{
    18dc:	b510      	push	{r4, lr}
  Serial1.IrqHandler();
    18de:	4802      	ldr	r0, [pc, #8]	; (18e8 <SERCOM0_Handler+0xc>)
    18e0:	f000 f9a0 	bl	1c24 <_ZN4Uart10IrqHandlerEv>
}
    18e4:	bd10      	pop	{r4, pc}
    18e6:	46c0      	nop			; (mov r8, r8)
    18e8:	200006fc 	.word	0x200006fc

000018ec <SERCOM5_Handler>:

void SERCOM5_Handler()
{
    18ec:	b510      	push	{r4, lr}
  Serial5.IrqHandler();
    18ee:	4802      	ldr	r0, [pc, #8]	; (18f8 <SERCOM5_Handler+0xc>)
    18f0:	f000 f998 	bl	1c24 <_ZN4Uart10IrqHandlerEv>
}
    18f4:	bd10      	pop	{r4, pc}
    18f6:	46c0      	nop			; (mov r8, r8)
    18f8:	200007c0 	.word	0x200007c0

000018fc <_GLOBAL__sub_I_g_APinDescription>:
    18fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    18fe:	2401      	movs	r4, #1
    1900:	2603      	movs	r6, #3
SERCOM sercom0( SERCOM0 ) ;
    1902:	4f15      	ldr	r7, [pc, #84]	; (1958 <_GLOBAL__sub_I_g_APinDescription+0x5c>)
    1904:	4915      	ldr	r1, [pc, #84]	; (195c <_GLOBAL__sub_I_g_APinDescription+0x60>)
    1906:	0038      	movs	r0, r7
    1908:	f000 f846 	bl	1998 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    190c:	4914      	ldr	r1, [pc, #80]	; (1960 <_GLOBAL__sub_I_g_APinDescription+0x64>)
    190e:	4815      	ldr	r0, [pc, #84]	; (1964 <_GLOBAL__sub_I_g_APinDescription+0x68>)
    1910:	f000 f842 	bl	1998 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    1914:	4914      	ldr	r1, [pc, #80]	; (1968 <_GLOBAL__sub_I_g_APinDescription+0x6c>)
    1916:	4815      	ldr	r0, [pc, #84]	; (196c <_GLOBAL__sub_I_g_APinDescription+0x70>)
    1918:	f000 f83e 	bl	1998 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    191c:	4914      	ldr	r1, [pc, #80]	; (1970 <_GLOBAL__sub_I_g_APinDescription+0x74>)
    191e:	4815      	ldr	r0, [pc, #84]	; (1974 <_GLOBAL__sub_I_g_APinDescription+0x78>)
    1920:	f000 f83a 	bl	1998 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    1924:	4914      	ldr	r1, [pc, #80]	; (1978 <_GLOBAL__sub_I_g_APinDescription+0x7c>)
    1926:	4815      	ldr	r0, [pc, #84]	; (197c <_GLOBAL__sub_I_g_APinDescription+0x80>)
    1928:	f000 f836 	bl	1998 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    192c:	4d14      	ldr	r5, [pc, #80]	; (1980 <_GLOBAL__sub_I_g_APinDescription+0x84>)
    192e:	4915      	ldr	r1, [pc, #84]	; (1984 <_GLOBAL__sub_I_g_APinDescription+0x88>)
    1930:	0028      	movs	r0, r5
    1932:	f000 f831 	bl	1998 <_ZN6SERCOMC1EP6Sercom>
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    1936:	0039      	movs	r1, r7
    1938:	9600      	str	r6, [sp, #0]
    193a:	0023      	movs	r3, r4
    193c:	9401      	str	r4, [sp, #4]
    193e:	2200      	movs	r2, #0
    1940:	4811      	ldr	r0, [pc, #68]	; (1988 <_GLOBAL__sub_I_g_APinDescription+0x8c>)
    1942:	f000 f949 	bl	1bd8 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial5( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
    1946:	9600      	str	r6, [sp, #0]
    1948:	0029      	movs	r1, r5
    194a:	9401      	str	r4, [sp, #4]
    194c:	231e      	movs	r3, #30
    194e:	221f      	movs	r2, #31
    1950:	480e      	ldr	r0, [pc, #56]	; (198c <_GLOBAL__sub_I_g_APinDescription+0x90>)
    1952:	f000 f941 	bl	1bd8 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
}
    1956:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1958:	20000884 	.word	0x20000884
    195c:	42000800 	.word	0x42000800
    1960:	42000c00 	.word	0x42000c00
    1964:	20000888 	.word	0x20000888
    1968:	42001000 	.word	0x42001000
    196c:	2000088c 	.word	0x2000088c
    1970:	42001400 	.word	0x42001400
    1974:	20000890 	.word	0x20000890
    1978:	42001800 	.word	0x42001800
    197c:	20000894 	.word	0x20000894
    1980:	20000898 	.word	0x20000898
    1984:	42001c00 	.word	0x42001c00
    1988:	200006fc 	.word	0x200006fc
    198c:	200007c0 	.word	0x200007c0

00001990 <_Znwj>:
    1990:	b510      	push	{r4, lr}
    1992:	f000 fb41 	bl	2018 <malloc>
    1996:	bd10      	pop	{r4, pc}

00001998 <_ZN6SERCOMC1EP6Sercom>:
#include "SERCOM.h"
#include "variant.h"

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    1998:	6001      	str	r1, [r0, #0]
}
    199a:	4770      	bx	lr

0000199c <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    199c:	b5f0      	push	{r4, r5, r6, r7, lr}
    199e:	ac05      	add	r4, sp, #20
    19a0:	7825      	ldrb	r5, [r4, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    19a2:	6804      	ldr	r4, [r0, #0]
    19a4:	1e98      	subs	r0, r3, #2
    19a6:	1e47      	subs	r7, r0, #1
    19a8:	41b8      	sbcs	r0, r7
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    19aa:	6826      	ldr	r6, [r4, #0]
    19ac:	0792      	lsls	r2, r2, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    19ae:	0600      	lsls	r0, r0, #24
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    19b0:	4332      	orrs	r2, r6
    19b2:	4302      	orrs	r2, r0

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    19b4:	2007      	movs	r0, #7
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    19b6:	6022      	str	r2, [r4, #0]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    19b8:	4001      	ands	r1, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    19ba:	01ad      	lsls	r5, r5, #6
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    19bc:	6862      	ldr	r2, [r4, #4]
    19be:	4329      	orrs	r1, r5
    19c0:	2000      	movs	r0, #0
    19c2:	2b02      	cmp	r3, #2
    19c4:	d000      	beq.n	19c8 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x2c>
    19c6:	0358      	lsls	r0, r3, #13
    19c8:	4311      	orrs	r1, r2
    19ca:	4301      	orrs	r1, r0
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    19cc:	6061      	str	r1, [r4, #4]
}
    19ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000019d0 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    19d0:	b510      	push	{r4, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    19d2:	24c0      	movs	r4, #192	; 0xc0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    19d4:	6803      	ldr	r3, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    19d6:	03a4      	lsls	r4, r4, #14
    19d8:	6818      	ldr	r0, [r3, #0]
    19da:	0512      	lsls	r2, r2, #20
    19dc:	4022      	ands	r2, r4
    19de:	4302      	orrs	r2, r0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    19e0:	20c0      	movs	r0, #192	; 0xc0
    19e2:	0409      	lsls	r1, r1, #16
    19e4:	0280      	lsls	r0, r0, #10
    19e6:	4001      	ands	r1, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    19e8:	4311      	orrs	r1, r2
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    19ea:	6019      	str	r1, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    19ec:	685a      	ldr	r2, [r3, #4]
    19ee:	4310      	orrs	r0, r2
    19f0:	6058      	str	r0, [r3, #4]
}
    19f2:	bd10      	pop	{r4, pc}

000019f4 <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    19f4:	2201      	movs	r2, #1
    19f6:	6803      	ldr	r3, [r0, #0]
    19f8:	6819      	ldr	r1, [r3, #0]
    19fa:	430a      	orrs	r2, r1
    19fc:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    19fe:	681a      	ldr	r2, [r3, #0]
    1a00:	07d2      	lsls	r2, r2, #31
    1a02:	d4fc      	bmi.n	19fe <_ZN6SERCOM9resetUARTEv+0xa>
    1a04:	69da      	ldr	r2, [r3, #28]
    1a06:	07d2      	lsls	r2, r2, #31
    1a08:	d4f9      	bmi.n	19fe <_ZN6SERCOM9resetUARTEv+0xa>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    1a0a:	4770      	bx	lr

00001a0c <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    1a0c:	2202      	movs	r2, #2
    1a0e:	6803      	ldr	r3, [r0, #0]
    1a10:	6819      	ldr	r1, [r3, #0]
    1a12:	430a      	orrs	r2, r1
    1a14:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    1a16:	69da      	ldr	r2, [r3, #28]
    1a18:	0792      	lsls	r2, r2, #30
    1a1a:	d4fc      	bmi.n	1a16 <_ZN6SERCOM10enableUARTEv+0xa>
}
    1a1c:	4770      	bx	lr

00001a1e <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    1a1e:	6803      	ldr	r3, [r0, #0]
    1a20:	7e1a      	ldrb	r2, [r3, #24]
  if(isDataRegisterEmptyUART())
    1a22:	07d2      	lsls	r2, r2, #31
    1a24:	d402      	bmi.n	1a2c <_ZN6SERCOM9flushUARTEv+0xe>
  while(!sercom->USART.INTFLAG.bit.TXC);
    1a26:	7e1a      	ldrb	r2, [r3, #24]
    1a28:	0792      	lsls	r2, r2, #30
    1a2a:	d5fc      	bpl.n	1a26 <_ZN6SERCOM9flushUARTEv+0x8>
}
    1a2c:	4770      	bx	lr

00001a2e <_ZN6SERCOM15clearStatusUARTEv>:
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    1a2e:	2200      	movs	r2, #0
    1a30:	6803      	ldr	r3, [r0, #0]
    1a32:	835a      	strh	r2, [r3, #26]
}
    1a34:	4770      	bx	lr

00001a36 <_ZN6SERCOM17availableDataUARTEv>:
  return sercom->USART.INTFLAG.bit.RXC;
    1a36:	6803      	ldr	r3, [r0, #0]
    1a38:	7e18      	ldrb	r0, [r3, #24]
    1a3a:	0740      	lsls	r0, r0, #29
    1a3c:	0fc0      	lsrs	r0, r0, #31
}
    1a3e:	4770      	bx	lr

00001a40 <_ZN6SERCOM11isUARTErrorEv>:
  return sercom->USART.INTFLAG.bit.ERROR;
    1a40:	6803      	ldr	r3, [r0, #0]
    1a42:	7e18      	ldrb	r0, [r3, #24]
    1a44:	09c0      	lsrs	r0, r0, #7
}
    1a46:	4770      	bx	lr

00001a48 <_ZN6SERCOM20acknowledgeUARTErrorEv>:
  sercom->USART.INTFLAG.bit.ERROR = 1;
    1a48:	2380      	movs	r3, #128	; 0x80
    1a4a:	6802      	ldr	r2, [r0, #0]
    1a4c:	425b      	negs	r3, r3
    1a4e:	7e11      	ldrb	r1, [r2, #24]
    1a50:	430b      	orrs	r3, r1
    1a52:	7613      	strb	r3, [r2, #24]
}
    1a54:	4770      	bx	lr

00001a56 <_ZN6SERCOM12readDataUARTEv>:
}

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    1a56:	6803      	ldr	r3, [r0, #0]
    1a58:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    1a5a:	b2c0      	uxtb	r0, r0
}
    1a5c:	4770      	bx	lr

00001a5e <_ZN6SERCOM13writeDataUARTEh>:
  return sercom->USART.INTFLAG.bit.DRE;
    1a5e:	6803      	ldr	r3, [r0, #0]
    1a60:	7e1a      	ldrb	r2, [r3, #24]

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    1a62:	07d2      	lsls	r2, r2, #31
    1a64:	d5fc      	bpl.n	1a60 <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    1a66:	b289      	uxth	r1, r1
  return 1;
}
    1a68:	2001      	movs	r0, #1
  sercom->USART.DATA.reg = (uint16_t)data;
    1a6a:	8519      	strh	r1, [r3, #40]	; 0x28
}
    1a6c:	4770      	bx	lr
	...

00001a70 <_ZN6SERCOM13initClockNVICEv>:
void SERCOM::initClockNVIC( void )
{
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
    1a70:	6803      	ldr	r3, [r0, #0]
    1a72:	4a21      	ldr	r2, [pc, #132]	; (1af8 <_ZN6SERCOM13initClockNVICEv+0x88>)
{
    1a74:	b530      	push	{r4, r5, lr}
  if(sercom == SERCOM0)
    1a76:	4293      	cmp	r3, r2
    1a78:	d011      	beq.n	1a9e <_ZN6SERCOM13initClockNVICEv+0x2e>
  {
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
    1a7a:	4a20      	ldr	r2, [pc, #128]	; (1afc <_ZN6SERCOM13initClockNVICEv+0x8c>)
    1a7c:	4293      	cmp	r3, r2
    1a7e:	d02f      	beq.n	1ae0 <_ZN6SERCOM13initClockNVICEv+0x70>
  {
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
    1a80:	4a1f      	ldr	r2, [pc, #124]	; (1b00 <_ZN6SERCOM13initClockNVICEv+0x90>)
    1a82:	4293      	cmp	r3, r2
    1a84:	d02f      	beq.n	1ae6 <_ZN6SERCOM13initClockNVICEv+0x76>
  {
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
    1a86:	4a1f      	ldr	r2, [pc, #124]	; (1b04 <_ZN6SERCOM13initClockNVICEv+0x94>)
    1a88:	4293      	cmp	r3, r2
    1a8a:	d02f      	beq.n	1aec <_ZN6SERCOM13initClockNVICEv+0x7c>
  {
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
  }
#if defined(SERCOM4)
  else if(sercom == SERCOM4)
    1a8c:	4a1e      	ldr	r2, [pc, #120]	; (1b08 <_ZN6SERCOM13initClockNVICEv+0x98>)
    1a8e:	4293      	cmp	r3, r2
    1a90:	d02f      	beq.n	1af2 <_ZN6SERCOM13initClockNVICEv+0x82>
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
  }
#endif
#if defined(SERCOM5)
  else if(sercom == SERCOM5)
    1a92:	4a1e      	ldr	r2, [pc, #120]	; (1b0c <_ZN6SERCOM13initClockNVICEv+0x9c>)
    1a94:	4293      	cmp	r3, r2
    1a96:	d122      	bne.n	1ade <_ZN6SERCOM13initClockNVICEv+0x6e>
  {
    clockId = GCM_SERCOM5_CORE;
    IdNvic = SERCOM5_IRQn;
    1a98:	230e      	movs	r3, #14
    clockId = GCM_SERCOM5_CORE;
    1a9a:	2219      	movs	r2, #25
    1a9c:	e001      	b.n	1aa2 <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM0_IRQn;
    1a9e:	2309      	movs	r3, #9
    clockId = GCM_SERCOM0_CORE;
    1aa0:	2214      	movs	r2, #20
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1aa2:	2101      	movs	r1, #1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1aa4:	2503      	movs	r5, #3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1aa6:	4099      	lsls	r1, r3
    1aa8:	4819      	ldr	r0, [pc, #100]	; (1b10 <_ZN6SERCOM13initClockNVICEv+0xa0>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1aaa:	24c0      	movs	r4, #192	; 0xc0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1aac:	6001      	str	r1, [r0, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1aae:	0899      	lsrs	r1, r3, #2
    1ab0:	402b      	ands	r3, r5
    1ab2:	40ab      	lsls	r3, r5
    1ab4:	35fc      	adds	r5, #252	; 0xfc
    1ab6:	409d      	lsls	r5, r3
    1ab8:	0089      	lsls	r1, r1, #2
    1aba:	1809      	adds	r1, r1, r0
    1abc:	00a4      	lsls	r4, r4, #2
    1abe:	5908      	ldr	r0, [r1, r4]
    1ac0:	43a8      	bics	r0, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    1ac2:	25c0      	movs	r5, #192	; 0xc0
    1ac4:	409d      	lsls	r5, r3
    1ac6:	002b      	movs	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1ac8:	4303      	orrs	r3, r0
    1aca:	510b      	str	r3, [r1, r4]
  NVIC_EnableIRQ(IdNvic);
  NVIC_SetPriority (IdNvic, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority */

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
    1acc:	2380      	movs	r3, #128	; 0x80
    1ace:	01db      	lsls	r3, r3, #7
    1ad0:	431a      	orrs	r2, r3
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    1ad2:	4b10      	ldr	r3, [pc, #64]	; (1b14 <_ZN6SERCOM13initClockNVICEv+0xa4>)
    1ad4:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    1ad6:	785a      	ldrb	r2, [r3, #1]
    1ad8:	b252      	sxtb	r2, r2
    1ada:	2a00      	cmp	r2, #0
    1adc:	dbfb      	blt.n	1ad6 <_ZN6SERCOM13initClockNVICEv+0x66>
  {
    /* Wait for synchronization */
  }
}
    1ade:	bd30      	pop	{r4, r5, pc}
    IdNvic = SERCOM1_IRQn;
    1ae0:	230a      	movs	r3, #10
    clockId = GCM_SERCOM1_CORE;
    1ae2:	2215      	movs	r2, #21
    1ae4:	e7dd      	b.n	1aa2 <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM2_IRQn;
    1ae6:	230b      	movs	r3, #11
    clockId = GCM_SERCOM2_CORE;
    1ae8:	2216      	movs	r2, #22
    1aea:	e7da      	b.n	1aa2 <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM3_IRQn;
    1aec:	230c      	movs	r3, #12
    clockId = GCM_SERCOM3_CORE;
    1aee:	2217      	movs	r2, #23
    1af0:	e7d7      	b.n	1aa2 <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM4_IRQn;
    1af2:	230d      	movs	r3, #13
    clockId = GCM_SERCOM4_CORE;
    1af4:	2218      	movs	r2, #24
    1af6:	e7d4      	b.n	1aa2 <_ZN6SERCOM13initClockNVICEv+0x32>
    1af8:	42000800 	.word	0x42000800
    1afc:	42000c00 	.word	0x42000c00
    1b00:	42001000 	.word	0x42001000
    1b04:	42001400 	.word	0x42001400
    1b08:	42001800 	.word	0x42001800
    1b0c:	42001c00 	.word	0x42001c00
    1b10:	e000e100 	.word	0xe000e100
    1b14:	40000c00 	.word	0x40000c00

00001b18 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
{
    1b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b1a:	0004      	movs	r4, r0
    1b1c:	0016      	movs	r6, r2
    1b1e:	000f      	movs	r7, r1
    1b20:	001d      	movs	r5, r3
  initClockNVIC();
    1b22:	f7ff ffa5 	bl	1a70 <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    1b26:	0020      	movs	r0, r4
    1b28:	f7ff ff64 	bl	19f4 <_ZN6SERCOM9resetUARTEv>
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    1b2c:	221c      	movs	r2, #28
    1b2e:	00bb      	lsls	r3, r7, #2
    1b30:	4013      	ands	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    1b32:	0772      	lsls	r2, r6, #29
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    1b34:	6824      	ldr	r4, [r4, #0]
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    1b36:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    1b38:	4313      	orrs	r3, r2
    1b3a:	6023      	str	r3, [r4, #0]
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    1b3c:	2384      	movs	r3, #132	; 0x84
    1b3e:	75a3      	strb	r3, [r4, #22]
  if ( mode == UART_INT_CLOCK )
    1b40:	2f01      	cmp	r7, #1
    1b42:	d118      	bne.n	1b76 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x5e>
      sampleRateValue = 16;
    1b44:	2110      	movs	r1, #16
    if (sampleRate == SAMPLE_RATE_x16) {
    1b46:	2e01      	cmp	r6, #1
    1b48:	d000      	beq.n	1b4c <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x34>
      sampleRateValue = 8;
    1b4a:	3908      	subs	r1, #8
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    1b4c:	4b0a      	ldr	r3, [pc, #40]	; (1b78 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x60>)
    1b4e:	4369      	muls	r1, r5
    1b50:	6818      	ldr	r0, [r3, #0]
    1b52:	00c0      	lsls	r0, r0, #3
    1b54:	f000 f9b0 	bl	1eb8 <__udivsi3>
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    1b58:	2207      	movs	r2, #7
    1b5a:	89a3      	ldrh	r3, [r4, #12]
    1b5c:	4002      	ands	r2, r0
    1b5e:	04db      	lsls	r3, r3, #19
    1b60:	0352      	lsls	r2, r2, #13
    1b62:	0cdb      	lsrs	r3, r3, #19
    1b64:	4313      	orrs	r3, r2
    1b66:	81a3      	strh	r3, [r4, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    1b68:	0403      	lsls	r3, r0, #16
    1b6a:	89a0      	ldrh	r0, [r4, #12]
    1b6c:	0cdb      	lsrs	r3, r3, #19
    1b6e:	0b40      	lsrs	r0, r0, #13
    1b70:	0340      	lsls	r0, r0, #13
    1b72:	4318      	orrs	r0, r3
    1b74:	81a0      	strh	r0, [r4, #12]
}
    1b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b78:	20000080 	.word	0x20000080

00001b7c <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
    1b7c:	2001      	movs	r0, #1
    1b7e:	4770      	bx	lr

00001b80 <_ZN4Uart5beginEm>:
  uc_padRX=_padRX ;
  uc_padTX=_padTX;
}

void Uart::begin(unsigned long baudrate)
{
    1b80:	b510      	push	{r4, lr}
  begin(baudrate, SERIAL_8N1);
    1b82:	6803      	ldr	r3, [r0, #0]
    1b84:	4a01      	ldr	r2, [pc, #4]	; (1b8c <_ZN4Uart5beginEm+0xc>)
    1b86:	69db      	ldr	r3, [r3, #28]
    1b88:	4798      	blx	r3
}
    1b8a:	bd10      	pop	{r4, pc}
    1b8c:	00000413 	.word	0x00000413

00001b90 <_ZN4Uart3endEv>:

  sercom->enableUART();
}

void Uart::end()
{
    1b90:	b510      	push	{r4, lr}
    1b92:	0004      	movs	r4, r0
  sercom->resetUART();
    1b94:	6900      	ldr	r0, [r0, #16]
    1b96:	f7ff ff2d 	bl	19f4 <_ZN6SERCOM9resetUARTEv>
  rxBuffer.clear();
    1b9a:	0020      	movs	r0, r4
    1b9c:	3014      	adds	r0, #20
    1b9e:	f000 f94e 	bl	1e3e <_ZN10RingBuffer5clearEv>
}
    1ba2:	bd10      	pop	{r4, pc}

00001ba4 <_ZN4Uart5flushEv>:

void Uart::flush()
{
    1ba4:	b510      	push	{r4, lr}
  sercom->flushUART();
    1ba6:	6900      	ldr	r0, [r0, #16]
    1ba8:	f7ff ff39 	bl	1a1e <_ZN6SERCOM9flushUARTEv>
}
    1bac:	bd10      	pop	{r4, pc}

00001bae <_ZN4Uart9availableEv>:
    sercom->clearStatusUART();
  }
}

int Uart::available()
{
    1bae:	b510      	push	{r4, lr}
  return rxBuffer.available();
    1bb0:	3014      	adds	r0, #20
    1bb2:	f000 f95f 	bl	1e74 <_ZN10RingBuffer9availableEv>
}
    1bb6:	bd10      	pop	{r4, pc}

00001bb8 <_ZN4Uart4peekEv>:
{
  return (sercom->isDataRegisterEmptyUART() ? 1 : 0);
}

int Uart::peek()
{
    1bb8:	b510      	push	{r4, lr}
  return rxBuffer.peek();
    1bba:	3014      	adds	r0, #20
    1bbc:	f000 f964 	bl	1e88 <_ZN10RingBuffer4peekEv>
}
    1bc0:	bd10      	pop	{r4, pc}

00001bc2 <_ZN4Uart4readEv>:

int Uart::read()
{
    1bc2:	b510      	push	{r4, lr}
  return rxBuffer.read_char();
    1bc4:	3014      	adds	r0, #20
    1bc6:	f000 f941 	bl	1e4c <_ZN10RingBuffer9read_charEv>
}
    1bca:	bd10      	pop	{r4, pc}

00001bcc <_ZN4Uart5writeEh>:

size_t Uart::write(const uint8_t data)
{
    1bcc:	b510      	push	{r4, lr}
  sercom->writeDataUART(data);
    1bce:	6900      	ldr	r0, [r0, #16]
    1bd0:	f7ff ff45 	bl	1a5e <_ZN6SERCOM13writeDataUARTEh>
  return 1;
}
    1bd4:	2001      	movs	r0, #1
    1bd6:	bd10      	pop	{r4, pc}

00001bd8 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX)
    1bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1bda:	001d      	movs	r5, r3
    1bdc:	ab08      	add	r3, sp, #32
    1bde:	781b      	ldrb	r3, [r3, #0]
    1be0:	0004      	movs	r4, r0
    1be2:	9300      	str	r3, [sp, #0]
    1be4:	ab09      	add	r3, sp, #36	; 0x24
    1be6:	781b      	ldrb	r3, [r3, #0]
    1be8:	0016      	movs	r6, r2
    1bea:	9301      	str	r3, [sp, #4]
    1bec:	2300      	movs	r3, #0
    1bee:	6043      	str	r3, [r0, #4]
    1bf0:	23fa      	movs	r3, #250	; 0xfa
    1bf2:	009b      	lsls	r3, r3, #2
    1bf4:	6083      	str	r3, [r0, #8]
    1bf6:	4b0a      	ldr	r3, [pc, #40]	; (1c20 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x48>)
    1bf8:	000f      	movs	r7, r1
    1bfa:	3308      	adds	r3, #8
    1bfc:	6003      	str	r3, [r0, #0]
    1bfe:	3014      	adds	r0, #20
    1c00:	f000 f8fe 	bl	1e00 <_ZN10RingBufferC1Ev>
  uc_padRX=_padRX ;
    1c04:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
    1c06:	0023      	movs	r3, r4
  uc_padRX=_padRX ;
    1c08:	7812      	ldrb	r2, [r2, #0]
  uc_pinRX = _pinRX;
    1c0a:	33c0      	adds	r3, #192	; 0xc0
  sercom = _s;
    1c0c:	6127      	str	r7, [r4, #16]
  uc_padRX=_padRX ;
    1c0e:	709a      	strb	r2, [r3, #2]
  uc_padTX=_padTX;
    1c10:	466a      	mov	r2, sp
    1c12:	7912      	ldrb	r2, [r2, #4]
  uc_pinRX = _pinRX;
    1c14:	701e      	strb	r6, [r3, #0]
  uc_pinTX = _pinTX;
    1c16:	705d      	strb	r5, [r3, #1]
}
    1c18:	0020      	movs	r0, r4
  uc_padTX=_padTX;
    1c1a:	70da      	strb	r2, [r3, #3]
}
    1c1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1c1e:	46c0      	nop			; (mov r8, r8)
    1c20:	00002630 	.word	0x00002630

00001c24 <_ZN4Uart10IrqHandlerEv>:
{
    1c24:	b510      	push	{r4, lr}
    1c26:	0004      	movs	r4, r0
  if (sercom->availableDataUART()) {
    1c28:	6900      	ldr	r0, [r0, #16]
    1c2a:	f7ff ff04 	bl	1a36 <_ZN6SERCOM17availableDataUARTEv>
    1c2e:	2800      	cmp	r0, #0
    1c30:	d007      	beq.n	1c42 <_ZN4Uart10IrqHandlerEv+0x1e>
    rxBuffer.store_char(sercom->readDataUART());
    1c32:	6920      	ldr	r0, [r4, #16]
    1c34:	f7ff ff0f 	bl	1a56 <_ZN6SERCOM12readDataUARTEv>
    1c38:	0001      	movs	r1, r0
    1c3a:	0020      	movs	r0, r4
    1c3c:	3014      	adds	r0, #20
    1c3e:	f000 f8ec 	bl	1e1a <_ZN10RingBuffer10store_charEh>
  if (sercom->isUARTError()) {
    1c42:	6920      	ldr	r0, [r4, #16]
    1c44:	f7ff fefc 	bl	1a40 <_ZN6SERCOM11isUARTErrorEv>
    1c48:	2800      	cmp	r0, #0
    1c4a:	d005      	beq.n	1c58 <_ZN4Uart10IrqHandlerEv+0x34>
    sercom->acknowledgeUARTError();
    1c4c:	6920      	ldr	r0, [r4, #16]
    1c4e:	f7ff fefb 	bl	1a48 <_ZN6SERCOM20acknowledgeUARTErrorEv>
    sercom->clearStatusUART();
    1c52:	6920      	ldr	r0, [r4, #16]
    1c54:	f7ff feeb 	bl	1a2e <_ZN6SERCOM15clearStatusUARTEv>
}
    1c58:	bd10      	pop	{r4, pc}

00001c5a <_ZN4Uart16extractNbStopBitEt>:

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
    1c5a:	20f0      	movs	r0, #240	; 0xf0
    1c5c:	4001      	ands	r1, r0
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    1c5e:	3930      	subs	r1, #48	; 0x30
    1c60:	4248      	negs	r0, r1
    1c62:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
    1c64:	4770      	bx	lr

00001c66 <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    1c66:	23f0      	movs	r3, #240	; 0xf0
    1c68:	011b      	lsls	r3, r3, #4
    1c6a:	4019      	ands	r1, r3
    1c6c:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    1c6e:	2006      	movs	r0, #6
  switch(config & HARDSER_DATA_MASK)
    1c70:	009b      	lsls	r3, r3, #2
    1c72:	4299      	cmp	r1, r3
    1c74:	d00a      	beq.n	1c8c <_ZN4Uart15extractCharSizeEt+0x26>
    1c76:	3301      	adds	r3, #1
    1c78:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    1c7a:	3001      	adds	r0, #1
  switch(config & HARDSER_DATA_MASK)
    1c7c:	4299      	cmp	r1, r3
    1c7e:	d005      	beq.n	1c8c <_ZN4Uart15extractCharSizeEt+0x26>
    1c80:	2380      	movs	r3, #128	; 0x80
      return UART_CHAR_SIZE_5_BITS;
    1c82:	3802      	subs	r0, #2
  switch(config & HARDSER_DATA_MASK)
    1c84:	005b      	lsls	r3, r3, #1
    1c86:	4299      	cmp	r1, r3
    1c88:	d000      	beq.n	1c8c <_ZN4Uart15extractCharSizeEt+0x26>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    1c8a:	2000      	movs	r0, #0

  }
}
    1c8c:	4770      	bx	lr

00001c8e <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    1c8e:	200f      	movs	r0, #15
    1c90:	4001      	ands	r1, r0
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    1c92:	2000      	movs	r0, #0
  switch(config & HARDSER_PARITY_MASK)
    1c94:	2901      	cmp	r1, #1
    1c96:	d003      	beq.n	1ca0 <_ZN4Uart13extractParityEt+0x12>
      return SERCOM_NO_PARITY;
    1c98:	3902      	subs	r1, #2
    1c9a:	1e48      	subs	r0, r1, #1
    1c9c:	4181      	sbcs	r1, r0
    1c9e:	1c48      	adds	r0, r1, #1

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
    1ca0:	4770      	bx	lr
	...

00001ca4 <_ZN4Uart5beginEmt>:
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1ca4:	0003      	movs	r3, r0
{
    1ca6:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1ca8:	2618      	movs	r6, #24
{
    1caa:	b085      	sub	sp, #20
    1cac:	9103      	str	r1, [sp, #12]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1cae:	33c0      	adds	r3, #192	; 0xc0
{
    1cb0:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1cb2:	7818      	ldrb	r0, [r3, #0]
    1cb4:	0033      	movs	r3, r6
    1cb6:	2108      	movs	r1, #8
    1cb8:	4343      	muls	r3, r0
    1cba:	4d1b      	ldr	r5, [pc, #108]	; (1d28 <_ZN4Uart5beginEmt+0x84>)
{
    1cbc:	0017      	movs	r7, r2
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1cbe:	18eb      	adds	r3, r5, r3
    1cc0:	5659      	ldrsb	r1, [r3, r1]
    1cc2:	f7ff fd89 	bl	17d8 <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    1cc6:	0023      	movs	r3, r4
    1cc8:	2108      	movs	r1, #8
    1cca:	33c1      	adds	r3, #193	; 0xc1
    1ccc:	7818      	ldrb	r0, [r3, #0]
    1cce:	4346      	muls	r6, r0
    1cd0:	19ad      	adds	r5, r5, r6
    1cd2:	5669      	ldrsb	r1, [r5, r1]
    1cd4:	f7ff fd80 	bl	17d8 <pinPeripheral>
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    1cd8:	2201      	movs	r2, #1
    1cda:	9b03      	ldr	r3, [sp, #12]
    1cdc:	0011      	movs	r1, r2
    1cde:	6920      	ldr	r0, [r4, #16]
    1ce0:	f7ff ff1a 	bl	1b18 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    1ce4:	0039      	movs	r1, r7
    1ce6:	0020      	movs	r0, r4
    1ce8:	f7ff ffbd 	bl	1c66 <_ZN4Uart15extractCharSizeEt>
    1cec:	0039      	movs	r1, r7
    1cee:	0005      	movs	r5, r0
    1cf0:	0020      	movs	r0, r4
    1cf2:	f7ff ffcc 	bl	1c8e <_ZN4Uart13extractParityEt>
    1cf6:	0039      	movs	r1, r7
    1cf8:	0006      	movs	r6, r0
    1cfa:	0020      	movs	r0, r4
    1cfc:	f7ff ffad 	bl	1c5a <_ZN4Uart16extractNbStopBitEt>
    1d00:	0033      	movs	r3, r6
    1d02:	9000      	str	r0, [sp, #0]
    1d04:	0029      	movs	r1, r5
    1d06:	6920      	ldr	r0, [r4, #16]
    1d08:	2201      	movs	r2, #1
    1d0a:	f7ff fe47 	bl	199c <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    1d0e:	0023      	movs	r3, r4
    1d10:	33c2      	adds	r3, #194	; 0xc2
    1d12:	781a      	ldrb	r2, [r3, #0]
    1d14:	7859      	ldrb	r1, [r3, #1]
    1d16:	6920      	ldr	r0, [r4, #16]
    1d18:	f7ff fe5a 	bl	19d0 <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
    1d1c:	6920      	ldr	r0, [r4, #16]
    1d1e:	f7ff fe75 	bl	1a0c <_ZN6SERCOM10enableUARTEv>
}
    1d22:	b005      	add	sp, #20
    1d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d26:	46c0      	nop			; (mov r8, r8)
    1d28:	000021e0 	.word	0x000021e0

00001d2c <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    1d2c:	b570      	push	{r4, r5, r6, lr}
    1d2e:	000e      	movs	r6, r1
	int sent = 0;
    1d30:	2500      	movs	r5, #0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1d32:	6844      	ldr	r4, [r0, #4]
    1d34:	2c00      	cmp	r4, #0
    1d36:	d00b      	beq.n	1d50 <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
		int res = node->getInterface(interfaceCount);
    1d38:	6823      	ldr	r3, [r4, #0]
    1d3a:	0031      	movs	r1, r6
    1d3c:	685b      	ldr	r3, [r3, #4]
    1d3e:	0020      	movs	r0, r4
    1d40:	4798      	blx	r3
		if (res < 0)
    1d42:	2800      	cmp	r0, #0
    1d44:	db02      	blt.n	1d4c <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
			return -1;
		sent += res;
    1d46:	182d      	adds	r5, r5, r0
	for (node = rootNode; node; node = node->next) {
    1d48:	68e4      	ldr	r4, [r4, #12]
    1d4a:	e7f3      	b.n	1d34 <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
			return -1;
    1d4c:	2501      	movs	r5, #1
    1d4e:	426d      	negs	r5, r5
	}
	return sent;
}
    1d50:	0028      	movs	r0, r5
    1d52:	bd70      	pop	{r4, r5, r6, pc}

00001d54 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    1d54:	b570      	push	{r4, r5, r6, lr}
    1d56:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1d58:	6844      	ldr	r4, [r0, #4]
    1d5a:	2c00      	cmp	r4, #0
    1d5c:	d008      	beq.n	1d70 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
		int ret = node->getDescriptor(setup);
    1d5e:	6823      	ldr	r3, [r4, #0]
    1d60:	0029      	movs	r1, r5
    1d62:	689b      	ldr	r3, [r3, #8]
    1d64:	0020      	movs	r0, r4
    1d66:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
    1d68:	2800      	cmp	r0, #0
    1d6a:	d102      	bne.n	1d72 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    1d6c:	68e4      	ldr	r4, [r4, #12]
    1d6e:	e7f4      	b.n	1d5a <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
			return ret;
	}
	return 0;
    1d70:	0020      	movs	r0, r4
}
    1d72:	bd70      	pop	{r4, r5, r6, pc}

00001d74 <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    1d74:	b570      	push	{r4, r5, r6, lr}
    1d76:	000d      	movs	r5, r1
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    1d78:	6844      	ldr	r4, [r0, #4]
    1d7a:	2c00      	cmp	r4, #0
    1d7c:	d007      	beq.n	1d8e <_ZN13PluggableUSB_12getShortNameEPc+0x1a>
               iSerialNum += node->getShortName(iSerialNum);
    1d7e:	6823      	ldr	r3, [r4, #0]
    1d80:	0029      	movs	r1, r5
    1d82:	0020      	movs	r0, r4
    1d84:	68db      	ldr	r3, [r3, #12]
    1d86:	4798      	blx	r3
       for (node = rootNode; node; node = node->next) {
    1d88:	68e4      	ldr	r4, [r4, #12]
               iSerialNum += node->getShortName(iSerialNum);
    1d8a:	182d      	adds	r5, r5, r0
       for (node = rootNode; node; node = node->next) {
    1d8c:	e7f5      	b.n	1d7a <_ZN13PluggableUSB_12getShortNameEPc+0x6>
       }
       *iSerialNum = 0;
    1d8e:	702c      	strb	r4, [r5, #0]
}
    1d90:	bd70      	pop	{r4, r5, r6, pc}

00001d92 <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    1d92:	b570      	push	{r4, r5, r6, lr}
    1d94:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1d96:	6844      	ldr	r4, [r0, #4]
    1d98:	2c00      	cmp	r4, #0
    1d9a:	d008      	beq.n	1dae <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
		if (node->setup(setup)) {
    1d9c:	6823      	ldr	r3, [r4, #0]
    1d9e:	0029      	movs	r1, r5
    1da0:	681b      	ldr	r3, [r3, #0]
    1da2:	0020      	movs	r0, r4
    1da4:	4798      	blx	r3
    1da6:	2800      	cmp	r0, #0
    1da8:	d102      	bne.n	1db0 <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    1daa:	68e4      	ldr	r4, [r4, #12]
    1dac:	e7f4      	b.n	1d98 <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
			return true;
		}
	}
	return false;
    1dae:	0020      	movs	r0, r4
}
    1db0:	bd70      	pop	{r4, r5, r6, pc}
	...

00001db4 <_Z12PluggableUSBv>:
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    1db4:	2101      	movs	r1, #1
    1db6:	4a06      	ldr	r2, [pc, #24]	; (1dd0 <_Z12PluggableUSBv+0x1c>)
{
    1db8:	b510      	push	{r4, lr}
	static PluggableUSB_ obj;
    1dba:	6813      	ldr	r3, [r2, #0]
    1dbc:	4805      	ldr	r0, [pc, #20]	; (1dd4 <_Z12PluggableUSBv+0x20>)
    1dbe:	400b      	ands	r3, r1
    1dc0:	d105      	bne.n	1dce <_Z12PluggableUSBv+0x1a>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    1dc2:	2402      	movs	r4, #2
    1dc4:	7004      	strb	r4, [r0, #0]
    1dc6:	1924      	adds	r4, r4, r4
    1dc8:	7044      	strb	r4, [r0, #1]
    1dca:	6043      	str	r3, [r0, #4]
	static PluggableUSB_ obj;
    1dcc:	6011      	str	r1, [r2, #0]
}
    1dce:	bd10      	pop	{r4, pc}
    1dd0:	2000089c 	.word	0x2000089c
    1dd4:	200008a0 	.word	0x200008a0

00001dd8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    1dd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1dda:	0006      	movs	r6, r0
    1ddc:	000d      	movs	r5, r1
    1dde:	000c      	movs	r4, r1
    1de0:	188b      	adds	r3, r1, r2
    1de2:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
    1de4:	9b01      	ldr	r3, [sp, #4]
    1de6:	1b67      	subs	r7, r4, r5
    1de8:	429c      	cmp	r4, r3
    1dea:	d007      	beq.n	1dfc <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    1dec:	6833      	ldr	r3, [r6, #0]
    1dee:	7821      	ldrb	r1, [r4, #0]
    1df0:	681b      	ldr	r3, [r3, #0]
    1df2:	0030      	movs	r0, r6
    1df4:	4798      	blx	r3
    1df6:	3401      	adds	r4, #1
    1df8:	2800      	cmp	r0, #0
    1dfa:	d1f3      	bne.n	1de4 <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
    1dfc:	0038      	movs	r0, r7
    1dfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00001e00 <_ZN10RingBufferC1Ev>:
*/

#include "RingBuffer.h"
#include <string.h>

RingBuffer::RingBuffer( void )
    1e00:	b510      	push	{r4, lr}
    1e02:	0004      	movs	r4, r0
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    1e04:	22a4      	movs	r2, #164	; 0xa4
    1e06:	2100      	movs	r1, #0
    1e08:	f000 f919 	bl	203e <memset>
  }
}

void RingBuffer::clear()
{
	_iHead = 0;
    1e0c:	0022      	movs	r2, r4
    1e0e:	2300      	movs	r3, #0
    1e10:	32a4      	adds	r2, #164	; 0xa4
}
    1e12:	0020      	movs	r0, r4
	_iHead = 0;
    1e14:	6013      	str	r3, [r2, #0]
	_iTail = 0;
    1e16:	6053      	str	r3, [r2, #4]
}
    1e18:	bd10      	pop	{r4, pc}

00001e1a <_ZN10RingBuffer10store_charEh>:
{
    1e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int i = nextIndex(_iHead);
    1e1c:	0005      	movs	r5, r0
{
    1e1e:	0004      	movs	r4, r0
  int i = nextIndex(_iHead);
    1e20:	35a4      	adds	r5, #164	; 0xa4
    1e22:	682e      	ldr	r6, [r5, #0]
{
    1e24:	000f      	movs	r7, r1
	return _aucBuffer[_iTail];
}

int RingBuffer::nextIndex(int index)
{
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    1e26:	1c70      	adds	r0, r6, #1
    1e28:	21a4      	movs	r1, #164	; 0xa4
    1e2a:	f000 f8cb 	bl	1fc4 <__aeabi_uidivmod>
  if ( i != _iTail )
    1e2e:	0023      	movs	r3, r4
    1e30:	33a8      	adds	r3, #168	; 0xa8
    1e32:	681b      	ldr	r3, [r3, #0]
    1e34:	428b      	cmp	r3, r1
    1e36:	d001      	beq.n	1e3c <_ZN10RingBuffer10store_charEh+0x22>
    _aucBuffer[_iHead] = c ;
    1e38:	55a7      	strb	r7, [r4, r6]
    _iHead = i ;
    1e3a:	6029      	str	r1, [r5, #0]
}
    1e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001e3e <_ZN10RingBuffer5clearEv>:
	_iHead = 0;
    1e3e:	0002      	movs	r2, r0
    1e40:	2300      	movs	r3, #0
    1e42:	32a4      	adds	r2, #164	; 0xa4
	_iTail = 0;
    1e44:	30a8      	adds	r0, #168	; 0xa8
	_iHead = 0;
    1e46:	6013      	str	r3, [r2, #0]
	_iTail = 0;
    1e48:	6003      	str	r3, [r0, #0]
}
    1e4a:	4770      	bx	lr

00001e4c <_ZN10RingBuffer9read_charEv>:
{
    1e4c:	b570      	push	{r4, r5, r6, lr}
	if(_iTail == _iHead)
    1e4e:	0002      	movs	r2, r0
    1e50:	0005      	movs	r5, r0
    1e52:	32a4      	adds	r2, #164	; 0xa4
    1e54:	35a8      	adds	r5, #168	; 0xa8
    1e56:	682b      	ldr	r3, [r5, #0]
    1e58:	6812      	ldr	r2, [r2, #0]
    1e5a:	4293      	cmp	r3, r2
    1e5c:	d007      	beq.n	1e6e <_ZN10RingBuffer9read_charEv+0x22>
	uint8_t value = _aucBuffer[_iTail];
    1e5e:	5cc4      	ldrb	r4, [r0, r3]
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    1e60:	21a4      	movs	r1, #164	; 0xa4
    1e62:	1c58      	adds	r0, r3, #1
    1e64:	f000 f8ae 	bl	1fc4 <__aeabi_uidivmod>
	return value;
    1e68:	0020      	movs	r0, r4
	_iTail = nextIndex(_iTail);
    1e6a:	6029      	str	r1, [r5, #0]
}
    1e6c:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1e6e:	2001      	movs	r0, #1
    1e70:	4240      	negs	r0, r0
    1e72:	e7fb      	b.n	1e6c <_ZN10RingBuffer9read_charEv+0x20>

00001e74 <_ZN10RingBuffer9availableEv>:
	int delta = _iHead - _iTail;
    1e74:	0002      	movs	r2, r0
    1e76:	0003      	movs	r3, r0
    1e78:	32a4      	adds	r2, #164	; 0xa4
    1e7a:	33a8      	adds	r3, #168	; 0xa8
    1e7c:	6810      	ldr	r0, [r2, #0]
    1e7e:	681b      	ldr	r3, [r3, #0]
    1e80:	1ac0      	subs	r0, r0, r3
	if(delta < 0)
    1e82:	d500      	bpl.n	1e86 <_ZN10RingBuffer9availableEv+0x12>
		return SERIAL_BUFFER_SIZE + delta;
    1e84:	30a4      	adds	r0, #164	; 0xa4
}
    1e86:	4770      	bx	lr

00001e88 <_ZN10RingBuffer4peekEv>:
	if(_iTail == _iHead)
    1e88:	0003      	movs	r3, r0
    1e8a:	0002      	movs	r2, r0
    1e8c:	33a8      	adds	r3, #168	; 0xa8
    1e8e:	32a4      	adds	r2, #164	; 0xa4
    1e90:	681b      	ldr	r3, [r3, #0]
    1e92:	6812      	ldr	r2, [r2, #0]
    1e94:	4293      	cmp	r3, r2
    1e96:	d001      	beq.n	1e9c <_ZN10RingBuffer4peekEv+0x14>
	return _aucBuffer[_iTail];
    1e98:	5cc0      	ldrb	r0, [r0, r3]
}
    1e9a:	4770      	bx	lr
		return -1;
    1e9c:	2001      	movs	r0, #1
    1e9e:	4240      	negs	r0, r0
    1ea0:	e7fb      	b.n	1e9a <_ZN10RingBuffer4peekEv+0x12>
	...

00001ea4 <__gnu_thumb1_case_uqi>:
    1ea4:	b402      	push	{r1}
    1ea6:	4671      	mov	r1, lr
    1ea8:	0849      	lsrs	r1, r1, #1
    1eaa:	0049      	lsls	r1, r1, #1
    1eac:	5c09      	ldrb	r1, [r1, r0]
    1eae:	0049      	lsls	r1, r1, #1
    1eb0:	448e      	add	lr, r1
    1eb2:	bc02      	pop	{r1}
    1eb4:	4770      	bx	lr
    1eb6:	46c0      	nop			; (mov r8, r8)

00001eb8 <__udivsi3>:
    1eb8:	2200      	movs	r2, #0
    1eba:	0843      	lsrs	r3, r0, #1
    1ebc:	428b      	cmp	r3, r1
    1ebe:	d374      	bcc.n	1faa <__udivsi3+0xf2>
    1ec0:	0903      	lsrs	r3, r0, #4
    1ec2:	428b      	cmp	r3, r1
    1ec4:	d35f      	bcc.n	1f86 <__udivsi3+0xce>
    1ec6:	0a03      	lsrs	r3, r0, #8
    1ec8:	428b      	cmp	r3, r1
    1eca:	d344      	bcc.n	1f56 <__udivsi3+0x9e>
    1ecc:	0b03      	lsrs	r3, r0, #12
    1ece:	428b      	cmp	r3, r1
    1ed0:	d328      	bcc.n	1f24 <__udivsi3+0x6c>
    1ed2:	0c03      	lsrs	r3, r0, #16
    1ed4:	428b      	cmp	r3, r1
    1ed6:	d30d      	bcc.n	1ef4 <__udivsi3+0x3c>
    1ed8:	22ff      	movs	r2, #255	; 0xff
    1eda:	0209      	lsls	r1, r1, #8
    1edc:	ba12      	rev	r2, r2
    1ede:	0c03      	lsrs	r3, r0, #16
    1ee0:	428b      	cmp	r3, r1
    1ee2:	d302      	bcc.n	1eea <__udivsi3+0x32>
    1ee4:	1212      	asrs	r2, r2, #8
    1ee6:	0209      	lsls	r1, r1, #8
    1ee8:	d065      	beq.n	1fb6 <__udivsi3+0xfe>
    1eea:	0b03      	lsrs	r3, r0, #12
    1eec:	428b      	cmp	r3, r1
    1eee:	d319      	bcc.n	1f24 <__udivsi3+0x6c>
    1ef0:	e000      	b.n	1ef4 <__udivsi3+0x3c>
    1ef2:	0a09      	lsrs	r1, r1, #8
    1ef4:	0bc3      	lsrs	r3, r0, #15
    1ef6:	428b      	cmp	r3, r1
    1ef8:	d301      	bcc.n	1efe <__udivsi3+0x46>
    1efa:	03cb      	lsls	r3, r1, #15
    1efc:	1ac0      	subs	r0, r0, r3
    1efe:	4152      	adcs	r2, r2
    1f00:	0b83      	lsrs	r3, r0, #14
    1f02:	428b      	cmp	r3, r1
    1f04:	d301      	bcc.n	1f0a <__udivsi3+0x52>
    1f06:	038b      	lsls	r3, r1, #14
    1f08:	1ac0      	subs	r0, r0, r3
    1f0a:	4152      	adcs	r2, r2
    1f0c:	0b43      	lsrs	r3, r0, #13
    1f0e:	428b      	cmp	r3, r1
    1f10:	d301      	bcc.n	1f16 <__udivsi3+0x5e>
    1f12:	034b      	lsls	r3, r1, #13
    1f14:	1ac0      	subs	r0, r0, r3
    1f16:	4152      	adcs	r2, r2
    1f18:	0b03      	lsrs	r3, r0, #12
    1f1a:	428b      	cmp	r3, r1
    1f1c:	d301      	bcc.n	1f22 <__udivsi3+0x6a>
    1f1e:	030b      	lsls	r3, r1, #12
    1f20:	1ac0      	subs	r0, r0, r3
    1f22:	4152      	adcs	r2, r2
    1f24:	0ac3      	lsrs	r3, r0, #11
    1f26:	428b      	cmp	r3, r1
    1f28:	d301      	bcc.n	1f2e <__udivsi3+0x76>
    1f2a:	02cb      	lsls	r3, r1, #11
    1f2c:	1ac0      	subs	r0, r0, r3
    1f2e:	4152      	adcs	r2, r2
    1f30:	0a83      	lsrs	r3, r0, #10
    1f32:	428b      	cmp	r3, r1
    1f34:	d301      	bcc.n	1f3a <__udivsi3+0x82>
    1f36:	028b      	lsls	r3, r1, #10
    1f38:	1ac0      	subs	r0, r0, r3
    1f3a:	4152      	adcs	r2, r2
    1f3c:	0a43      	lsrs	r3, r0, #9
    1f3e:	428b      	cmp	r3, r1
    1f40:	d301      	bcc.n	1f46 <__udivsi3+0x8e>
    1f42:	024b      	lsls	r3, r1, #9
    1f44:	1ac0      	subs	r0, r0, r3
    1f46:	4152      	adcs	r2, r2
    1f48:	0a03      	lsrs	r3, r0, #8
    1f4a:	428b      	cmp	r3, r1
    1f4c:	d301      	bcc.n	1f52 <__udivsi3+0x9a>
    1f4e:	020b      	lsls	r3, r1, #8
    1f50:	1ac0      	subs	r0, r0, r3
    1f52:	4152      	adcs	r2, r2
    1f54:	d2cd      	bcs.n	1ef2 <__udivsi3+0x3a>
    1f56:	09c3      	lsrs	r3, r0, #7
    1f58:	428b      	cmp	r3, r1
    1f5a:	d301      	bcc.n	1f60 <__udivsi3+0xa8>
    1f5c:	01cb      	lsls	r3, r1, #7
    1f5e:	1ac0      	subs	r0, r0, r3
    1f60:	4152      	adcs	r2, r2
    1f62:	0983      	lsrs	r3, r0, #6
    1f64:	428b      	cmp	r3, r1
    1f66:	d301      	bcc.n	1f6c <__udivsi3+0xb4>
    1f68:	018b      	lsls	r3, r1, #6
    1f6a:	1ac0      	subs	r0, r0, r3
    1f6c:	4152      	adcs	r2, r2
    1f6e:	0943      	lsrs	r3, r0, #5
    1f70:	428b      	cmp	r3, r1
    1f72:	d301      	bcc.n	1f78 <__udivsi3+0xc0>
    1f74:	014b      	lsls	r3, r1, #5
    1f76:	1ac0      	subs	r0, r0, r3
    1f78:	4152      	adcs	r2, r2
    1f7a:	0903      	lsrs	r3, r0, #4
    1f7c:	428b      	cmp	r3, r1
    1f7e:	d301      	bcc.n	1f84 <__udivsi3+0xcc>
    1f80:	010b      	lsls	r3, r1, #4
    1f82:	1ac0      	subs	r0, r0, r3
    1f84:	4152      	adcs	r2, r2
    1f86:	08c3      	lsrs	r3, r0, #3
    1f88:	428b      	cmp	r3, r1
    1f8a:	d301      	bcc.n	1f90 <__udivsi3+0xd8>
    1f8c:	00cb      	lsls	r3, r1, #3
    1f8e:	1ac0      	subs	r0, r0, r3
    1f90:	4152      	adcs	r2, r2
    1f92:	0883      	lsrs	r3, r0, #2
    1f94:	428b      	cmp	r3, r1
    1f96:	d301      	bcc.n	1f9c <__udivsi3+0xe4>
    1f98:	008b      	lsls	r3, r1, #2
    1f9a:	1ac0      	subs	r0, r0, r3
    1f9c:	4152      	adcs	r2, r2
    1f9e:	0843      	lsrs	r3, r0, #1
    1fa0:	428b      	cmp	r3, r1
    1fa2:	d301      	bcc.n	1fa8 <__udivsi3+0xf0>
    1fa4:	004b      	lsls	r3, r1, #1
    1fa6:	1ac0      	subs	r0, r0, r3
    1fa8:	4152      	adcs	r2, r2
    1faa:	1a41      	subs	r1, r0, r1
    1fac:	d200      	bcs.n	1fb0 <__udivsi3+0xf8>
    1fae:	4601      	mov	r1, r0
    1fb0:	4152      	adcs	r2, r2
    1fb2:	4610      	mov	r0, r2
    1fb4:	4770      	bx	lr
    1fb6:	e7ff      	b.n	1fb8 <__udivsi3+0x100>
    1fb8:	b501      	push	{r0, lr}
    1fba:	2000      	movs	r0, #0
    1fbc:	f000 f806 	bl	1fcc <__aeabi_idiv0>
    1fc0:	bd02      	pop	{r1, pc}
    1fc2:	46c0      	nop			; (mov r8, r8)

00001fc4 <__aeabi_uidivmod>:
    1fc4:	2900      	cmp	r1, #0
    1fc6:	d0f7      	beq.n	1fb8 <__udivsi3+0x100>
    1fc8:	e776      	b.n	1eb8 <__udivsi3>
    1fca:	4770      	bx	lr

00001fcc <__aeabi_idiv0>:
    1fcc:	4770      	bx	lr
    1fce:	46c0      	nop			; (mov r8, r8)

00001fd0 <__libc_init_array>:
    1fd0:	b570      	push	{r4, r5, r6, lr}
    1fd2:	2600      	movs	r6, #0
    1fd4:	4d0c      	ldr	r5, [pc, #48]	; (2008 <__libc_init_array+0x38>)
    1fd6:	4c0d      	ldr	r4, [pc, #52]	; (200c <__libc_init_array+0x3c>)
    1fd8:	1b64      	subs	r4, r4, r5
    1fda:	10a4      	asrs	r4, r4, #2
    1fdc:	42a6      	cmp	r6, r4
    1fde:	d109      	bne.n	1ff4 <__libc_init_array+0x24>
    1fe0:	2600      	movs	r6, #0
    1fe2:	f000 f8bd 	bl	2160 <_init>
    1fe6:	4d0a      	ldr	r5, [pc, #40]	; (2010 <__libc_init_array+0x40>)
    1fe8:	4c0a      	ldr	r4, [pc, #40]	; (2014 <__libc_init_array+0x44>)
    1fea:	1b64      	subs	r4, r4, r5
    1fec:	10a4      	asrs	r4, r4, #2
    1fee:	42a6      	cmp	r6, r4
    1ff0:	d105      	bne.n	1ffe <__libc_init_array+0x2e>
    1ff2:	bd70      	pop	{r4, r5, r6, pc}
    1ff4:	00b3      	lsls	r3, r6, #2
    1ff6:	58eb      	ldr	r3, [r5, r3]
    1ff8:	4798      	blx	r3
    1ffa:	3601      	adds	r6, #1
    1ffc:	e7ee      	b.n	1fdc <__libc_init_array+0xc>
    1ffe:	00b3      	lsls	r3, r6, #2
    2000:	58eb      	ldr	r3, [r5, r3]
    2002:	4798      	blx	r3
    2004:	3601      	adds	r6, #1
    2006:	e7f2      	b.n	1fee <__libc_init_array+0x1e>
    2008:	200000e8 	.word	0x200000e8
    200c:	200000e8 	.word	0x200000e8
    2010:	200000e8 	.word	0x200000e8
    2014:	200000f8 	.word	0x200000f8

00002018 <malloc>:
    2018:	b510      	push	{r4, lr}
    201a:	4b03      	ldr	r3, [pc, #12]	; (2028 <malloc+0x10>)
    201c:	0001      	movs	r1, r0
    201e:	6818      	ldr	r0, [r3, #0]
    2020:	f000 f816 	bl	2050 <_malloc_r>
    2024:	bd10      	pop	{r4, pc}
    2026:	46c0      	nop			; (mov r8, r8)
    2028:	20000084 	.word	0x20000084

0000202c <memcpy>:
    202c:	2300      	movs	r3, #0
    202e:	b510      	push	{r4, lr}
    2030:	429a      	cmp	r2, r3
    2032:	d100      	bne.n	2036 <memcpy+0xa>
    2034:	bd10      	pop	{r4, pc}
    2036:	5ccc      	ldrb	r4, [r1, r3]
    2038:	54c4      	strb	r4, [r0, r3]
    203a:	3301      	adds	r3, #1
    203c:	e7f8      	b.n	2030 <memcpy+0x4>

0000203e <memset>:
    203e:	0003      	movs	r3, r0
    2040:	1882      	adds	r2, r0, r2
    2042:	4293      	cmp	r3, r2
    2044:	d100      	bne.n	2048 <memset+0xa>
    2046:	4770      	bx	lr
    2048:	7019      	strb	r1, [r3, #0]
    204a:	3301      	adds	r3, #1
    204c:	e7f9      	b.n	2042 <memset+0x4>
	...

00002050 <_malloc_r>:
    2050:	2303      	movs	r3, #3
    2052:	b570      	push	{r4, r5, r6, lr}
    2054:	1ccd      	adds	r5, r1, #3
    2056:	439d      	bics	r5, r3
    2058:	3508      	adds	r5, #8
    205a:	0006      	movs	r6, r0
    205c:	2d0c      	cmp	r5, #12
    205e:	d21e      	bcs.n	209e <_malloc_r+0x4e>
    2060:	250c      	movs	r5, #12
    2062:	42a9      	cmp	r1, r5
    2064:	d81d      	bhi.n	20a2 <_malloc_r+0x52>
    2066:	0030      	movs	r0, r6
    2068:	f000 f869 	bl	213e <__malloc_lock>
    206c:	4a25      	ldr	r2, [pc, #148]	; (2104 <_malloc_r+0xb4>)
    206e:	6814      	ldr	r4, [r2, #0]
    2070:	0021      	movs	r1, r4
    2072:	2900      	cmp	r1, #0
    2074:	d119      	bne.n	20aa <_malloc_r+0x5a>
    2076:	4c24      	ldr	r4, [pc, #144]	; (2108 <_malloc_r+0xb8>)
    2078:	6823      	ldr	r3, [r4, #0]
    207a:	2b00      	cmp	r3, #0
    207c:	d103      	bne.n	2086 <_malloc_r+0x36>
    207e:	0030      	movs	r0, r6
    2080:	f000 f844 	bl	210c <_sbrk_r>
    2084:	6020      	str	r0, [r4, #0]
    2086:	0029      	movs	r1, r5
    2088:	0030      	movs	r0, r6
    208a:	f000 f83f 	bl	210c <_sbrk_r>
    208e:	1c43      	adds	r3, r0, #1
    2090:	d12c      	bne.n	20ec <_malloc_r+0x9c>
    2092:	230c      	movs	r3, #12
    2094:	0030      	movs	r0, r6
    2096:	6033      	str	r3, [r6, #0]
    2098:	f000 f852 	bl	2140 <__malloc_unlock>
    209c:	e003      	b.n	20a6 <_malloc_r+0x56>
    209e:	2d00      	cmp	r5, #0
    20a0:	dadf      	bge.n	2062 <_malloc_r+0x12>
    20a2:	230c      	movs	r3, #12
    20a4:	6033      	str	r3, [r6, #0]
    20a6:	2000      	movs	r0, #0
    20a8:	bd70      	pop	{r4, r5, r6, pc}
    20aa:	680b      	ldr	r3, [r1, #0]
    20ac:	1b5b      	subs	r3, r3, r5
    20ae:	d41a      	bmi.n	20e6 <_malloc_r+0x96>
    20b0:	2b0b      	cmp	r3, #11
    20b2:	d903      	bls.n	20bc <_malloc_r+0x6c>
    20b4:	600b      	str	r3, [r1, #0]
    20b6:	18cc      	adds	r4, r1, r3
    20b8:	6025      	str	r5, [r4, #0]
    20ba:	e003      	b.n	20c4 <_malloc_r+0x74>
    20bc:	428c      	cmp	r4, r1
    20be:	d10e      	bne.n	20de <_malloc_r+0x8e>
    20c0:	6863      	ldr	r3, [r4, #4]
    20c2:	6013      	str	r3, [r2, #0]
    20c4:	0030      	movs	r0, r6
    20c6:	f000 f83b 	bl	2140 <__malloc_unlock>
    20ca:	0020      	movs	r0, r4
    20cc:	2207      	movs	r2, #7
    20ce:	300b      	adds	r0, #11
    20d0:	1d23      	adds	r3, r4, #4
    20d2:	4390      	bics	r0, r2
    20d4:	1ac3      	subs	r3, r0, r3
    20d6:	d0e7      	beq.n	20a8 <_malloc_r+0x58>
    20d8:	425a      	negs	r2, r3
    20da:	50e2      	str	r2, [r4, r3]
    20dc:	e7e4      	b.n	20a8 <_malloc_r+0x58>
    20de:	684b      	ldr	r3, [r1, #4]
    20e0:	6063      	str	r3, [r4, #4]
    20e2:	000c      	movs	r4, r1
    20e4:	e7ee      	b.n	20c4 <_malloc_r+0x74>
    20e6:	000c      	movs	r4, r1
    20e8:	6849      	ldr	r1, [r1, #4]
    20ea:	e7c2      	b.n	2072 <_malloc_r+0x22>
    20ec:	2303      	movs	r3, #3
    20ee:	1cc4      	adds	r4, r0, #3
    20f0:	439c      	bics	r4, r3
    20f2:	42a0      	cmp	r0, r4
    20f4:	d0e0      	beq.n	20b8 <_malloc_r+0x68>
    20f6:	1a21      	subs	r1, r4, r0
    20f8:	0030      	movs	r0, r6
    20fa:	f000 f807 	bl	210c <_sbrk_r>
    20fe:	1c43      	adds	r3, r0, #1
    2100:	d1da      	bne.n	20b8 <_malloc_r+0x68>
    2102:	e7c6      	b.n	2092 <_malloc_r+0x42>
    2104:	200008a8 	.word	0x200008a8
    2108:	200008ac 	.word	0x200008ac

0000210c <_sbrk_r>:
    210c:	2300      	movs	r3, #0
    210e:	b570      	push	{r4, r5, r6, lr}
    2110:	4c06      	ldr	r4, [pc, #24]	; (212c <_sbrk_r+0x20>)
    2112:	0005      	movs	r5, r0
    2114:	0008      	movs	r0, r1
    2116:	6023      	str	r3, [r4, #0]
    2118:	f000 f814 	bl	2144 <_sbrk>
    211c:	1c43      	adds	r3, r0, #1
    211e:	d103      	bne.n	2128 <_sbrk_r+0x1c>
    2120:	6823      	ldr	r3, [r4, #0]
    2122:	2b00      	cmp	r3, #0
    2124:	d000      	beq.n	2128 <_sbrk_r+0x1c>
    2126:	602b      	str	r3, [r5, #0]
    2128:	bd70      	pop	{r4, r5, r6, pc}
    212a:	46c0      	nop			; (mov r8, r8)
    212c:	200008b4 	.word	0x200008b4

00002130 <strlen>:
    2130:	2300      	movs	r3, #0
    2132:	5cc2      	ldrb	r2, [r0, r3]
    2134:	3301      	adds	r3, #1
    2136:	2a00      	cmp	r2, #0
    2138:	d1fb      	bne.n	2132 <strlen+0x2>
    213a:	1e58      	subs	r0, r3, #1
    213c:	4770      	bx	lr

0000213e <__malloc_lock>:
    213e:	4770      	bx	lr

00002140 <__malloc_unlock>:
    2140:	4770      	bx	lr
	...

00002144 <_sbrk>:
    2144:	4a04      	ldr	r2, [pc, #16]	; (2158 <_sbrk+0x14>)
    2146:	6813      	ldr	r3, [r2, #0]
    2148:	2b00      	cmp	r3, #0
    214a:	d003      	beq.n	2154 <_sbrk+0x10>
    214c:	1818      	adds	r0, r3, r0
    214e:	6010      	str	r0, [r2, #0]
    2150:	0018      	movs	r0, r3
    2152:	4770      	bx	lr
    2154:	4b01      	ldr	r3, [pc, #4]	; (215c <_sbrk+0x18>)
    2156:	e7f9      	b.n	214c <_sbrk+0x8>
    2158:	200008b0 	.word	0x200008b0
    215c:	200008b8 	.word	0x200008b8

00002160 <_init>:
    2160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2162:	46c0      	nop			; (mov r8, r8)
    2164:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2166:	bc08      	pop	{r3}
    2168:	469e      	mov	lr, r3
    216a:	4770      	bx	lr

0000216c <_fini>:
    216c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    216e:	46c0      	nop			; (mov r8, r8)
    2170:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2172:	bc08      	pop	{r3}
    2174:	469e      	mov	lr, r3
    2176:	4770      	bx	lr
    2178:	00006b6f 	.word	0x00006b6f

0000217c <_ZTV7Serial_>:
	...
    2184:	00000521 0000054d 00000535 00000585     !...M...5.......
    2194:	00000569 00000541 0000051d              i...A.......

000021a0 <_ZTV26DoubleBufferedEPOutHandler>:
	...
    21a8:	00000993 00000875 000007d1              ....u.......

000021b4 <_ZL14STRING_PRODUCT>:
    21b4:	74616546 20726568 0000304d              Feather M0..

000021c0 <_ZL15STRING_LANGUAGE>:
    21c0:	04090304                                ....

000021c4 <_ZL19STRING_MANUFACTURER>:
    21c4:	66616441 74697572 00011200                       Adafruit.

000021cd <_ZL21USB_DeviceDescriptorB>:
    21cd:	02000112 400102ef 800b239a 02010100     .......@.#......
    21dd:	00000103                                         ...

000021e0 <g_APinDescription>:
    21e0:	00000000 0000000b 00000002 00000004     ................
    21f0:	ffff00ff 000bffff 00000000 0000000a     ................
    2200:	00000002 00000004 ffff00ff 000affff     ................
    2210:	00000000 0000000e 00000008 00000004     ................
    2220:	ffff00ff 000effff 00000000 00000009     ................
    2230:	00000004 0000001c 000100ff 00090001     ................
    2240:	00000000 00000008 00000004 0000001c     ................
    2250:	000000ff 00100000 00000000 0000000f     ................
    2260:	00000004 0000001c 030100ff 000f0301     ................
    2270:	00000000 00000014 00000005 0000002c     ............,...
    2280:	000200ff 00040002 00000000 00000015     ................
    2290:	00000008 00000004 ffff00ff 0005ffff     ................
    22a0:	00000000 00000006 00000004 0000001c     ................
    22b0:	01000006 00060100 00000000 00000007     ................
    22c0:	00000004 0000001c 01010007 00070101     ................
    22d0:	00000000 00000012 00000004 0000001c     ................
    22e0:	030000ff 00020300 00000000 00000010     ................
    22f0:	00000004 0000001c 020000ff 00000200     ................
    2300:	00000000 00000013 00000005 0000002c     ............,...
    2310:	000300ff 00030003 00000000 00000011     ................
    2320:	00000004 0000001c 020100ff 00010201     ................
    2330:	00000000 00000002 00000001 00000002     ................
    2340:	ffff0000 0002ffff 00000001 00000008     ................
    2350:	00000001 00000018 04000002 00080400     ................
    2360:	00000001 00000009 00000001 00000018     ................
    2370:	04010003 00090401 00000000 00000004     ................
    2380:	00000001 00000000 ffff0004 0004ffff     ................
    2390:	00000000 00000005 00000001 00000000     ................
    23a0:	ffff0005 0005ffff 00000001 00000002     ................
    23b0:	00000001 00000000 ffff000a 0002ffff     ................
    23c0:	00000000 00000016 00000002 00000004     ................
    23d0:	ffff00ff 0006ffff 00000000 00000017     ................
    23e0:	00000002 00000004 ffff00ff 0007ffff     ................
    23f0:	00000000 0000000c 00000003 00000004     ................
    2400:	ffff00ff 000cffff 00000001 0000000a     ................
    2410:	00000003 00000004 ffff00ff 000affff     ................
    2420:	00000001 0000000b 00000003 00000004     ................
    2430:	ffff00ff 000bffff 00000001 00000003     ................
    2440:	0000000b 00000004 ffff00ff 00ffffff     ................
    2450:	00000000 0000001b 0000000b 00000004     ................
    2460:	ffff00ff 00ffffff 00000000 0000001c     ................
    2470:	00000006 00000000 ffff00ff 00ffffff     ................
    2480:	00000000 00000018 00000006 00000000     ................
    2490:	ffff00ff 00ffffff 00000000 00000019     ................
    24a0:	00000006 00000000 ffff00ff 00ffffff     ................
    24b0:	00000001 00000016 00000003 00000000     ................
    24c0:	ffff00ff 00ffffff 00000001 00000017     ................
    24d0:	00000003 00000000 ffff00ff 00ffffff     ................
    24e0:	00000000 00000016 00000002 00000000     ................
    24f0:	ffff00ff 00ffffff 00000000 00000017     ................
    2500:	00000002 00000000 ffff00ff 00ffffff     ................
    2510:	00000000 00000013 00000002 00000000     ................
    2520:	ffff00ff 00ffffff 00000000 00000010     ................
    2530:	00000002 00000000 ffff00ff 00ffffff     ................
    2540:	00000000 00000012 00000002 00000000     ................
    2550:	ffff00ff 00ffffff 00000000 00000011     ................
    2560:	00000002 00000000 ffff00ff 00ffffff     ................
    2570:	00000000 0000000d 00000004 0000000c     ................
    2580:	000100ff 000dffff 00000000 00000015     ................
    2590:	00000005 0000000c 000300ff 00ffffff     ................
    25a0:	00000000 00000006 00000004 0000000c     ................
    25b0:	010000ff 00ffffff 00000000 00000007     ................
    25c0:	00000004 0000000c 010100ff 00ffffff     ................
    25d0:	00000000 00000003 00000001 00000002     ................
    25e0:	ffff00ff 00ffffff 00000000 00000002     ................
    25f0:	00000001 00000002 ffff0014 0002ffff     ................
    2600:	00000000 00000006 00000001 00000002     ................
    2610:	01000006 00060100 00000000 00000007     ................
    2620:	00000001 00000002 01010007 00070101     ................

00002630 <_ZTV4Uart>:
	...
    2638:	00001bcd 00001dd9 00001baf 00001bc3     ................
    2648:	00001bb9 00001ba5 00001b81 00001ca5     ................
    2658:	00001b91 00001b7d                       ....}...

00002660 <__EH_FRAME_BEGIN__>:
    2660:	00000000                                ....
