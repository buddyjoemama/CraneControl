
SerialReader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000275c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  20000000  0000275c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000007b8  20000110  0000286c  00020110  2**2
                  ALLOC
  3 .ARM.attributes 00000028  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
  4 .comment      00000059  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
  5 .debug_info   000506b6  00000000  00000000  00020191  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00005f9e  00000000  00000000  00070847  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000071b2  00000000  00000000  000767e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000008b0  00000000  00000000  0007d997  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00001038  00000000  00000000  0007e247  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0001c1a0  00000000  00000000  0007f27f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000decb  00000000  00000000  0009b41f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00082945  00000000  00000000  000a92ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000016b8  00000000  00000000  0012bc30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:

void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
       0:	00 80 00 20 41 02 00 00 29 02 00 00 29 02 00 00     ... A...)...)...
	...
      2c:	29 02 00 00 00 00 00 00 00 00 00 00 29 02 00 00     )...........)...
      3c:	95 02 00 00 29 02 00 00 29 02 00 00 29 02 00 00     ....)...)...)...
      4c:	29 02 00 00 29 02 00 00 29 02 00 00 29 02 00 00     )...)...)...)...
      5c:	2d 02 00 00 29 02 00 00 d9 19 00 00 29 02 00 00     -...).......)...
      6c:	29 02 00 00 29 02 00 00 29 02 00 00 e9 19 00 00     )...)...).......
      7c:	29 02 00 00 29 02 00 00 29 02 00 00 29 02 00 00     )...)...)...)...
      8c:	29 02 00 00 00 00 00 00 29 02 00 00 29 02 00 00     ).......)...)...
      9c:	29 02 00 00 29 02 00 00 29 02 00 00 29 02 00 00     )...)...)...)...
      ac:	29 02 00 00 00 00 00 00                             ).......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000110 	.word	0x20000110
      d4:	00000000 	.word	0x00000000
      d8:	00002758 	.word	0x00002758

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000114 	.word	0x20000114
     108:	00002758 	.word	0x00002758
     10c:	20000104 	.word	0x20000104
     110:	00000000 	.word	0x00000000

00000114 <_Z5Shiftii>:
    }
  }
}

void Shift(int northChip, int southChip)
{
     114:	b570      	push	{r4, r5, r6, lr}
     116:	000d      	movs	r5, r1
     118:	0004      	movs	r4, r0
  digitalWrite(latchPin, LOW);
     11a:	2100      	movs	r1, #0
     11c:	200d      	movs	r0, #13
     11e:	f001 fbad 	bl	187c <digitalWrite>
    shiftOut(dataPin, clockPin, MSBFIRST, southChip);
     122:	002b      	movs	r3, r5
     124:	2201      	movs	r2, #1
     126:	210b      	movs	r1, #11
     128:	200c      	movs	r0, #12
     12a:	f001 fc31 	bl	1990 <shiftOut>
    shiftOut(dataPin, clockPin, MSBFIRST, northChip);
     12e:	0023      	movs	r3, r4
     130:	2201      	movs	r2, #1
     132:	210b      	movs	r1, #11
     134:	200c      	movs	r0, #12
     136:	f001 fc2b 	bl	1990 <shiftOut>
  digitalWrite(latchPin, HIGH);    
     13a:	2101      	movs	r1, #1
     13c:	200d      	movs	r0, #13
     13e:	f001 fb9d 	bl	187c <digitalWrite>
}
     142:	bd70      	pop	{r4, r5, r6, pc}

00000144 <setup>:
  Serial.begin(9600);
     144:	2196      	movs	r1, #150	; 0x96
void setup() {
     146:	b570      	push	{r4, r5, r6, lr}
  Serial.begin(9600);
     148:	0189      	lsls	r1, r1, #6
     14a:	482b      	ldr	r0, [pc, #172]	; (1f8 <setup+0xb4>)
     14c:	f000 fa7e 	bl	64c <_ZN7Serial_5beginEm>
  pinMode(latchPin, OUTPUT);
     150:	2101      	movs	r1, #1
     152:	200d      	movs	r0, #13
     154:	f001 fb46 	bl	17e4 <pinMode>
  pinMode(clockPin, OUTPUT);
     158:	2101      	movs	r1, #1
     15a:	200b      	movs	r0, #11
     15c:	f001 fb42 	bl	17e4 <pinMode>
  pinMode(dataPin, OUTPUT);
     160:	2101      	movs	r1, #1
     162:	200c      	movs	r0, #12
     164:	f001 fb3e 	bl	17e4 <pinMode>
  digitalWrite(latchPin, LOW);
     168:	2100      	movs	r1, #0
     16a:	200d      	movs	r0, #13
     16c:	f001 fb86 	bl	187c <digitalWrite>
  shiftOut(dataPin, clockPin, MSBFIRST, 0);
     170:	2300      	movs	r3, #0
     172:	2201      	movs	r2, #1
     174:	210b      	movs	r1, #11
     176:	200c      	movs	r0, #12
     178:	f001 fc0a 	bl	1990 <shiftOut>
  shiftOut(dataPin, clockPin, MSBFIRST, 0);
     17c:	2300      	movs	r3, #0
     17e:	2201      	movs	r2, #1
     180:	210b      	movs	r1, #11
     182:	200c      	movs	r0, #12
     184:	f001 fc04 	bl	1990 <shiftOut>
  digitalWrite(latchPin, HIGH);  
     188:	200d      	movs	r0, #13
     18a:	2101      	movs	r1, #1
     18c:	f001 fb76 	bl	187c <digitalWrite>
  int postVal = analogRead(0);
     190:	2000      	movs	r0, #0
     192:	f001 fab9 	bl	1708 <analogRead>
  if(postVal <= 10) 
     196:	280a      	cmp	r0, #10
     198:	dc29      	bgt.n	1ee <setup+0xaa>
      delay(500);
     19a:	25fa      	movs	r5, #250	; 0xfa
     19c:	2400      	movs	r4, #0
      Shift(1 << i, 0);
     19e:	2601      	movs	r6, #1
      delay(500);
     1a0:	006d      	lsls	r5, r5, #1
      Shift(1 << i, 0);
     1a2:	0030      	movs	r0, r6
     1a4:	2100      	movs	r1, #0
     1a6:	40a0      	lsls	r0, r4
     1a8:	f7ff ffb4 	bl	114 <_Z5Shiftii>
    for(int i = 0; i < 6; i++) 
     1ac:	3401      	adds	r4, #1
      delay(500);
     1ae:	0028      	movs	r0, r5
     1b0:	f000 f884 	bl	2bc <delay>
    for(int i = 0; i < 6; i++) 
     1b4:	2c06      	cmp	r4, #6
     1b6:	d1f4      	bne.n	1a2 <setup+0x5e>
    Shift(0, 0);
     1b8:	2100      	movs	r1, #0
      delay(500);
     1ba:	25fa      	movs	r5, #250	; 0xfa
    Shift(0, 0);
     1bc:	0008      	movs	r0, r1
     1be:	f7ff ffa9 	bl	114 <_Z5Shiftii>
    for(int i = 0; i < 6; i++) 
     1c2:	2400      	movs	r4, #0
      Shift(0, 1 << i);
     1c4:	2601      	movs	r6, #1
      delay(500);
     1c6:	006d      	lsls	r5, r5, #1
      Shift(0, 1 << i);
     1c8:	0031      	movs	r1, r6
     1ca:	2000      	movs	r0, #0
     1cc:	40a1      	lsls	r1, r4
     1ce:	f7ff ffa1 	bl	114 <_Z5Shiftii>
    for(int i = 0; i < 6; i++) 
     1d2:	3401      	adds	r4, #1
      delay(500);
     1d4:	0028      	movs	r0, r5
     1d6:	f000 f871 	bl	2bc <delay>
    for(int i = 0; i < 6; i++) 
     1da:	2c06      	cmp	r4, #6
     1dc:	d1f4      	bne.n	1c8 <setup+0x84>
    Shift(255, 255);
     1de:	21ff      	movs	r1, #255	; 0xff
     1e0:	0008      	movs	r0, r1
     1e2:	f7ff ff97 	bl	114 <_Z5Shiftii>
    delay(1000);
     1e6:	20fa      	movs	r0, #250	; 0xfa
     1e8:	0080      	lsls	r0, r0, #2
     1ea:	f000 f867 	bl	2bc <delay>
  Shift(0, 0);
     1ee:	2100      	movs	r1, #0
     1f0:	0008      	movs	r0, r1
     1f2:	f7ff ff8f 	bl	114 <_Z5Shiftii>
}
     1f6:	bd70      	pop	{r4, r5, r6, pc}
     1f8:	20000134 	.word	0x20000134

000001fc <loop>:
{
     1fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(Serial.available() > 0) {
     1fe:	4d09      	ldr	r5, [pc, #36]	; (224 <loop+0x28>)
     200:	0028      	movs	r0, r5
     202:	f000 f99d 	bl	540 <_ZN7Serial_9availableEv>
     206:	2800      	cmp	r0, #0
     208:	dd0b      	ble.n	222 <loop+0x26>
    if(Serial.readBytes(buffer, 2) > 0) {
     20a:	ac01      	add	r4, sp, #4
     20c:	2202      	movs	r2, #2
     20e:	0021      	movs	r1, r4
     210:	0028      	movs	r0, r5
     212:	f000 fa1c 	bl	64e <_ZN7Serial_9readBytesEPcj>
     216:	2800      	cmp	r0, #0
     218:	d003      	beq.n	222 <loop+0x26>
      Shift(buffer[0], buffer[1]);
     21a:	7861      	ldrb	r1, [r4, #1]
     21c:	7820      	ldrb	r0, [r4, #0]
     21e:	f7ff ff79 	bl	114 <_Z5Shiftii>
}
     222:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
     224:	20000134 	.word	0x20000134

00000228 <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
     228:	be03      	bkpt	0x0003
     22a:	e7fe      	b.n	22a <Dummy_Handler+0x2>

0000022c <USB_Handler>:

static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
     22c:	4b03      	ldr	r3, [pc, #12]	; (23c <USB_Handler+0x10>)
{
     22e:	b510      	push	{r4, lr}
  if (usb_isr)
     230:	681b      	ldr	r3, [r3, #0]
     232:	2b00      	cmp	r3, #0
     234:	d000      	beq.n	238 <USB_Handler+0xc>
    usb_isr();
     236:	4798      	blx	r3
}
     238:	bd10      	pop	{r4, pc}
     23a:	46c0      	nop			; (mov r8, r8)
     23c:	2000012c 	.word	0x2000012c

00000240 <Reset_Handler>:
{
     240:	b570      	push	{r4, r5, r6, lr}
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     242:	490f      	ldr	r1, [pc, #60]	; (280 <Reset_Handler+0x40>)
     244:	4c0f      	ldr	r4, [pc, #60]	; (284 <Reset_Handler+0x44>)
     246:	42a1      	cmp	r1, r4
     248:	d104      	bne.n	254 <Reset_Handler+0x14>
  SystemInit();
     24a:	f000 f8bd 	bl	3c8 <SystemInit>
  main();
     24e:	f000 f851 	bl	2f4 <main>
     252:	e7fe      	b.n	252 <Reset_Handler+0x12>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     254:	4d0c      	ldr	r5, [pc, #48]	; (288 <Reset_Handler+0x48>)
     256:	2300      	movs	r3, #0
     258:	428d      	cmp	r5, r1
     25a:	d0f6      	beq.n	24a <Reset_Handler+0xa>
     25c:	18ca      	adds	r2, r1, r3
     25e:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
     260:	42a2      	cmp	r2, r4
     262:	d305      	bcc.n	270 <Reset_Handler+0x30>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
     264:	4290      	cmp	r0, r2
     266:	d0f0      	beq.n	24a <Reset_Handler+0xa>
     268:	4b08      	ldr	r3, [pc, #32]	; (28c <Reset_Handler+0x4c>)
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     26a:	4909      	ldr	r1, [pc, #36]	; (290 <Reset_Handler+0x50>)
      *pDest = 0;
     26c:	2200      	movs	r2, #0
     26e:	e004      	b.n	27a <Reset_Handler+0x3a>
      *pDest = *pSrc;
     270:	6800      	ldr	r0, [r0, #0]
     272:	3304      	adds	r3, #4
     274:	6010      	str	r0, [r2, #0]
     276:	e7f1      	b.n	25c <Reset_Handler+0x1c>
      *pDest = 0;
     278:	c304      	stmia	r3!, {r2}
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
     27a:	428b      	cmp	r3, r1
     27c:	d3fc      	bcc.n	278 <Reset_Handler+0x38>
     27e:	e7e4      	b.n	24a <Reset_Handler+0xa>
     280:	20000000 	.word	0x20000000
     284:	20000110 	.word	0x20000110
     288:	0000275c 	.word	0x0000275c
     28c:	20000110 	.word	0x20000110
     290:	200008c8 	.word	0x200008c8

00000294 <SysTick_Handler>:
{
     294:	b510      	push	{r4, lr}
  if (sysTickHook())
     296:	f000 f82a 	bl	2ee <sysTickHook>
     29a:	2800      	cmp	r0, #0
     29c:	d101      	bne.n	2a2 <SysTick_Handler+0xe>
  SysTick_DefaultHandler();
     29e:	f000 f81b 	bl	2d8 <SysTick_DefaultHandler>
}
     2a2:	bd10      	pop	{r4, pc}

000002a4 <USB_SetHandler>:

void USB_SetHandler(void (*new_usb_isr)(void))
{
  usb_isr = new_usb_isr;
     2a4:	4b01      	ldr	r3, [pc, #4]	; (2ac <USB_SetHandler+0x8>)
     2a6:	6018      	str	r0, [r3, #0]
}
     2a8:	4770      	bx	lr
     2aa:	46c0      	nop			; (mov r8, r8)
     2ac:	2000012c 	.word	0x2000012c

000002b0 <millis>:
static volatile uint32_t _ulTickCount=0 ;

uint32_t millis( void )
{
// todo: ensure no interrupts
  return _ulTickCount ;
     2b0:	4b01      	ldr	r3, [pc, #4]	; (2b8 <millis+0x8>)
     2b2:	6818      	ldr	r0, [r3, #0]
}
     2b4:	4770      	bx	lr
     2b6:	46c0      	nop			; (mov r8, r8)
     2b8:	20000130 	.word	0x20000130

000002bc <delay>:
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}

void delay( uint32_t ms )
{
     2bc:	b570      	push	{r4, r5, r6, lr}
     2be:	1e04      	subs	r4, r0, #0
  if ( ms == 0 )
     2c0:	d007      	beq.n	2d2 <delay+0x16>
  {
    return ;
  }

  uint32_t start = _ulTickCount ;
     2c2:	4d04      	ldr	r5, [pc, #16]	; (2d4 <delay+0x18>)
     2c4:	682e      	ldr	r6, [r5, #0]

  do
  {
    yield() ;
     2c6:	f000 f811 	bl	2ec <yield>
  } while ( _ulTickCount - start < ms ) ;
     2ca:	682b      	ldr	r3, [r5, #0]
     2cc:	1b9b      	subs	r3, r3, r6
     2ce:	429c      	cmp	r4, r3
     2d0:	d8f9      	bhi.n	2c6 <delay+0xa>
}
     2d2:	bd70      	pop	{r4, r5, r6, pc}
     2d4:	20000130 	.word	0x20000130

000002d8 <SysTick_DefaultHandler>:

#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
     2d8:	b510      	push	{r4, lr}
  // Increment tick count each ms
  _ulTickCount++;
     2da:	4a03      	ldr	r2, [pc, #12]	; (2e8 <SysTick_DefaultHandler+0x10>)
     2dc:	6813      	ldr	r3, [r2, #0]
     2de:	3301      	adds	r3, #1
     2e0:	6013      	str	r3, [r2, #0]
  tickReset();
     2e2:	f000 f835 	bl	350 <tickReset>
}
     2e6:	bd10      	pop	{r4, pc}
     2e8:	20000130 	.word	0x20000130

000002ec <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
     2ec:	4770      	bx	lr

000002ee <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
     2ee:	2000      	movs	r0, #0
     2f0:	4770      	bx	lr

000002f2 <_Z11initVariantv>:
#include "Arduino.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     2f2:	4770      	bx	lr

000002f4 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
     2f4:	b510      	push	{r4, lr}
  init();
     2f6:	f001 f953 	bl	15a0 <init>

  __libc_init_array();
     2fa:	f001 fee7 	bl	20cc <__libc_init_array>

  initVariant();
     2fe:	f7ff fff8 	bl	2f2 <_Z11initVariantv>

  delay(1);
     302:	2001      	movs	r0, #1
     304:	f7ff ffda 	bl	2bc <delay>
#if defined(USBCON)
  USBDevice.init();
     308:	4c08      	ldr	r4, [pc, #32]	; (32c <main+0x38>)
     30a:	0020      	movs	r0, r4
     30c:	f000 fbda 	bl	ac4 <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
     310:	0020      	movs	r0, r4
     312:	f000 fc4f 	bl	bb4 <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
     316:	f7ff ff15 	bl	144 <setup>

  for (;;)
  {
    loop();
     31a:	f7ff ff6f 	bl	1fc <loop>
    if (serialEventRun) serialEventRun();
     31e:	4b04      	ldr	r3, [pc, #16]	; (330 <main+0x3c>)
     320:	2b00      	cmp	r3, #0
     322:	d0fa      	beq.n	31a <main+0x26>
     324:	e000      	b.n	328 <main+0x34>
     326:	bf00      	nop
     328:	e7f7      	b.n	31a <main+0x26>
     32a:	46c0      	nop			; (mov r8, r8)
     32c:	20000150 	.word	0x20000150
     330:	00000000 	.word	0x00000000

00000334 <initiateReset>:
}

static int ticks = -1;

void initiateReset(int _ticks) {
	ticks = _ticks;
     334:	4b01      	ldr	r3, [pc, #4]	; (33c <initiateReset+0x8>)
     336:	6018      	str	r0, [r3, #0]
}
     338:	4770      	bx	lr
     33a:	46c0      	nop			; (mov r8, r8)
     33c:	20000000 	.word	0x20000000

00000340 <cancelReset>:

void cancelReset() {
	ticks = -1;
     340:	2201      	movs	r2, #1
     342:	4b02      	ldr	r3, [pc, #8]	; (34c <cancelReset+0xc>)
     344:	4252      	negs	r2, r2
     346:	601a      	str	r2, [r3, #0]
}
     348:	4770      	bx	lr
     34a:	46c0      	nop			; (mov r8, r8)
     34c:	20000000 	.word	0x20000000

00000350 <tickReset>:

void tickReset() {
	if (ticks == -1)
     350:	4a16      	ldr	r2, [pc, #88]	; (3ac <tickReset+0x5c>)
void tickReset() {
     352:	b510      	push	{r4, lr}
	if (ticks == -1)
     354:	6813      	ldr	r3, [r2, #0]
     356:	1c59      	adds	r1, r3, #1
     358:	d027      	beq.n	3aa <tickReset+0x5a>
		return;
	ticks--;
     35a:	3b01      	subs	r3, #1
     35c:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
     35e:	2b00      	cmp	r3, #0
     360:	d123      	bne.n	3aa <tickReset+0x5a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     362:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
     364:	4b12      	ldr	r3, [pc, #72]	; (3b0 <tickReset+0x60>)
     366:	4a13      	ldr	r2, [pc, #76]	; (3b4 <tickReset+0x64>)
     368:	3304      	adds	r3, #4
     36a:	4293      	cmp	r3, r2
     36c:	d808      	bhi.n	380 <tickReset+0x30>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     36e:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     372:	4a11      	ldr	r2, [pc, #68]	; (3b8 <tickReset+0x68>)
     374:	4b11      	ldr	r3, [pc, #68]	; (3bc <tickReset+0x6c>)
     376:	60da      	str	r2, [r3, #12]
     378:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     37c:	46c0      	nop			; (mov r8, r8)
     37e:	e7fd      	b.n	37c <tickReset+0x2c>
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     380:	4a0f      	ldr	r2, [pc, #60]	; (3c0 <tickReset+0x70>)
	while (!nvmReady())
     382:	2101      	movs	r1, #1
     384:	0010      	movs	r0, r2
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     386:	7d14      	ldrb	r4, [r2, #20]
	while (!nvmReady())
     388:	420c      	tst	r4, r1
     38a:	d0fc      	beq.n	386 <tickReset+0x36>
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     38c:	2120      	movs	r1, #32
     38e:	8b14      	ldrh	r4, [r2, #24]
     390:	31ff      	adds	r1, #255	; 0xff
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     392:	089b      	lsrs	r3, r3, #2
     394:	005b      	lsls	r3, r3, #1
	NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
     396:	4321      	orrs	r1, r4
     398:	8311      	strh	r1, [r2, #24]
	NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];
     39a:	61d3      	str	r3, [r2, #28]
	NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
     39c:	4b09      	ldr	r3, [pc, #36]	; (3c4 <tickReset+0x74>)
     39e:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
     3a0:	2301      	movs	r3, #1
        return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     3a2:	7d02      	ldrb	r2, [r0, #20]
	while (!nvmReady())
     3a4:	421a      	tst	r2, r3
     3a6:	d0fc      	beq.n	3a2 <tickReset+0x52>
     3a8:	e7e1      	b.n	36e <tickReset+0x1e>
		banzai();
}
     3aa:	bd10      	pop	{r4, pc}
     3ac:	20000000 	.word	0x20000000
     3b0:	00000000 	.word	0x00000000
     3b4:	00000203 	.word	0x00000203
     3b8:	05fa0004 	.word	0x05fa0004
     3bc:	e000ed00 	.word	0xe000ed00
     3c0:	41004000 	.word	0x41004000
     3c4:	ffffa502 	.word	0xffffa502

000003c8 <SystemInit>:
#define GENERIC_CLOCK_MULTIPLEXER_DFLL48M (0u)

void SystemInit( void )
{
  /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     3c8:	221e      	movs	r2, #30
{
     3ca:	b570      	push	{r4, r5, r6, lr}
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     3cc:	4846      	ldr	r0, [pc, #280]	; (4e8 <SystemInit+0x120>)

  /* Turn on the digital interface clock */
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     3ce:	4947      	ldr	r1, [pc, #284]	; (4ec <SystemInit+0x124>)
  NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val ;
     3d0:	6843      	ldr	r3, [r0, #4]
     3d2:	4393      	bics	r3, r2
     3d4:	3a1c      	subs	r2, #28
     3d6:	4313      	orrs	r3, r2
     3d8:	6043      	str	r3, [r0, #4]
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
     3da:	2308      	movs	r3, #8
     3dc:	698c      	ldr	r4, [r1, #24]
     3de:	4323      	orrs	r3, r4
     3e0:	618b      	str	r3, [r1, #24]
#else // has crystal

  /* ----------------------------------------------------------------------------------------------
   * 1) Enable XOSC32K clock (External on-board 32.768Hz oscillator)
   */
  SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     3e2:	4c43      	ldr	r4, [pc, #268]	; (4f0 <SystemInit+0x128>)
     3e4:	4b43      	ldr	r3, [pc, #268]	; (4f4 <SystemInit+0x12c>)
     3e6:	829c      	strh	r4, [r3, #20]
                         SYSCTRL_XOSC32K_XTALEN | SYSCTRL_XOSC32K_EN32K ;
  SYSCTRL->XOSC32K.bit.ENABLE = 1 ; /* separate call, as described in chapter 15.6.3 */
     3e8:	8a9c      	ldrh	r4, [r3, #20]
     3ea:	4314      	orrs	r4, r2
     3ec:	829c      	strh	r4, [r3, #20]

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_XOSC32KRDY) == 0 )
     3ee:	68dc      	ldr	r4, [r3, #12]
     3f0:	4214      	tst	r4, r2
     3f2:	d0fc      	beq.n	3ee <SystemInit+0x26>

  /* Software reset the module to ensure it is re-initialized correctly */
  /* Note: Due to synchronization, there is a delay from writing CTRL.SWRST until the reset is complete.
   * CTRL.SWRST and STATUS.SYNCBUSY will both be cleared when the reset is complete, as described in chapter 13.8.1
   */
  GCLK->CTRL.reg = GCLK_CTRL_SWRST ;
     3f4:	2401      	movs	r4, #1
     3f6:	4a40      	ldr	r2, [pc, #256]	; (4f8 <SystemInit+0x130>)
     3f8:	7014      	strb	r4, [r2, #0]

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) )
     3fa:	7815      	ldrb	r5, [r2, #0]
     3fc:	4225      	tst	r5, r4
     3fe:	d003      	beq.n	408 <SystemInit+0x40>
     400:	7855      	ldrb	r5, [r2, #1]
     402:	b26d      	sxtb	r5, r5
     404:	2d00      	cmp	r5, #0
     406:	dbf8      	blt.n	3fa <SystemInit+0x32>
  }

  /* ----------------------------------------------------------------------------------------------
   * 2) Put XOSC32K as source of Generic Clock Generator 1
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_XOSC32K ) ; // Generic Clock Generator 1
     408:	2401      	movs	r4, #1
     40a:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     40c:	7854      	ldrb	r4, [r2, #1]
     40e:	b264      	sxtb	r4, r4
     410:	2c00      	cmp	r4, #0
     412:	dbfb      	blt.n	40c <SystemInit+0x44>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 1 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC32K ) | // Generic Clock Generator 1
     414:	4c39      	ldr	r4, [pc, #228]	; (4fc <SystemInit+0x134>)
     416:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_XOSC32K | // Selected source is External 32KHz Oscillator
#endif
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     418:	7854      	ldrb	r4, [r2, #1]
     41a:	b264      	sxtb	r4, r4
     41c:	2c00      	cmp	r4, #0
     41e:	dbfb      	blt.n	418 <SystemInit+0x50>
  }

  /* ----------------------------------------------------------------------------------------------
   * 3) Put Generic Clock Generator 1 as source for Generic Clock Multiplexer 0 (DFLL48M reference)
   */
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GENERIC_CLOCK_MULTIPLEXER_DFLL48M ) | // Generic Clock Multiplexer 0
     420:	2482      	movs	r4, #130	; 0x82
     422:	01e4      	lsls	r4, r4, #7
     424:	8054      	strh	r4, [r2, #2]
                      GCLK_CLKCTRL_GEN_GCLK1 | // Generic Clock Generator 1 is source
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     426:	7854      	ldrb	r4, [r2, #1]
     428:	b264      	sxtb	r4, r4
     42a:	2c00      	cmp	r4, #0
     42c:	dbfb      	blt.n	426 <SystemInit+0x5e>
   */

  /* DFLL Configuration in Closed Loop mode, cf product datasheet chapter 15.6.7.1 - Closed-Loop Operation */

  /* Remove the OnDemand mode, Bug http://avr32.icgroup.norway.atmel.com/bugzilla/show_bug.cgi?id=9905 */
  SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     42e:	2402      	movs	r4, #2
     430:	849c      	strh	r4, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     432:	340e      	adds	r4, #14
     434:	68dd      	ldr	r5, [r3, #12]
     436:	4225      	tst	r5, r4
     438:	d0fc      	beq.n	434 <SystemInit+0x6c>
  {
    /* Wait for synchronization */
  }

  SYSCTRL->DFLLMUL.reg = SYSCTRL_DFLLMUL_CSTEP( 31 ) | // Coarse step is 31, half of the max value
     43a:	4c31      	ldr	r4, [pc, #196]	; (500 <SystemInit+0x138>)
     43c:	62dc      	str	r4, [r3, #44]	; 0x2c
                         SYSCTRL_DFLLMUL_FSTEP( 511 ) | // Fine step is 511, half of the max value
                         SYSCTRL_DFLLMUL_MUL( (VARIANT_MCK/VARIANT_MAINOSC) ) ; // External 32KHz is the reference

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     43e:	2410      	movs	r4, #16
     440:	68dd      	ldr	r5, [r3, #12]
     442:	4225      	tst	r5, r4
     444:	d0fc      	beq.n	440 <SystemInit+0x78>
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;

#else   // has crystal

  /* Write full configuration to DFLL control register */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_MODE | /* Enable the closed loop mode */
     446:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
     448:	4c2e      	ldr	r4, [pc, #184]	; (504 <SystemInit+0x13c>)
     44a:	432c      	orrs	r4, r5
     44c:	849c      	strh	r4, [r3, #36]	; 0x24
                           SYSCTRL_DFLLCTRL_WAITLOCK |
                           SYSCTRL_DFLLCTRL_QLDIS ; /* Disable Quick lock */

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     44e:	2410      	movs	r4, #16
     450:	68dd      	ldr	r5, [r3, #12]
     452:	4225      	tst	r5, r4
     454:	d0fc      	beq.n	450 <SystemInit+0x88>
  {
    /* Wait for synchronization */
  }

  /* Enable the DFLL */
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     456:	2402      	movs	r4, #2
     458:	8c9d      	ldrh	r5, [r3, #36]	; 0x24

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     45a:	2680      	movs	r6, #128	; 0x80
  SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ENABLE ;
     45c:	432c      	orrs	r4, r5
     45e:	849c      	strh	r4, [r3, #36]	; 0x24
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     460:	2440      	movs	r4, #64	; 0x40
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     462:	68dd      	ldr	r5, [r3, #12]
     464:	4235      	tst	r5, r6
     466:	d0fc      	beq.n	462 <SystemInit+0x9a>
          (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKF) == 0 )
     468:	68dd      	ldr	r5, [r3, #12]
  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLLCKC) == 0 ||
     46a:	4225      	tst	r5, r4
     46c:	d0f9      	beq.n	462 <SystemInit+0x9a>
    /* Wait for locks flags */
  }

#endif

  while ( (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) == 0 )
     46e:	2410      	movs	r4, #16
     470:	68dd      	ldr	r5, [r3, #12]
     472:	4225      	tst	r5, r4
     474:	d0fc      	beq.n	470 <SystemInit+0xa8>
  }

  /* ----------------------------------------------------------------------------------------------
   * 5) Switch Generic Clock Generator 0 to DFLL48M. CPU will run at 48MHz.
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_MAIN ) ; // Generic Clock Generator 0
     476:	2400      	movs	r4, #0
     478:	6094      	str	r4, [r2, #8]

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     47a:	7854      	ldrb	r4, [r2, #1]
     47c:	b264      	sxtb	r4, r4
     47e:	2c00      	cmp	r4, #0
     480:	dbfb      	blt.n	47a <SystemInit+0xb2>
  {
    /* Wait for synchronization */
  }

  /* Write Generic Clock Generator 0 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_MAIN ) | // Generic Clock Generator 0
     482:	4c21      	ldr	r4, [pc, #132]	; (508 <SystemInit+0x140>)
     484:	6054      	str	r4, [r2, #4]
                      GCLK_GENCTRL_SRC_DFLL48M | // Selected source is DFLL 48MHz
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_IDC | // Set 50/50 duty cycle
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     486:	7854      	ldrb	r4, [r2, #1]
     488:	b264      	sxtb	r4, r4
     48a:	2c00      	cmp	r4, #0
     48c:	dbfb      	blt.n	486 <SystemInit+0xbe>
  }

  /* ----------------------------------------------------------------------------------------------
   * 6) Modify PRESCaler value of OSC8M to have 8MHz
   */
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     48e:	6a1c      	ldr	r4, [r3, #32]
     490:	4d1e      	ldr	r5, [pc, #120]	; (50c <SystemInit+0x144>)
     492:	402c      	ands	r4, r5
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     494:	2580      	movs	r5, #128	; 0x80
  SYSCTRL->OSC8M.bit.PRESC = SYSCTRL_OSC8M_PRESC_0_Val ;  //CMSIS 4.5 changed the prescaler defines
     496:	621c      	str	r4, [r3, #32]
  SYSCTRL->OSC8M.bit.ONDEMAND = 0 ;
     498:	6a1c      	ldr	r4, [r3, #32]
     49a:	43ac      	bics	r4, r5
     49c:	621c      	str	r4, [r3, #32]

  /* ----------------------------------------------------------------------------------------------
   * 7) Put OSC8M as source for Generic Clock Generator 3
   */
  GCLK->GENDIV.reg = GCLK_GENDIV_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) ; // Generic Clock Generator 3
     49e:	2303      	movs	r3, #3
     4a0:	6093      	str	r3, [r2, #8]

  /* Write Generic Clock Generator 3 configuration */
  GCLK->GENCTRL.reg = GCLK_GENCTRL_ID( GENERIC_CLOCK_GENERATOR_OSC8M ) | // Generic Clock Generator 3
     4a2:	4b1b      	ldr	r3, [pc, #108]	; (510 <SystemInit+0x148>)
     4a4:	6053      	str	r3, [r2, #4]
                      GCLK_GENCTRL_SRC_OSC8M | // Selected source is RC OSC 8MHz (already enabled at reset)
//                      GCLK_GENCTRL_OE | // Output clock to a pin for tests
                      GCLK_GENCTRL_GENEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
     4a6:	7853      	ldrb	r3, [r2, #1]
     4a8:	b25b      	sxtb	r3, r3
     4aa:	2b00      	cmp	r3, #0
     4ac:	dbfb      	blt.n	4a6 <SystemInit+0xde>

  /*
   * Now that all system clocks are configured, we can set CPU and APBx BUS clocks.
   * There values are normally the one present after Reset.
   */
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     4ae:	2300      	movs	r3, #0

  // ADC Linearity bits 4:0
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;

  // ADC Linearity bits 7:5
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     4b0:	24ff      	movs	r4, #255	; 0xff
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
     4b2:	720b      	strb	r3, [r1, #8]
  SystemCoreClock=VARIANT_MCK ;
     4b4:	4a17      	ldr	r2, [pc, #92]	; (514 <SystemInit+0x14c>)
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
     4b6:	724b      	strb	r3, [r1, #9]
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
     4b8:	728b      	strb	r3, [r1, #10]
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
     4ba:	72cb      	strb	r3, [r1, #11]
  SystemCoreClock=VARIANT_MCK ;
     4bc:	4b16      	ldr	r3, [pc, #88]	; (518 <SystemInit+0x150>)
     4be:	601a      	str	r2, [r3, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     4c0:	4b16      	ldr	r3, [pc, #88]	; (51c <SystemInit+0x154>)
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     4c2:	4a17      	ldr	r2, [pc, #92]	; (520 <SystemInit+0x158>)
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     4c4:	681b      	ldr	r3, [r3, #0]
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     4c6:	6811      	ldr	r1, [r2, #0]
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     4c8:	069a      	lsls	r2, r3, #26
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     4ca:	015b      	lsls	r3, r3, #5
  uint32_t linearity = (*((uint32_t *) ADC_FUSES_LINEARITY_0_ADDR) & ADC_FUSES_LINEARITY_0_Msk) >> ADC_FUSES_LINEARITY_0_Pos;
     4cc:	0ec9      	lsrs	r1, r1, #27
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     4ce:	4023      	ands	r3, r4
  uint32_t bias = (*((uint32_t *) ADC_FUSES_BIASCAL_ADDR) & ADC_FUSES_BIASCAL_Msk) >> ADC_FUSES_BIASCAL_Pos;
     4d0:	0f52      	lsrs	r2, r2, #29

  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     4d2:	0212      	lsls	r2, r2, #8
  linearity |= ((*((uint32_t *) ADC_FUSES_LINEARITY_1_ADDR) & ADC_FUSES_LINEARITY_1_Msk) >> ADC_FUSES_LINEARITY_1_Pos) << 5;
     4d4:	430b      	orrs	r3, r1
  ADC->CALIB.reg = ADC_CALIB_BIAS_CAL(bias) | ADC_CALIB_LINEARITY_CAL(linearity);
     4d6:	4313      	orrs	r3, r2
     4d8:	4a12      	ldr	r2, [pc, #72]	; (524 <SystemInit+0x15c>)
     4da:	8513      	strh	r3, [r2, #40]	; 0x28

  /*
   * 9) Disable automatic NVM write operations
   */
  NVMCTRL->CTRLB.bit.MANW = 1;
     4dc:	2380      	movs	r3, #128	; 0x80
     4de:	6842      	ldr	r2, [r0, #4]
     4e0:	4313      	orrs	r3, r2
     4e2:	6043      	str	r3, [r0, #4]
}
     4e4:	bd70      	pop	{r4, r5, r6, pc}
     4e6:	46c0      	nop			; (mov r8, r8)
     4e8:	41004000 	.word	0x41004000
     4ec:	40000400 	.word	0x40000400
     4f0:	0000060c 	.word	0x0000060c
     4f4:	40000800 	.word	0x40000800
     4f8:	40000c00 	.word	0x40000c00
     4fc:	00010501 	.word	0x00010501
     500:	7dff05b8 	.word	0x7dff05b8
     504:	00000a04 	.word	0x00000a04
     508:	00030700 	.word	0x00030700
     50c:	fffffcff 	.word	0xfffffcff
     510:	00010603 	.word	0x00010603
     514:	02dc6c00 	.word	0x02dc6c00
     518:	20000080 	.word	0x20000080
     51c:	00806024 	.word	0x00806024
     520:	00806020 	.word	0x00806020
     524:	42004000 	.word	0x42004000

00000528 <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
     528:	203f      	movs	r0, #63	; 0x3f
     52a:	4770      	bx	lr

0000052c <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
     52c:	b513      	push	{r0, r1, r4, lr}
     52e:	466b      	mov	r3, sp
	return write(&c, 1);
     530:	6802      	ldr	r2, [r0, #0]
size_t Serial_::write(uint8_t c) {
     532:	71d9      	strb	r1, [r3, #7]
     534:	3307      	adds	r3, #7
	return write(&c, 1);
     536:	6854      	ldr	r4, [r2, #4]
     538:	0019      	movs	r1, r3
     53a:	2201      	movs	r2, #1
     53c:	47a0      	blx	r4
}
     53e:	bd16      	pop	{r1, r2, r4, pc}

00000540 <_ZN7Serial_9availableEv>:
{
     540:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT);
     542:	2102      	movs	r1, #2
     544:	6900      	ldr	r0, [r0, #16]
     546:	f000 fc37 	bl	db8 <_ZN14USBDeviceClass9availableEm>
}
     54a:	bd10      	pop	{r4, pc}

0000054c <_ZN7Serial_5flushEv>:
{
     54c:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
     54e:	2103      	movs	r1, #3
     550:	6900      	ldr	r0, [r0, #16]
     552:	f000 fc47 	bl	de4 <_ZN14USBDeviceClass5flushEm>
}
     556:	bd10      	pop	{r4, pc}

00000558 <_ZN7Serial_5writeEPKhj>:
{
     558:	b510      	push	{r4, lr}
     55a:	0013      	movs	r3, r2
     55c:	0004      	movs	r4, r0
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
     55e:	000a      	movs	r2, r1
     560:	6900      	ldr	r0, [r0, #16]
     562:	2103      	movs	r1, #3
     564:	f000 fd38 	bl	fd8 <_ZN14USBDeviceClass4sendEmPKvm>
	if (r > 0) {
     568:	2800      	cmp	r0, #0
     56a:	d101      	bne.n	570 <_ZN7Serial_5writeEPKhj+0x18>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     56c:	2301      	movs	r3, #1
     56e:	6063      	str	r3, [r4, #4]
}
     570:	bd10      	pop	{r4, pc}
	...

00000574 <_ZN7Serial_4peekEv>:
{
     574:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
     576:	4c05      	ldr	r4, [pc, #20]	; (58c <_ZN7Serial_4peekEv+0x18>)
     578:	6823      	ldr	r3, [r4, #0]
     57a:	1c5a      	adds	r2, r3, #1
     57c:	d104      	bne.n	588 <_ZN7Serial_4peekEv+0x14>
	_serialPeek = read();
     57e:	6803      	ldr	r3, [r0, #0]
     580:	68db      	ldr	r3, [r3, #12]
     582:	4798      	blx	r3
     584:	0003      	movs	r3, r0
     586:	6020      	str	r0, [r4, #0]
}
     588:	0018      	movs	r0, r3
     58a:	bd10      	pop	{r4, pc}
     58c:	20000054 	.word	0x20000054

00000590 <_ZN7Serial_4readEv>:
	if (_serialPeek != -1) {
     590:	4b07      	ldr	r3, [pc, #28]	; (5b0 <_ZN7Serial_4readEv+0x20>)
{
     592:	0002      	movs	r2, r0
	if (_serialPeek != -1) {
     594:	6818      	ldr	r0, [r3, #0]
{
     596:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
     598:	1c41      	adds	r1, r0, #1
     59a:	d003      	beq.n	5a4 <_ZN7Serial_4readEv+0x14>
		_serialPeek = -1;
     59c:	2201      	movs	r2, #1
     59e:	4252      	negs	r2, r2
     5a0:	601a      	str	r2, [r3, #0]
}
     5a2:	bd10      	pop	{r4, pc}
	return usb.recv(CDC_ENDPOINT_OUT);
     5a4:	2102      	movs	r1, #2
     5a6:	6910      	ldr	r0, [r2, #16]
     5a8:	f000 fd08 	bl	fbc <_ZN14USBDeviceClass4recvEm>
     5ac:	e7f9      	b.n	5a2 <_ZN7Serial_4readEv+0x12>
     5ae:	46c0      	nop			; (mov r8, r8)
     5b0:	20000054 	.word	0x20000054

000005b4 <_Z16CDC_GetInterfacePh>:
{
     5b4:	b510      	push	{r4, lr}
	interfaceNum[0] += 2;	// uses 2
     5b6:	7803      	ldrb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
     5b8:	2242      	movs	r2, #66	; 0x42
	interfaceNum[0] += 2;	// uses 2
     5ba:	3302      	adds	r3, #2
     5bc:	7003      	strb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
     5be:	4902      	ldr	r1, [pc, #8]	; (5c8 <_Z16CDC_GetInterfacePh+0x14>)
     5c0:	4802      	ldr	r0, [pc, #8]	; (5cc <_Z16CDC_GetInterfacePh+0x18>)
     5c2:	f000 fdb5 	bl	1130 <_ZN14USBDeviceClass11sendControlEPKvm>
}
     5c6:	bd10      	pop	{r4, pc}
     5c8:	20000010 	.word	0x20000010
     5cc:	20000150 	.word	0x20000150

000005d0 <_Z9CDC_SetupR8USBSetup>:
{
     5d0:	b510      	push	{r4, lr}
	uint8_t requestType = setup.bmRequestType;
     5d2:	7801      	ldrb	r1, [r0, #0]
{
     5d4:	0003      	movs	r3, r0
	uint8_t r = setup.bRequest;
     5d6:	7842      	ldrb	r2, [r0, #1]
	return false;
     5d8:	2000      	movs	r0, #0
	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
     5da:	29a1      	cmp	r1, #161	; 0xa1
     5dc:	d108      	bne.n	5f0 <_Z9CDC_SetupR8USBSetup+0x20>
		if (r == CDC_GET_LINE_CODING)
     5de:	2a21      	cmp	r2, #33	; 0x21
     5e0:	d105      	bne.n	5ee <_Z9CDC_SetupR8USBSetup+0x1e>
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
     5e2:	3a1a      	subs	r2, #26
     5e4:	4916      	ldr	r1, [pc, #88]	; (640 <_Z9CDC_SetupR8USBSetup+0x70>)
     5e6:	4817      	ldr	r0, [pc, #92]	; (644 <_Z9CDC_SetupR8USBSetup+0x74>)
     5e8:	f000 fda2 	bl	1130 <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
     5ec:	2001      	movs	r0, #1
}
     5ee:	bd10      	pop	{r4, pc}
	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
     5f0:	2921      	cmp	r1, #33	; 0x21
     5f2:	d1fc      	bne.n	5ee <_Z9CDC_SetupR8USBSetup+0x1e>
		if (r == CDC_SET_LINE_CODING)
     5f4:	2a20      	cmp	r2, #32
     5f6:	d111      	bne.n	61c <_Z9CDC_SetupR8USBSetup+0x4c>
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
     5f8:	3a19      	subs	r2, #25
     5fa:	4911      	ldr	r1, [pc, #68]	; (640 <_Z9CDC_SetupR8USBSetup+0x70>)
     5fc:	4811      	ldr	r0, [pc, #68]	; (644 <_Z9CDC_SetupR8USBSetup+0x74>)
     5fe:	f000 fc35 	bl	e6c <_ZN14USBDeviceClass11recvControlEPvm>
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
     602:	2296      	movs	r2, #150	; 0x96
     604:	4b0e      	ldr	r3, [pc, #56]	; (640 <_Z9CDC_SetupR8USBSetup+0x70>)
     606:	00d2      	lsls	r2, r2, #3
     608:	6819      	ldr	r1, [r3, #0]
     60a:	4291      	cmp	r1, r2
     60c:	d103      	bne.n	616 <_Z9CDC_SetupR8USBSetup+0x46>
     60e:	2401      	movs	r4, #1
     610:	79d8      	ldrb	r0, [r3, #7]
     612:	4004      	ands	r4, r0
     614:	d00e      	beq.n	634 <_Z9CDC_SetupR8USBSetup+0x64>
				cancelReset();
     616:	f7ff fe93 	bl	340 <cancelReset>
     61a:	e00e      	b.n	63a <_Z9CDC_SetupR8USBSetup+0x6a>
		if (r == CDC_SET_CONTROL_LINE_STATE)
     61c:	2a22      	cmp	r2, #34	; 0x22
     61e:	d103      	bne.n	628 <_Z9CDC_SetupR8USBSetup+0x58>
			_usbLineInfo.lineState = setup.wValueL;
     620:	789a      	ldrb	r2, [r3, #2]
     622:	4b07      	ldr	r3, [pc, #28]	; (640 <_Z9CDC_SetupR8USBSetup+0x70>)
     624:	71da      	strb	r2, [r3, #7]
     626:	e7ec      	b.n	602 <_Z9CDC_SetupR8USBSetup+0x32>
		if (CDC_SEND_BREAK == r)
     628:	2a23      	cmp	r2, #35	; 0x23
     62a:	d1e0      	bne.n	5ee <_Z9CDC_SetupR8USBSetup+0x1e>
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
     62c:	885a      	ldrh	r2, [r3, #2]
     62e:	4b06      	ldr	r3, [pc, #24]	; (648 <_Z9CDC_SetupR8USBSetup+0x78>)
     630:	601a      	str	r2, [r3, #0]
			return false;
     632:	e7dc      	b.n	5ee <_Z9CDC_SetupR8USBSetup+0x1e>
				initiateReset(250);
     634:	20fa      	movs	r0, #250	; 0xfa
     636:	f7ff fe7d 	bl	334 <initiateReset>
			return false;
     63a:	2000      	movs	r0, #0
     63c:	e7d7      	b.n	5ee <_Z9CDC_SetupR8USBSetup+0x1e>
     63e:	46c0      	nop			; (mov r8, r8)
     640:	20000008 	.word	0x20000008
     644:	20000150 	.word	0x20000150
     648:	20000004 	.word	0x20000004

0000064c <_ZN7Serial_5beginEm>:
}
     64c:	4770      	bx	lr

0000064e <_ZN7Serial_9readBytesEPcj>:
{
     64e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     650:	0005      	movs	r5, r0
     652:	9101      	str	r1, [sp, #4]
     654:	0017      	movs	r7, r2
	_startMillis = millis();
     656:	f7ff fe2b 	bl	2b0 <millis>
	size_t count = 0;
     65a:	2400      	movs	r4, #0
	_startMillis = millis();
     65c:	60e8      	str	r0, [r5, #12]
	while (count < length)
     65e:	42bc      	cmp	r4, r7
     660:	d211      	bcs.n	686 <_ZN7Serial_9readBytesEPcj+0x38>
		uint32_t n = usb.recv(CDC_ENDPOINT_OUT, buffer+count, length-count);
     662:	9a01      	ldr	r2, [sp, #4]
     664:	1b3b      	subs	r3, r7, r4
     666:	1912      	adds	r2, r2, r4
     668:	2102      	movs	r1, #2
     66a:	6928      	ldr	r0, [r5, #16]
     66c:	f000 fc38 	bl	ee0 <_ZN14USBDeviceClass4recvEmPvm>
     670:	1e06      	subs	r6, r0, #0
		if (n == 0 && (millis() - _startMillis) >= _timeout)
     672:	d106      	bne.n	682 <_ZN7Serial_9readBytesEPcj+0x34>
     674:	f7ff fe1c 	bl	2b0 <millis>
     678:	68eb      	ldr	r3, [r5, #12]
     67a:	1ac0      	subs	r0, r0, r3
     67c:	68ab      	ldr	r3, [r5, #8]
     67e:	4298      	cmp	r0, r3
     680:	d201      	bcs.n	686 <_ZN7Serial_9readBytesEPcj+0x38>
		count += n;
     682:	19a4      	adds	r4, r4, r6
	while (count < length)
     684:	e7eb      	b.n	65e <_ZN7Serial_9readBytesEPcj+0x10>
}
     686:	0020      	movs	r0, r4
     688:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000068c <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     68c:	22fa      	movs	r2, #250	; 0xfa
  public:
    Print() : write_error(0) {}
     68e:	2100      	movs	r1, #0
     690:	4b05      	ldr	r3, [pc, #20]	; (6a8 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x1c>)
     692:	0092      	lsls	r2, r2, #2
     694:	609a      	str	r2, [r3, #8]
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
     696:	4a05      	ldr	r2, [pc, #20]	; (6ac <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x20>)
     698:	6059      	str	r1, [r3, #4]
     69a:	3208      	adds	r2, #8
     69c:	601a      	str	r2, [r3, #0]
     69e:	4a04      	ldr	r2, [pc, #16]	; (6b0 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x24>)
     6a0:	7619      	strb	r1, [r3, #24]
     6a2:	611a      	str	r2, [r3, #16]

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ Serial(USBDevice);
     6a4:	4770      	bx	lr
     6a6:	46c0      	nop			; (mov r8, r8)
     6a8:	20000134 	.word	0x20000134
     6ac:	00002274 	.word	0x00002274
     6b0:	20000150 	.word	0x20000150

000006b4 <_ZN14USBDeviceClass6initEPEmm.part.5>:
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
     6b4:	b570      	push	{r4, r5, r6, lr}
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     6b6:	26c0      	movs	r6, #192	; 0xc0
     6b8:	b2c1      	uxtb	r1, r0
     6ba:	4c1b      	ldr	r4, [pc, #108]	; (728 <_ZN14USBDeviceClass6initEPEmm.part.5+0x74>)
     6bc:	014b      	lsls	r3, r1, #5
     6be:	18e3      	adds	r3, r4, r3
     6c0:	689a      	ldr	r2, [r3, #8]
     6c2:	4d1a      	ldr	r5, [pc, #104]	; (72c <_ZN14USBDeviceClass6initEPEmm.part.5+0x78>)
     6c4:	05b6      	lsls	r6, r6, #22
     6c6:	402a      	ands	r2, r5
     6c8:	4332      	orrs	r2, r6
     6ca:	609a      	str	r2, [r3, #8]
	}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
	{
		// Setup Control OUT
		usbd.epBank0SetSize(ep, 64);
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
     6cc:	4a18      	ldr	r2, [pc, #96]	; (730 <_ZN14USBDeviceClass6initEPEmm.part.5+0x7c>)
     6ce:	0180      	lsls	r0, r0, #6
     6d0:	1810      	adds	r0, r2, r0
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     6d2:	000a      	movs	r2, r1
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     6d4:	6058      	str	r0, [r3, #4]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     6d6:	2007      	movs	r0, #7
     6d8:	6824      	ldr	r4, [r4, #0]
     6da:	3208      	adds	r2, #8
     6dc:	0152      	lsls	r2, r2, #5
     6de:	5d11      	ldrb	r1, [r2, r4]
     6e0:	4381      	bics	r1, r0
     6e2:	0008      	movs	r0, r1
     6e4:	2101      	movs	r1, #1
     6e6:	4301      	orrs	r1, r0
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     6e8:	2070      	movs	r0, #112	; 0x70
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     6ea:	5511      	strb	r1, [r2, r4]
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     6ec:	6999      	ldr	r1, [r3, #24]
     6ee:	4029      	ands	r1, r5
     6f0:	4331      	orrs	r1, r6
     6f2:	6199      	str	r1, [r3, #24]
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     6f4:	490f      	ldr	r1, [pc, #60]	; (734 <_ZN14USBDeviceClass6initEPEmm.part.5+0x80>)
     6f6:	6159      	str	r1, [r3, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     6f8:	5d11      	ldrb	r1, [r2, r4]
     6fa:	4381      	bics	r1, r0
     6fc:	0008      	movs	r0, r1
     6fe:	2110      	movs	r1, #16
     700:	4301      	orrs	r1, r0
     702:	5511      	strb	r1, [r2, r4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     704:	6899      	ldr	r1, [r3, #8]
     706:	480c      	ldr	r0, [pc, #48]	; (738 <_ZN14USBDeviceClass6initEPEmm.part.5+0x84>)
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
     708:	18a2      	adds	r2, r4, r2
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     70a:	4008      	ands	r0, r1
     70c:	2180      	movs	r1, #128	; 0x80
     70e:	0349      	lsls	r1, r1, #13
     710:	4301      	orrs	r1, r0
     712:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     714:	6899      	ldr	r1, [r3, #8]
     716:	0b89      	lsrs	r1, r1, #14
     718:	0389      	lsls	r1, r1, #14
     71a:	6099      	str	r1, [r3, #8]
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
     71c:	2340      	movs	r3, #64	; 0x40
     71e:	7951      	ldrb	r1, [r2, #5]
     720:	430b      	orrs	r3, r1
     722:	7153      	strb	r3, [r2, #5]
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
     724:	bd70      	pop	{r4, r5, r6, pc}
     726:	46c0      	nop			; (mov r8, r8)
     728:	20000608 	.word	0x20000608
     72c:	8fffffff 	.word	0x8fffffff
     730:	2000033c 	.word	0x2000033c
     734:	2000017c 	.word	0x2000017c
     738:	f0003fff 	.word	0xf0003fff

0000073c <_ZN20USBDevice_SAMD21G18x5resetEv>:

	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
     73c:	b570      	push	{r4, r5, r6, lr}
	usb.CTRLA.bit.SWRST = 1;
     73e:	0004      	movs	r4, r0
     740:	2301      	movs	r3, #1
     742:	cc20      	ldmia	r4!, {r5}
	memset(EP, 0, sizeof(EP));
     744:	2100      	movs	r1, #0
	usb.CTRLA.bit.SWRST = 1;
     746:	782a      	ldrb	r2, [r5, #0]
	memset(EP, 0, sizeof(EP));
     748:	0020      	movs	r0, r4
	usb.CTRLA.bit.SWRST = 1;
     74a:	4313      	orrs	r3, r2
	memset(EP, 0, sizeof(EP));
     74c:	2280      	movs	r2, #128	; 0x80
	usb.CTRLA.bit.SWRST = 1;
     74e:	702b      	strb	r3, [r5, #0]
	memset(EP, 0, sizeof(EP));
     750:	0052      	lsls	r2, r2, #1
     752:	f001 fcf2 	bl	213a <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
     756:	78ab      	ldrb	r3, [r5, #2]
     758:	07db      	lsls	r3, r3, #31
     75a:	d4fc      	bmi.n	756 <_ZN20USBDevice_SAMD21G18x5resetEv+0x1a>
	usb.DESCADD.reg = (uint32_t)(&EP);
     75c:	626c      	str	r4, [r5, #36]	; 0x24
}
     75e:	bd70      	pop	{r4, r5, r6, pc}

00000760 <_ZN20USBDevice_SAMD21G18x9calibrateEv>:
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
     760:	221f      	movs	r2, #31
     762:	4b14      	ldr	r3, [pc, #80]	; (7b4 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x54>)
void USBDevice_SAMD21G18x::calibrate() {
     764:	b570      	push	{r4, r5, r6, lr}
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
     766:	681b      	ldr	r3, [r3, #0]
     768:	0b59      	lsrs	r1, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
     76a:	0c9c      	lsrs	r4, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
     76c:	019b      	lsls	r3, r3, #6
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
     76e:	4011      	ands	r1, r2
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
     770:	0f5b      	lsrs	r3, r3, #29
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
     772:	4022      	ands	r2, r4

	if (pad_transn == 0x1F)  // maximum value (31)
     774:	291f      	cmp	r1, #31
     776:	d100      	bne.n	77a <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x1a>
		pad_transn = 5;
     778:	391a      	subs	r1, #26
	if (pad_transp == 0x1F)  // maximum value (31)
     77a:	2a1f      	cmp	r2, #31
     77c:	d100      	bne.n	780 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x20>
		pad_transp = 29;
     77e:	3a02      	subs	r2, #2
	if (pad_trim == 0x7)     // maximum value (7)
     780:	2b07      	cmp	r3, #7
     782:	d100      	bne.n	786 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x26>
		pad_trim = 3;
     784:	3b04      	subs	r3, #4

	usb.PADCAL.bit.TRANSN = pad_transn;
     786:	251f      	movs	r5, #31
     788:	6800      	ldr	r0, [r0, #0]
     78a:	018e      	lsls	r6, r1, #6
     78c:	8d04      	ldrh	r4, [r0, #40]	; 0x28
     78e:	490a      	ldr	r1, [pc, #40]	; (7b8 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x58>)
	usb.PADCAL.bit.TRANSP = pad_transp;
     790:	402a      	ands	r2, r5
	usb.PADCAL.bit.TRANSN = pad_transn;
     792:	4021      	ands	r1, r4
     794:	4331      	orrs	r1, r6
     796:	8501      	strh	r1, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
     798:	8d01      	ldrh	r1, [r0, #40]	; 0x28
     79a:	0014      	movs	r4, r2
     79c:	000a      	movs	r2, r1
     79e:	43aa      	bics	r2, r5
     7a0:	4322      	orrs	r2, r4
     7a2:	8502      	strh	r2, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
     7a4:	8d02      	ldrh	r2, [r0, #40]	; 0x28
     7a6:	0319      	lsls	r1, r3, #12
     7a8:	4b04      	ldr	r3, [pc, #16]	; (7bc <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x5c>)
     7aa:	4013      	ands	r3, r2
     7ac:	430b      	orrs	r3, r1
     7ae:	8503      	strh	r3, [r0, #40]	; 0x28
}
     7b0:	bd70      	pop	{r4, r5, r6, pc}
     7b2:	46c0      	nop			; (mov r8, r8)
     7b4:	00806024 	.word	0x00806024
     7b8:	fffff83f 	.word	0xfffff83f
     7bc:	ffff8fff 	.word	0xffff8fff

000007c0 <_ZN7__GuardC1Ev>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     7c0:	f3ef 8310 	mrs	r3, PRIMASK
 * TODO: Move into a separate header file and make an API out of it
 */

class __Guard {
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
     7c4:	6003      	str	r3, [r0, #0]
     7c6:	2301      	movs	r3, #1
     7c8:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsid i" : : : "memory");
     7ca:	b672      	cpsid	i
		__disable_irq();
	}
     7cc:	4770      	bx	lr

000007ce <_ZN7__GuardD1Ev>:
	~__Guard() {
		if (primask == 0) {
     7ce:	6803      	ldr	r3, [r0, #0]
     7d0:	2b00      	cmp	r3, #0
     7d2:	d102      	bne.n	7da <_ZN7__GuardD1Ev+0xc>
  __ASM volatile ("cpsie i" : : : "memory");
     7d4:	b662      	cpsie	i
  __ASM volatile ("isb 0xF":::"memory");
     7d6:	f3bf 8f6f 	isb	sy
			__enable_irq();
			// http://infocenter.arm.com/help/topic/com.arm.doc.dai0321a/BIHBFEIB.html
			__ISB();
		}
	}
     7da:	4770      	bx	lr

000007dc <_ZNK26DoubleBufferedEPOutHandler9availableEv>:
			release();
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
     7dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (current == 0) {
     7de:	6905      	ldr	r5, [r0, #16]
	virtual uint32_t available() const {
     7e0:	0004      	movs	r4, r0
			bool ready = false;
			synchronized {
     7e2:	4668      	mov	r0, sp
		if (current == 0) {
     7e4:	2d00      	cmp	r5, #0
     7e6:	d114      	bne.n	812 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x36>
			synchronized {
     7e8:	f7ff ffea 	bl	7c0 <_ZN7__GuardC1Ev>
     7ec:	9b01      	ldr	r3, [sp, #4]
				ready = ready0;
     7ee:	1d62      	adds	r2, r4, #5
			synchronized {
     7f0:	3b01      	subs	r3, #1
     7f2:	d302      	bcc.n	7fa <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x1e>
				ready = ready0;
     7f4:	7fd5      	ldrb	r5, [r2, #31]
     7f6:	b2ed      	uxtb	r5, r5
     7f8:	e7fa      	b.n	7f0 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x14>
			synchronized {
     7fa:	4668      	mov	r0, sp
     7fc:	9301      	str	r3, [sp, #4]
     7fe:	f7ff ffe6 	bl	7ce <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
     802:	2d00      	cmp	r5, #0
     804:	d101      	bne.n	80a <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2e>
     806:	2000      	movs	r0, #0
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
		}
	}
     808:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			return ready ? (last0 - first0) : 0;
     80a:	6a20      	ldr	r0, [r4, #32]
     80c:	69e3      	ldr	r3, [r4, #28]
			return ready ? (last1 - first1) : 0;
     80e:	1ac0      	subs	r0, r0, r3
     810:	e7fa      	b.n	808 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2c>
			synchronized {
     812:	f7ff ffd5 	bl	7c0 <_ZN7__GuardC1Ev>
				ready = ready1;
     816:	0022      	movs	r2, r4
			bool ready = false;
     818:	2500      	movs	r5, #0
     81a:	9b01      	ldr	r3, [sp, #4]
				ready = ready1;
     81c:	3234      	adds	r2, #52	; 0x34
			synchronized {
     81e:	3b01      	subs	r3, #1
     820:	d302      	bcc.n	828 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x4c>
				ready = ready1;
     822:	7815      	ldrb	r5, [r2, #0]
     824:	b2ed      	uxtb	r5, r5
			synchronized {
     826:	e7fa      	b.n	81e <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x42>
     828:	4668      	mov	r0, sp
     82a:	9301      	str	r3, [sp, #4]
     82c:	f7ff ffcf 	bl	7ce <_ZN7__GuardD1Ev>
			return ready ? (last1 - first1) : 0;
     830:	2d00      	cmp	r5, #0
     832:	d0e8      	beq.n	806 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2a>
     834:	6b20      	ldr	r0, [r4, #48]	; 0x30
     836:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     838:	e7e9      	b.n	80e <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x32>
	...

0000083c <_ZN26DoubleBufferedEPOutHandler7releaseEv>:

	void release() {
     83c:	b5f0      	push	{r4, r5, r6, r7, lr}
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     83e:	2501      	movs	r5, #1
		// Release OUT EP
		usbd.epBank0EnableTransferComplete(ep);
     840:	6846      	ldr	r6, [r0, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     842:	7a03      	ldrb	r3, [r0, #8]
     844:	6831      	ldr	r1, [r6, #0]
     846:	015a      	lsls	r2, r3, #5
     848:	188c      	adds	r4, r1, r2
     84a:	34ff      	adds	r4, #255	; 0xff
     84c:	7aa7      	ldrb	r7, [r4, #10]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     84e:	18b2      	adds	r2, r6, r2
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     850:	433d      	orrs	r5, r7
     852:	72a5      	strb	r5, [r4, #10]
		usbd.epBank0SetMultiPacketSize(ep, size);
     854:	68c4      	ldr	r4, [r0, #12]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     856:	4d09      	ldr	r5, [pc, #36]	; (87c <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x40>)
     858:	6890      	ldr	r0, [r2, #8]
     85a:	04a4      	lsls	r4, r4, #18
     85c:	4028      	ands	r0, r5
     85e:	0924      	lsrs	r4, r4, #4
     860:	4320      	orrs	r0, r4
     862:	6090      	str	r0, [r2, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     864:	6890      	ldr	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     866:	3308      	adds	r3, #8
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     868:	0b80      	lsrs	r0, r0, #14
     86a:	0380      	lsls	r0, r0, #14
     86c:	6090      	str	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     86e:	2240      	movs	r2, #64	; 0x40
     870:	015b      	lsls	r3, r3, #5
     872:	18cb      	adds	r3, r1, r3
     874:	7919      	ldrb	r1, [r3, #4]
     876:	430a      	orrs	r2, r1
     878:	711a      	strb	r2, [r3, #4]
		usbd.epBank0SetByteCount(ep, 0);
		usbd.epBank0ResetReady(ep);
	}
     87a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     87c:	f0003fff 	.word	0xf0003fff

00000880 <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
	virtual uint32_t recv(void *_data, uint32_t len)
     880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (current == 0) {
     882:	6903      	ldr	r3, [r0, #16]
	virtual uint32_t recv(void *_data, uint32_t len)
     884:	0004      	movs	r4, r0
     886:	000e      	movs	r6, r1
     888:	0017      	movs	r7, r2
			synchronized {
     88a:	4668      	mov	r0, sp
		if (current == 0) {
     88c:	2b00      	cmp	r3, #0
     88e:	d13d      	bne.n	90c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x8c>
			synchronized {
     890:	f7ff ff96 	bl	7c0 <_ZN7__GuardC1Ev>
     894:	9b01      	ldr	r3, [sp, #4]
				if (!ready0) {
     896:	1d61      	adds	r1, r4, #5
     898:	3b01      	subs	r3, #1
			synchronized {
     89a:	1c5a      	adds	r2, r3, #1
     89c:	d00c      	beq.n	8b8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x38>
				if (!ready0) {
     89e:	7fcd      	ldrb	r5, [r1, #31]
     8a0:	1e5a      	subs	r2, r3, #1
     8a2:	b2ed      	uxtb	r5, r5
     8a4:	2d00      	cmp	r5, #0
     8a6:	d105      	bne.n	8b4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x34>
				synchronized {
     8a8:	4668      	mov	r0, sp
     8aa:	9301      	str	r3, [sp, #4]
     8ac:	f7ff ff8f 	bl	7ce <_ZN7__GuardD1Ev>
	}
     8b0:	0028      	movs	r0, r5
     8b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     8b4:	0013      	movs	r3, r2
     8b6:	e7f0      	b.n	89a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1a>
			synchronized {
     8b8:	4668      	mov	r0, sp
     8ba:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first0 < last0; i++) {
     8bc:	2500      	movs	r5, #0
			synchronized {
     8be:	f7ff ff86 	bl	7ce <_ZN7__GuardD1Ev>
     8c2:	69e3      	ldr	r3, [r4, #28]
			for (i=0; i<len && first0 < last0; i++) {
     8c4:	42af      	cmp	r7, r5
     8c6:	d002      	beq.n	8ce <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x4e>
     8c8:	6a22      	ldr	r2, [r4, #32]
     8ca:	4293      	cmp	r3, r2
     8cc:	d357      	bcc.n	97e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfe>
			if (first0 == last0) {
     8ce:	6a22      	ldr	r2, [r4, #32]
     8d0:	4293      	cmp	r3, r2
     8d2:	d1ed      	bne.n	8b0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first0 = 0;
     8d4:	2300      	movs	r3, #0
     8d6:	61e3      	str	r3, [r4, #28]
				current = 1;
     8d8:	3301      	adds	r3, #1
     8da:	6123      	str	r3, [r4, #16]
				synchronized {
     8dc:	4668      	mov	r0, sp
     8de:	f7ff ff6f 	bl	7c0 <_ZN7__GuardC1Ev>
					if (notify) {
     8e2:	0022      	movs	r2, r4
					ready0 = false;
     8e4:	2100      	movs	r1, #0
     8e6:	9b01      	ldr	r3, [sp, #4]
     8e8:	1d67      	adds	r7, r4, #5
     8ea:	3b01      	subs	r3, #1
					if (notify) {
     8ec:	3235      	adds	r2, #53	; 0x35
				synchronized {
     8ee:	1c58      	adds	r0, r3, #1
     8f0:	d0da      	beq.n	8a8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready0 = false;
     8f2:	77f9      	strb	r1, [r7, #31]
					if (notify) {
     8f4:	7810      	ldrb	r0, [r2, #0]
     8f6:	1e5e      	subs	r6, r3, #1
     8f8:	2800      	cmp	r0, #0
     8fa:	d005      	beq.n	908 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x88>
						notify = false;
     8fc:	7011      	strb	r1, [r2, #0]
						release();
     8fe:	0020      	movs	r0, r4
     900:	9301      	str	r3, [sp, #4]
     902:	f7ff ff9b 	bl	83c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     906:	e7ec      	b.n	8e2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x62>
					if (notify) {
     908:	0033      	movs	r3, r6
     90a:	e7f0      	b.n	8ee <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x6e>
			synchronized {
     90c:	f7ff ff58 	bl	7c0 <_ZN7__GuardC1Ev>
				if (!ready1) {
     910:	0021      	movs	r1, r4
     912:	9b01      	ldr	r3, [sp, #4]
     914:	3134      	adds	r1, #52	; 0x34
     916:	3b01      	subs	r3, #1
			synchronized {
     918:	1c5a      	adds	r2, r3, #1
     91a:	d006      	beq.n	92a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xaa>
				if (!ready1) {
     91c:	780d      	ldrb	r5, [r1, #0]
     91e:	1e5a      	subs	r2, r3, #1
     920:	b2ed      	uxtb	r5, r5
     922:	2d00      	cmp	r5, #0
     924:	d0c0      	beq.n	8a8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
     926:	0013      	movs	r3, r2
     928:	e7f6      	b.n	918 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x98>
			synchronized {
     92a:	4668      	mov	r0, sp
     92c:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first1 < last1; i++) {
     92e:	2500      	movs	r5, #0
			synchronized {
     930:	f7ff ff4d 	bl	7ce <_ZN7__GuardD1Ev>
     934:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			for (i=0; i<len && first1 < last1; i++) {
     936:	42bd      	cmp	r5, r7
     938:	d002      	beq.n	940 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc0>
     93a:	6b22      	ldr	r2, [r4, #48]	; 0x30
     93c:	4293      	cmp	r3, r2
     93e:	d326      	bcc.n	98e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x10e>
			if (first1 == last1) {
     940:	6b22      	ldr	r2, [r4, #48]	; 0x30
     942:	4293      	cmp	r3, r2
     944:	d1b4      	bne.n	8b0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first1 = 0;
     946:	2300      	movs	r3, #0
				synchronized {
     948:	4668      	mov	r0, sp
				first1 = 0;
     94a:	62e3      	str	r3, [r4, #44]	; 0x2c
				current = 0;
     94c:	6123      	str	r3, [r4, #16]
				synchronized {
     94e:	f7ff ff37 	bl	7c0 <_ZN7__GuardC1Ev>
					ready1 = false;
     952:	0027      	movs	r7, r4
					if (notify) {
     954:	0022      	movs	r2, r4
					ready1 = false;
     956:	2100      	movs	r1, #0
     958:	9b01      	ldr	r3, [sp, #4]
     95a:	3734      	adds	r7, #52	; 0x34
     95c:	3b01      	subs	r3, #1
					if (notify) {
     95e:	3235      	adds	r2, #53	; 0x35
				synchronized {
     960:	1c58      	adds	r0, r3, #1
     962:	d0a1      	beq.n	8a8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready1 = false;
     964:	7039      	strb	r1, [r7, #0]
					if (notify) {
     966:	7810      	ldrb	r0, [r2, #0]
     968:	1e5e      	subs	r6, r3, #1
     96a:	2800      	cmp	r0, #0
     96c:	d005      	beq.n	97a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfa>
						notify = false;
     96e:	7011      	strb	r1, [r2, #0]
						release();
     970:	0020      	movs	r0, r4
     972:	9301      	str	r3, [sp, #4]
     974:	f7ff ff62 	bl	83c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     978:	e7eb      	b.n	952 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd2>
     97a:	0033      	movs	r3, r6
     97c:	e7f0      	b.n	960 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xe0>
				data[i] = data0[first0++];
     97e:	1c5a      	adds	r2, r3, #1
     980:	61e2      	str	r2, [r4, #28]
     982:	69a2      	ldr	r2, [r4, #24]
     984:	18d3      	adds	r3, r2, r3
     986:	781b      	ldrb	r3, [r3, #0]
     988:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first0 < last0; i++) {
     98a:	3501      	adds	r5, #1
     98c:	e799      	b.n	8c2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x42>
				data[i] = data1[first1++];
     98e:	1c5a      	adds	r2, r3, #1
     990:	62e2      	str	r2, [r4, #44]	; 0x2c
     992:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     994:	18d3      	adds	r3, r2, r3
     996:	781b      	ldrb	r3, [r3, #0]
     998:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first1 < last1; i++) {
     99a:	3501      	adds	r5, #1
     99c:	e7ca      	b.n	934 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xb4>

0000099e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
	virtual void handleEndpoint()
     99e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     9a0:	7a02      	ldrb	r2, [r0, #8]
		if (usbd.epBank0IsTransferComplete(ep))
     9a2:	6843      	ldr	r3, [r0, #4]
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     9a4:	0011      	movs	r1, r2
	virtual void handleEndpoint()
     9a6:	0004      	movs	r4, r0
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     9a8:	3108      	adds	r1, #8
     9aa:	6818      	ldr	r0, [r3, #0]
     9ac:	0149      	lsls	r1, r1, #5
     9ae:	1841      	adds	r1, r0, r1
     9b0:	79c8      	ldrb	r0, [r1, #7]
		if (usbd.epBank0IsTransferComplete(ep))
     9b2:	07c0      	lsls	r0, r0, #31
     9b4:	d525      	bpl.n	a02 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x64>
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
     9b6:	2501      	movs	r5, #1
     9b8:	0152      	lsls	r2, r2, #5
     9ba:	71cd      	strb	r5, [r1, #7]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     9bc:	189b      	adds	r3, r3, r2
     9be:	689a      	ldr	r2, [r3, #8]
			if (incoming == 0) {
     9c0:	6961      	ldr	r1, [r4, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     9c2:	0492      	lsls	r2, r2, #18
     9c4:	0c92      	lsrs	r2, r2, #18
			if (incoming == 0) {
     9c6:	2900      	cmp	r1, #0
     9c8:	d11f      	bne.n	a0a <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x6c>
				last0 = usbd.epBank0ByteCount(ep);
     9ca:	6222      	str	r2, [r4, #32]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     9cc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
				incoming = 1;
     9ce:	6165      	str	r5, [r4, #20]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     9d0:	605a      	str	r2, [r3, #4]
				ready0 = true;
     9d2:	1d63      	adds	r3, r4, #5
     9d4:	77dd      	strb	r5, [r3, #31]
				synchronized {
     9d6:	4668      	mov	r0, sp
     9d8:	f7ff fef2 	bl	7c0 <_ZN7__GuardC1Ev>
					if (ready1) {
     9dc:	0025      	movs	r5, r4
     9de:	0021      	movs	r1, r4
     9e0:	9b01      	ldr	r3, [sp, #4]
     9e2:	3534      	adds	r5, #52	; 0x34
     9e4:	3b01      	subs	r3, #1
     9e6:	3135      	adds	r1, #53	; 0x35
				synchronized {
     9e8:	1c5a      	adds	r2, r3, #1
     9ea:	d02b      	beq.n	a44 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xa6>
					if (ready1) {
     9ec:	782a      	ldrb	r2, [r5, #0]
     9ee:	1e58      	subs	r0, r3, #1
     9f0:	b2d2      	uxtb	r2, r2
     9f2:	2a00      	cmp	r2, #0
     9f4:	d006      	beq.n	a04 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x66>
     9f6:	9301      	str	r3, [sp, #4]
						notify = true;
     9f8:	2301      	movs	r3, #1
     9fa:	700b      	strb	r3, [r1, #0]
						return;
     9fc:	4668      	mov	r0, sp
     9fe:	f7ff fee6 	bl	7ce <_ZN7__GuardD1Ev>
	}
     a02:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
					notify = false;
     a04:	700a      	strb	r2, [r1, #0]
				synchronized {
     a06:	0003      	movs	r3, r0
     a08:	e7ee      	b.n	9e8 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x4a>
				last1 = usbd.epBank0ByteCount(ep);
     a0a:	6322      	str	r2, [r4, #48]	; 0x30
				incoming = 0;
     a0c:	2200      	movs	r2, #0
     a0e:	6162      	str	r2, [r4, #20]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     a10:	69a2      	ldr	r2, [r4, #24]
				synchronized {
     a12:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     a14:	605a      	str	r2, [r3, #4]
				synchronized {
     a16:	f7ff fed3 	bl	7c0 <_ZN7__GuardC1Ev>
					ready1 = true;
     a1a:	0026      	movs	r6, r4
     a1c:	0021      	movs	r1, r4
     a1e:	9b01      	ldr	r3, [sp, #4]
     a20:	3634      	adds	r6, #52	; 0x34
     a22:	3b01      	subs	r3, #1
					if (ready0) {
     a24:	1d67      	adds	r7, r4, #5
     a26:	3135      	adds	r1, #53	; 0x35
				synchronized {
     a28:	1c5a      	adds	r2, r3, #1
     a2a:	d00b      	beq.n	a44 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xa6>
					ready1 = true;
     a2c:	7035      	strb	r5, [r6, #0]
					if (ready0) {
     a2e:	7ffa      	ldrb	r2, [r7, #31]
     a30:	1e58      	subs	r0, r3, #1
     a32:	b2d2      	uxtb	r2, r2
     a34:	2a00      	cmp	r2, #0
     a36:	d002      	beq.n	a3e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xa0>
     a38:	9301      	str	r3, [sp, #4]
						notify = true;
     a3a:	700d      	strb	r5, [r1, #0]
     a3c:	e7de      	b.n	9fc <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x5e>
					notify = false;
     a3e:	700a      	strb	r2, [r1, #0]
				synchronized {
     a40:	0003      	movs	r3, r0
     a42:	e7f1      	b.n	a28 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x8a>
     a44:	4668      	mov	r0, sp
     a46:	9301      	str	r3, [sp, #4]
     a48:	f7ff fec1 	bl	7ce <_ZN7__GuardD1Ev>
			release();
     a4c:	0020      	movs	r0, r4
     a4e:	f7ff fef5 	bl	83c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     a52:	e7d6      	b.n	a02 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x64>

00000a54 <_ZN14USBDeviceClass14SendInterfacesEPm>:
{
     a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
     a56:	466b      	mov	r3, sp
     a58:	1ddc      	adds	r4, r3, #7
     a5a:	2300      	movs	r3, #0
{
     a5c:	000d      	movs	r5, r1
	total[0] += CDC_GetInterface(&interfaces);
     a5e:	0020      	movs	r0, r4
	uint8_t interfaces = 0;
     a60:	7023      	strb	r3, [r4, #0]
	total[0] += CDC_GetInterface(&interfaces);
     a62:	f7ff fda7 	bl	5b4 <_Z16CDC_GetInterfacePh>
     a66:	682b      	ldr	r3, [r5, #0]
     a68:	1818      	adds	r0, r3, r0
     a6a:	6028      	str	r0, [r5, #0]
	total[0] += PluggableUSB().getInterface(&interfaces);
     a6c:	f001 fa20 	bl	1eb0 <_Z12PluggableUSBv>
     a70:	0021      	movs	r1, r4
     a72:	f001 f9d9 	bl	1e28 <_ZN13PluggableUSB_12getInterfaceEPh>
     a76:	682b      	ldr	r3, [r5, #0]
     a78:	1818      	adds	r0, r3, r0
     a7a:	6028      	str	r0, [r5, #0]
	return interfaces;
     a7c:	7820      	ldrb	r0, [r4, #0]
}
     a7e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00000a80 <_ZN14USBDeviceClass14handleEndpointEh>:
	if (ep == CDC_ENDPOINT_IN)
     a80:	2903      	cmp	r1, #3
     a82:	d10e      	bne.n	aa2 <_ZN14USBDeviceClass14handleEndpointEh+0x22>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
     a84:	2280      	movs	r2, #128	; 0x80
     a86:	4b0e      	ldr	r3, [pc, #56]	; (ac0 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
     a88:	3162      	adds	r1, #98	; 0x62
     a8a:	681b      	ldr	r3, [r3, #0]
     a8c:	31ff      	adds	r1, #255	; 0xff
     a8e:	5c58      	ldrb	r0, [r3, r1]
     a90:	4252      	negs	r2, r2
     a92:	4302      	orrs	r2, r0
     a94:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     a96:	2268      	movs	r2, #104	; 0x68
     a98:	3963      	subs	r1, #99	; 0x63
     a9a:	39ff      	subs	r1, #255	; 0xff
     a9c:	32ff      	adds	r2, #255	; 0xff
     a9e:	5499      	strb	r1, [r3, r2]
}
     aa0:	4770      	bx	lr
	if (ep == CDC_ENDPOINT_ACM)
     aa2:	2901      	cmp	r1, #1
     aa4:	d1fc      	bne.n	aa0 <_ZN14USBDeviceClass14handleEndpointEh+0x20>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
     aa6:	2280      	movs	r2, #128	; 0x80
     aa8:	4b05      	ldr	r3, [pc, #20]	; (ac0 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
     aaa:	3124      	adds	r1, #36	; 0x24
     aac:	681b      	ldr	r3, [r3, #0]
     aae:	31ff      	adds	r1, #255	; 0xff
     ab0:	5c58      	ldrb	r0, [r3, r1]
     ab2:	4252      	negs	r2, r2
     ab4:	4302      	orrs	r2, r0
     ab6:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     ab8:	3923      	subs	r1, #35	; 0x23
     aba:	39ff      	subs	r1, #255	; 0xff
     abc:	2228      	movs	r2, #40	; 0x28
     abe:	e7ed      	b.n	a9c <_ZN14USBDeviceClass14handleEndpointEh+0x1c>
     ac0:	20000608 	.word	0x20000608

00000ac4 <_ZN14USBDeviceClass4initEv>:
{
     ac4:	b570      	push	{r4, r5, r6, lr}
	txLEDPulse = 0;
     ac6:	2500      	movs	r5, #0
     ac8:	4b2f      	ldr	r3, [pc, #188]	; (b88 <_ZN14USBDeviceClass4initEv+0xc4>)
	pinMode(PIN_LED_TXL, OUTPUT);
     aca:	2101      	movs	r1, #1
{
     acc:	0004      	movs	r4, r0
	pinMode(PIN_LED_TXL, OUTPUT);
     ace:	201a      	movs	r0, #26
	txLEDPulse = 0;
     ad0:	701d      	strb	r5, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
     ad2:	f000 fe87 	bl	17e4 <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
     ad6:	2101      	movs	r1, #1
     ad8:	201a      	movs	r0, #26
     ada:	f000 fecf 	bl	187c <digitalWrite>
	rxLEDPulse = 0;
     ade:	4b2b      	ldr	r3, [pc, #172]	; (b8c <_ZN14USBDeviceClass4initEv+0xc8>)
	pinMode(PIN_LED_RXL, OUTPUT);
     ae0:	2101      	movs	r1, #1
     ae2:	2019      	movs	r0, #25
	rxLEDPulse = 0;
     ae4:	701d      	strb	r5, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
     ae6:	f000 fe7d 	bl	17e4 <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
     aea:	2101      	movs	r1, #1
     aec:	2019      	movs	r0, #25
     aee:	f000 fec5 	bl	187c <digitalWrite>
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
     af2:	2320      	movs	r3, #32
     af4:	4a26      	ldr	r2, [pc, #152]	; (b90 <_ZN14USBDeviceClass4initEv+0xcc>)
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
     af6:	200f      	movs	r0, #15
	PM->APBBMASK.reg |= PM_APBBMASK_USB;
     af8:	69d1      	ldr	r1, [r2, #28]
     afa:	430b      	orrs	r3, r1
     afc:	61d3      	str	r3, [r2, #28]
	PORT->Group[0].PINCFG[PIN_PA24G_USB_DM].bit.PMUXEN = 1;
     afe:	2201      	movs	r2, #1
     b00:	4924      	ldr	r1, [pc, #144]	; (b94 <_ZN14USBDeviceClass4initEv+0xd0>)
     b02:	780b      	ldrb	r3, [r1, #0]
     b04:	4313      	orrs	r3, r2
     b06:	700b      	strb	r3, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg &= ~(0xF << (4 * (PIN_PA24G_USB_DM & 0x01u)));
     b08:	4b23      	ldr	r3, [pc, #140]	; (b98 <_ZN14USBDeviceClass4initEv+0xd4>)
     b0a:	7819      	ldrb	r1, [r3, #0]
     b0c:	4381      	bics	r1, r0
     b0e:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA24G_USB_DM/2].reg |= MUX_PA24G_USB_DM << (4 * (PIN_PA24G_USB_DM & 0x01u));
     b10:	2106      	movs	r1, #6
     b12:	781d      	ldrb	r5, [r3, #0]
     b14:	4329      	orrs	r1, r5
     b16:	7019      	strb	r1, [r3, #0]
	PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].bit.PMUXEN = 1;
     b18:	4920      	ldr	r1, [pc, #128]	; (b9c <_ZN14USBDeviceClass4initEv+0xd8>)
     b1a:	780d      	ldrb	r5, [r1, #0]
     b1c:	432a      	orrs	r2, r5
     b1e:	700a      	strb	r2, [r1, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg &= ~(0xF << (4 * (PIN_PA25G_USB_DP & 0x01u)));
     b20:	781a      	ldrb	r2, [r3, #0]
     b22:	4002      	ands	r2, r0
     b24:	701a      	strb	r2, [r3, #0]
	PORT->Group[0].PMUX[PIN_PA25G_USB_DP/2].reg |= MUX_PA25G_USB_DP << (4 * (PIN_PA25G_USB_DP & 0x01u));
     b26:	2260      	movs	r2, #96	; 0x60
     b28:	7819      	ldrb	r1, [r3, #0]
     b2a:	430a      	orrs	r2, r1
     b2c:	701a      	strb	r2, [r3, #0]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(6)     | // Generic Clock Multiplexer 6
     b2e:	4b1c      	ldr	r3, [pc, #112]	; (ba0 <_ZN14USBDeviceClass4initEv+0xdc>)
     b30:	4a1c      	ldr	r2, [pc, #112]	; (ba4 <_ZN14USBDeviceClass4initEv+0xe0>)
     b32:	805a      	strh	r2, [r3, #2]
	while (GCLK->STATUS.bit.SYNCBUSY)
     b34:	785a      	ldrb	r2, [r3, #1]
     b36:	09d2      	lsrs	r2, r2, #7
     b38:	d1fc      	bne.n	b34 <_ZN14USBDeviceClass4initEv+0x70>
	USB_SetHandler(&UDD_Handler);
     b3a:	481b      	ldr	r0, [pc, #108]	; (ba8 <_ZN14USBDeviceClass4initEv+0xe4>)
     b3c:	f7ff fbb2 	bl	2a4 <USB_SetHandler>
	usbd.reset();
     b40:	4d1a      	ldr	r5, [pc, #104]	; (bac <_ZN14USBDeviceClass4initEv+0xe8>)
     b42:	0028      	movs	r0, r5
     b44:	f7ff fdfa 	bl	73c <_ZN20USBDevice_SAMD21G18x5resetEv>
	usbd.calibrate();
     b48:	0028      	movs	r0, r5
     b4a:	f7ff fe09 	bl	760 <_ZN20USBDevice_SAMD21G18x9calibrateEv>
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
     b4e:	217f      	movs	r1, #127	; 0x7f
     b50:	682b      	ldr	r3, [r5, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
     b52:	20c1      	movs	r0, #193	; 0xc1
     b54:	781a      	ldrb	r2, [r3, #0]
     b56:	0080      	lsls	r0, r0, #2
     b58:	400a      	ands	r2, r1
     b5a:	701a      	strb	r2, [r3, #0]
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
     b5c:	2204      	movs	r2, #4
     b5e:	7819      	ldrb	r1, [r3, #0]
     b60:	430a      	orrs	r2, r1
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
     b62:	210c      	movs	r1, #12
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
     b64:	701a      	strb	r2, [r3, #0]
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
     b66:	891a      	ldrh	r2, [r3, #8]
     b68:	438a      	bics	r2, r1
     b6a:	4911      	ldr	r1, [pc, #68]	; (bb0 <_ZN14USBDeviceClass4initEv+0xec>)
     b6c:	811a      	strh	r2, [r3, #8]
     b6e:	580a      	ldr	r2, [r1, r0]
     b70:	0212      	lsls	r2, r2, #8
     b72:	0a12      	lsrs	r2, r2, #8
     b74:	500a      	str	r2, [r1, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     b76:	2280      	movs	r2, #128	; 0x80
     b78:	600a      	str	r2, [r1, #0]
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
     b7a:	7819      	ldrb	r1, [r3, #0]
     b7c:	3a7e      	subs	r2, #126	; 0x7e
     b7e:	430a      	orrs	r2, r1
     b80:	701a      	strb	r2, [r3, #0]
	initialized = true;
     b82:	2301      	movs	r3, #1
     b84:	7023      	strb	r3, [r4, #0]
}
     b86:	bd70      	pop	{r4, r5, r6, pc}
     b88:	20000171 	.word	0x20000171
     b8c:	20000170 	.word	0x20000170
     b90:	40000400 	.word	0x40000400
     b94:	41004458 	.word	0x41004458
     b98:	4100443c 	.word	0x4100443c
     b9c:	41004459 	.word	0x41004459
     ba0:	40000c00 	.word	0x40000c00
     ba4:	00004006 	.word	0x00004006
     ba8:	00001581 	.word	0x00001581
     bac:	20000608 	.word	0x20000608
     bb0:	e000e100 	.word	0xe000e100

00000bb4 <_ZN14USBDeviceClass6attachEv>:
	if (!initialized)
     bb4:	7800      	ldrb	r0, [r0, #0]
     bb6:	2800      	cmp	r0, #0
     bb8:	d010      	beq.n	bdc <_ZN14USBDeviceClass6attachEv+0x28>
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
     bba:	2101      	movs	r1, #1
     bbc:	4b08      	ldr	r3, [pc, #32]	; (be0 <_ZN14USBDeviceClass6attachEv+0x2c>)
     bbe:	681b      	ldr	r3, [r3, #0]
     bc0:	891a      	ldrh	r2, [r3, #8]
     bc2:	438a      	bics	r2, r1
     bc4:	811a      	strh	r2, [r3, #8]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
     bc6:	2208      	movs	r2, #8
     bc8:	8b19      	ldrh	r1, [r3, #24]
     bca:	430a      	orrs	r2, r1
     bcc:	831a      	strh	r2, [r3, #24]
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
     bce:	2204      	movs	r2, #4
     bd0:	8b19      	ldrh	r1, [r3, #24]
     bd2:	430a      	orrs	r2, r1
     bd4:	831a      	strh	r2, [r3, #24]
	_usbConfiguration = 0;
     bd6:	2200      	movs	r2, #0
     bd8:	4b02      	ldr	r3, [pc, #8]	; (be4 <_ZN14USBDeviceClass6attachEv+0x30>)
     bda:	601a      	str	r2, [r3, #0]
}
     bdc:	4770      	bx	lr
     bde:	46c0      	nop			; (mov r8, r8)
     be0:	20000608 	.word	0x20000608
     be4:	20000600 	.word	0x20000600

00000be8 <_ZN14USBDeviceClass10setAddressEm>:
{
     be8:	b510      	push	{r4, lr}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     bea:	4a0f      	ldr	r2, [pc, #60]	; (c28 <_ZN14USBDeviceClass10setAddressEm+0x40>)
     bec:	6993      	ldr	r3, [r2, #24]
     bee:	0b9b      	lsrs	r3, r3, #14
     bf0:	039b      	lsls	r3, r3, #14
     bf2:	6193      	str	r3, [r2, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     bf4:	6813      	ldr	r3, [r2, #0]
     bf6:	2202      	movs	r2, #2
     bf8:	33ff      	adds	r3, #255	; 0xff
     bfa:	721a      	strb	r2, [r3, #8]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
     bfc:	7998      	ldrb	r0, [r3, #6]
     bfe:	3a82      	subs	r2, #130	; 0x82
     c00:	4302      	orrs	r2, r0
     c02:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
     c04:	7a1a      	ldrb	r2, [r3, #8]
	while (!usbd.epBank1IsTransferComplete(0)) {}
     c06:	0792      	lsls	r2, r2, #30
     c08:	d5fc      	bpl.n	c04 <_ZN14USBDeviceClass10setAddressEm+0x1c>
	USB->DEVICE.DADD.bit.DADD = addr; // Address
     c0a:	247f      	movs	r4, #127	; 0x7f
     c0c:	4a07      	ldr	r2, [pc, #28]	; (c2c <_ZN14USBDeviceClass10setAddressEm+0x44>)
     c0e:	4021      	ands	r1, r4
     c10:	7a93      	ldrb	r3, [r2, #10]
     c12:	0008      	movs	r0, r1
     c14:	43a3      	bics	r3, r4
     c16:	0019      	movs	r1, r3
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
     c18:	2380      	movs	r3, #128	; 0x80
	USB->DEVICE.DADD.bit.DADD = addr; // Address
     c1a:	4301      	orrs	r1, r0
     c1c:	7291      	strb	r1, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
     c1e:	7a91      	ldrb	r1, [r2, #10]
     c20:	425b      	negs	r3, r3
     c22:	430b      	orrs	r3, r1
     c24:	7293      	strb	r3, [r2, #10]
}
     c26:	bd10      	pop	{r4, pc}
     c28:	20000608 	.word	0x20000608
     c2c:	41005000 	.word	0x41005000

00000c30 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
     c30:	b510      	push	{r4, lr}
	if (CDC_ACM_INTERFACE == i)
     c32:	790b      	ldrb	r3, [r1, #4]
{
     c34:	000c      	movs	r4, r1
	if (CDC_ACM_INTERFACE == i)
     c36:	2b00      	cmp	r3, #0
     c38:	d10c      	bne.n	c54 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x24>
		if (CDC_Setup(setup) == false) {
     c3a:	0008      	movs	r0, r1
     c3c:	f7ff fcc8 	bl	5d0 <_Z9CDC_SetupR8USBSetup>
     c40:	2800      	cmp	r0, #0
     c42:	d001      	beq.n	c48 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x18>
		return true;
     c44:	2001      	movs	r0, #1
}
     c46:	bd10      	pop	{r4, pc}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
     c48:	4a09      	ldr	r2, [pc, #36]	; (c70 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
     c4a:	6993      	ldr	r3, [r2, #24]
     c4c:	0b9b      	lsrs	r3, r3, #14
     c4e:	039b      	lsls	r3, r3, #14
     c50:	6193      	str	r3, [r2, #24]
     c52:	e7f7      	b.n	c44 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
	bool ret = PluggableUSB().setup(setup);
     c54:	f001 f92c 	bl	1eb0 <_Z12PluggableUSBv>
     c58:	0021      	movs	r1, r4
     c5a:	f001 f918 	bl	1e8e <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
     c5e:	2800      	cmp	r0, #0
     c60:	d1f0      	bne.n	c44 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
     c62:	4a03      	ldr	r2, [pc, #12]	; (c70 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
     c64:	6993      	ldr	r3, [r2, #24]
     c66:	0b9b      	lsrs	r3, r3, #14
     c68:	039b      	lsls	r3, r3, #14
     c6a:	6193      	str	r3, [r2, #24]
     c6c:	e7eb      	b.n	c46 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x16>
     c6e:	46c0      	nop			; (mov r8, r8)
     c70:	20000608 	.word	0x20000608

00000c74 <_ZN14USBDeviceClass6initEPEmm>:
{
     c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     c76:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
     c78:	2a83      	cmp	r2, #131	; 0x83
     c7a:	d119      	bne.n	cb0 <_ZN14USBDeviceClass6initEPEmm+0x3c>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     c7c:	b2cb      	uxtb	r3, r1
     c7e:	4c40      	ldr	r4, [pc, #256]	; (d80 <_ZN14USBDeviceClass6initEPEmm+0x10c>)
     c80:	015a      	lsls	r2, r3, #5
     c82:	18a2      	adds	r2, r4, r2
     c84:	6991      	ldr	r1, [r2, #24]
     c86:	483f      	ldr	r0, [pc, #252]	; (d84 <_ZN14USBDeviceClass6initEPEmm+0x110>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
     c88:	01ad      	lsls	r5, r5, #6
     c8a:	4008      	ands	r0, r1
     c8c:	21c0      	movs	r1, #192	; 0xc0
     c8e:	0589      	lsls	r1, r1, #22
     c90:	4301      	orrs	r1, r0
     c92:	6191      	str	r1, [r2, #24]
     c94:	493c      	ldr	r1, [pc, #240]	; (d88 <_ZN14USBDeviceClass6initEPEmm+0x114>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     c96:	6820      	ldr	r0, [r4, #0]
     c98:	194d      	adds	r5, r1, r5
     c9a:	2170      	movs	r1, #112	; 0x70
     c9c:	3308      	adds	r3, #8
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     c9e:	6155      	str	r5, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     ca0:	015b      	lsls	r3, r3, #5
     ca2:	5c1a      	ldrb	r2, [r3, r0]
     ca4:	438a      	bics	r2, r1
     ca6:	0011      	movs	r1, r2
     ca8:	2240      	movs	r2, #64	; 0x40
     caa:	430a      	orrs	r2, r1
     cac:	541a      	strb	r2, [r3, r0]
}
     cae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
     cb0:	2a02      	cmp	r2, #2
     cb2:	d13d      	bne.n	d30 <_ZN14USBDeviceClass6initEPEmm+0xbc>
		epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
     cb4:	2038      	movs	r0, #56	; 0x38
     cb6:	f000 fee9 	bl	1a8c <_Znwj>
		notify(false)
     cba:	4b34      	ldr	r3, [pc, #208]	; (d8c <_ZN14USBDeviceClass6initEPEmm+0x118>)
     cbc:	2780      	movs	r7, #128	; 0x80
     cbe:	6003      	str	r3, [r0, #0]
     cc0:	2300      	movs	r3, #0
     cc2:	4e2f      	ldr	r6, [pc, #188]	; (d80 <_ZN14USBDeviceClass6initEPEmm+0x10c>)
     cc4:	007f      	lsls	r7, r7, #1
     cc6:	1d42      	adds	r2, r0, #5
     cc8:	6203      	str	r3, [r0, #32]
     cca:	6103      	str	r3, [r0, #16]
     ccc:	6143      	str	r3, [r0, #20]
     cce:	61c3      	str	r3, [r0, #28]
     cd0:	6046      	str	r6, [r0, #4]
     cd2:	6085      	str	r5, [r0, #8]
     cd4:	60c7      	str	r7, [r0, #12]
     cd6:	77d3      	strb	r3, [r2, #31]
     cd8:	322f      	adds	r2, #47	; 0x2f
     cda:	62c3      	str	r3, [r0, #44]	; 0x2c
     cdc:	6303      	str	r3, [r0, #48]	; 0x30
     cde:	0004      	movs	r4, r0
     ce0:	7013      	strb	r3, [r2, #0]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
     ce2:	0038      	movs	r0, r7
		notify(false)
     ce4:	7053      	strb	r3, [r2, #1]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
     ce6:	f001 fa15 	bl	2114 <malloc>
     cea:	9001      	str	r0, [sp, #4]
     cec:	61a0      	str	r0, [r4, #24]
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
     cee:	0038      	movs	r0, r7
     cf0:	f001 fa10 	bl	2114 <malloc>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     cf4:	b2eb      	uxtb	r3, r5
     cf6:	015a      	lsls	r2, r3, #5
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
     cf8:	62a0      	str	r0, [r4, #40]	; 0x28
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     cfa:	18b2      	adds	r2, r6, r2
     cfc:	6891      	ldr	r1, [r2, #8]
     cfe:	4821      	ldr	r0, [pc, #132]	; (d84 <_ZN14USBDeviceClass6initEPEmm+0x110>)
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     d00:	3308      	adds	r3, #8
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     d02:	4008      	ands	r0, r1
     d04:	21c0      	movs	r1, #192	; 0xc0
     d06:	0589      	lsls	r1, r1, #22
     d08:	4301      	orrs	r1, r0
     d0a:	6091      	str	r1, [r2, #8]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
     d0c:	6830      	ldr	r0, [r6, #0]
     d0e:	2607      	movs	r6, #7
     d10:	015b      	lsls	r3, r3, #5
     d12:	5c19      	ldrb	r1, [r3, r0]
     d14:	00ad      	lsls	r5, r5, #2
     d16:	43b1      	bics	r1, r6
     d18:	000e      	movs	r6, r1
     d1a:	2103      	movs	r1, #3
     d1c:	4331      	orrs	r1, r6
     d1e:	5419      	strb	r1, [r3, r0]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     d20:	9b01      	ldr	r3, [sp, #4]
		release();
     d22:	0020      	movs	r0, r4
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     d24:	6053      	str	r3, [r2, #4]
		release();
     d26:	f7ff fd89 	bl	83c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
     d2a:	4b19      	ldr	r3, [pc, #100]	; (d90 <_ZN14USBDeviceClass6initEPEmm+0x11c>)
     d2c:	50ec      	str	r4, [r5, r3]
     d2e:	e7be      	b.n	cae <_ZN14USBDeviceClass6initEPEmm+0x3a>
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
     d30:	2a82      	cmp	r2, #130	; 0x82
     d32:	d11f      	bne.n	d74 <_ZN14USBDeviceClass6initEPEmm+0x100>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
     d34:	b2cb      	uxtb	r3, r1
     d36:	4c12      	ldr	r4, [pc, #72]	; (d80 <_ZN14USBDeviceClass6initEPEmm+0x10c>)
     d38:	015a      	lsls	r2, r3, #5
     d3a:	18a2      	adds	r2, r4, r2
     d3c:	6991      	ldr	r1, [r2, #24]
     d3e:	4811      	ldr	r0, [pc, #68]	; (d84 <_ZN14USBDeviceClass6initEPEmm+0x110>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
     d40:	01ad      	lsls	r5, r5, #6
     d42:	4008      	ands	r0, r1
     d44:	21c0      	movs	r1, #192	; 0xc0
     d46:	0589      	lsls	r1, r1, #22
     d48:	4301      	orrs	r1, r0
     d4a:	6191      	str	r1, [r2, #24]
     d4c:	490e      	ldr	r1, [pc, #56]	; (d88 <_ZN14USBDeviceClass6initEPEmm+0x114>)
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
     d4e:	3308      	adds	r3, #8
     d50:	194d      	adds	r5, r1, r5
     d52:	2180      	movs	r1, #128	; 0x80
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
     d54:	6155      	str	r5, [r2, #20]
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
     d56:	6822      	ldr	r2, [r4, #0]
     d58:	015b      	lsls	r3, r3, #5
     d5a:	18d0      	adds	r0, r2, r3
     d5c:	7904      	ldrb	r4, [r0, #4]
     d5e:	4249      	negs	r1, r1
     d60:	4321      	orrs	r1, r4
     d62:	7101      	strb	r1, [r0, #4]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
     d64:	2070      	movs	r0, #112	; 0x70
     d66:	5c99      	ldrb	r1, [r3, r2]
     d68:	4381      	bics	r1, r0
     d6a:	0008      	movs	r0, r1
     d6c:	2130      	movs	r1, #48	; 0x30
     d6e:	4301      	orrs	r1, r0
     d70:	5499      	strb	r1, [r3, r2]
     d72:	e79c      	b.n	cae <_ZN14USBDeviceClass6initEPEmm+0x3a>
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
     d74:	2a00      	cmp	r2, #0
     d76:	d19a      	bne.n	cae <_ZN14USBDeviceClass6initEPEmm+0x3a>
     d78:	0008      	movs	r0, r1
     d7a:	f7ff fc9b 	bl	6b4 <_ZN14USBDeviceClass6initEPEmm.part.5>
}
     d7e:	e796      	b.n	cae <_ZN14USBDeviceClass6initEPEmm+0x3a>
     d80:	20000608 	.word	0x20000608
     d84:	8fffffff 	.word	0x8fffffff
     d88:	2000017c 	.word	0x2000017c
     d8c:	000022a0 	.word	0x000022a0
     d90:	20000154 	.word	0x20000154

00000d94 <_ZN14USBDeviceClass13initEndpointsEv>:
void USBDeviceClass::initEndpoints() {
     d94:	b570      	push	{r4, r5, r6, lr}
     d96:	0005      	movs	r5, r0
     d98:	2401      	movs	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
     d9a:	4b06      	ldr	r3, [pc, #24]	; (db4 <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
     d9c:	00a2      	lsls	r2, r4, #2
     d9e:	58d2      	ldr	r2, [r2, r3]
     da0:	2a00      	cmp	r2, #0
     da2:	d005      	beq.n	db0 <_ZN14USBDeviceClass13initEndpointsEv+0x1c>
		initEP(i, EndPoints[i]);
     da4:	0021      	movs	r1, r4
     da6:	0028      	movs	r0, r5
     da8:	f7ff ff64 	bl	c74 <_ZN14USBDeviceClass6initEPEmm>
     dac:	3401      	adds	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
     dae:	e7f4      	b.n	d9a <_ZN14USBDeviceClass13initEndpointsEv+0x6>
}
     db0:	bd70      	pop	{r4, r5, r6, pc}
     db2:	46c0      	nop			; (mov r8, r8)
     db4:	20000058 	.word	0x20000058

00000db8 <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
     db8:	4b08      	ldr	r3, [pc, #32]	; (ddc <_ZN14USBDeviceClass9availableEm+0x24>)
     dba:	008a      	lsls	r2, r1, #2
     dbc:	58d0      	ldr	r0, [r2, r3]
{
     dbe:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
     dc0:	2800      	cmp	r0, #0
     dc2:	d003      	beq.n	dcc <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
     dc4:	6803      	ldr	r3, [r0, #0]
     dc6:	689b      	ldr	r3, [r3, #8]
     dc8:	4798      	blx	r3
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
     dca:	bd10      	pop	{r4, pc}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     dcc:	b2c9      	uxtb	r1, r1
     dce:	4b04      	ldr	r3, [pc, #16]	; (de0 <_ZN14USBDeviceClass9availableEm+0x28>)
     dd0:	0149      	lsls	r1, r1, #5
     dd2:	1859      	adds	r1, r3, r1
     dd4:	6888      	ldr	r0, [r1, #8]
     dd6:	0480      	lsls	r0, r0, #18
     dd8:	0c80      	lsrs	r0, r0, #18
		return usbd.epBank0ByteCount(ep);
     dda:	e7f6      	b.n	dca <_ZN14USBDeviceClass9availableEm+0x12>
     ddc:	20000154 	.word	0x20000154
     de0:	20000608 	.word	0x20000608

00000de4 <_ZN14USBDeviceClass5flushEm>:
{
     de4:	b510      	push	{r4, lr}
     de6:	000c      	movs	r4, r1
	if (available(ep)) {
     de8:	f7ff ffe6 	bl	db8 <_ZN14USBDeviceClass9availableEm>
     dec:	2800      	cmp	r0, #0
     dee:	d00c      	beq.n	e0a <_ZN14USBDeviceClass5flushEm+0x26>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
     df0:	4b06      	ldr	r3, [pc, #24]	; (e0c <_ZN14USBDeviceClass5flushEm+0x28>)
     df2:	b2e4      	uxtb	r4, r4
     df4:	681b      	ldr	r3, [r3, #0]
     df6:	3408      	adds	r4, #8
     df8:	0164      	lsls	r4, r4, #5
     dfa:	191c      	adds	r4, r3, r4
     dfc:	2380      	movs	r3, #128	; 0x80
     dfe:	7962      	ldrb	r2, [r4, #5]
     e00:	425b      	negs	r3, r3
     e02:	4313      	orrs	r3, r2
     e04:	7163      	strb	r3, [r4, #5]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
     e06:	2302      	movs	r3, #2
     e08:	71e3      	strb	r3, [r4, #7]
}
     e0a:	bd10      	pop	{r4, pc}
     e0c:	20000608 	.word	0x20000608

00000e10 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:
		return c;
	}
}

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
     e10:	b570      	push	{r4, r5, r6, lr}
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
     e12:	4b13      	ldr	r3, [pc, #76]	; (e60 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x50>)
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
     e14:	b2cc      	uxtb	r4, r1
     e16:	4a13      	ldr	r2, [pc, #76]	; (e64 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
     e18:	0160      	lsls	r0, r4, #5
     e1a:	0189      	lsls	r1, r1, #6
     e1c:	1859      	adds	r1, r3, r1
     e1e:	1813      	adds	r3, r2, r0
     e20:	6059      	str	r1, [r3, #4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     e22:	6899      	ldr	r1, [r3, #8]
     e24:	4d10      	ldr	r5, [pc, #64]	; (e68 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     e26:	3408      	adds	r4, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     e28:	400d      	ands	r5, r1
     e2a:	2180      	movs	r1, #128	; 0x80
     e2c:	0289      	lsls	r1, r1, #10
     e2e:	4329      	orrs	r1, r5
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     e30:	2540      	movs	r5, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
     e32:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     e34:	6899      	ldr	r1, [r3, #8]
     e36:	0b89      	lsrs	r1, r1, #14
     e38:	0389      	lsls	r1, r1, #14
     e3a:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     e3c:	6811      	ldr	r1, [r2, #0]
     e3e:	0163      	lsls	r3, r4, #5
     e40:	18cb      	adds	r3, r1, r3
     e42:	791e      	ldrb	r6, [r3, #4]
     e44:	4335      	orrs	r5, r6
     e46:	711d      	strb	r5, [r3, #4]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
     e48:	799d      	ldrb	r5, [r3, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
     e4a:	066d      	lsls	r5, r5, #25
     e4c:	d5fc      	bpl.n	e48 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
     e4e:	0164      	lsls	r4, r4, #5
     e50:	1909      	adds	r1, r1, r4
     e52:	79cb      	ldrb	r3, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
     e54:	07db      	lsls	r3, r3, #31
     e56:	d5fc      	bpl.n	e52 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     e58:	1812      	adds	r2, r2, r0
     e5a:	6890      	ldr	r0, [r2, #8]
	return usbd.epBank0ByteCount(ep);
     e5c:	b2c0      	uxtb	r0, r0
}
     e5e:	bd70      	pop	{r4, r5, r6, pc}
     e60:	2000033c 	.word	0x2000033c
     e64:	20000608 	.word	0x20000608
     e68:	f0003fff 	.word	0xf0003fff

00000e6c <_ZN14USBDeviceClass11recvControlEPvm>:
{
     e6c:	b570      	push	{r4, r5, r6, lr}
     e6e:	0014      	movs	r4, r2
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     e70:	2240      	movs	r2, #64	; 0x40
     e72:	4b0b      	ldr	r3, [pc, #44]	; (ea0 <_ZN14USBDeviceClass11recvControlEPvm+0x34>)
     e74:	000d      	movs	r5, r1
     e76:	681b      	ldr	r3, [r3, #0]
     e78:	33ff      	adds	r3, #255	; 0xff
     e7a:	7959      	ldrb	r1, [r3, #5]
     e7c:	430a      	orrs	r2, r1
     e7e:	715a      	strb	r2, [r3, #5]
	uint32_t read = armRecvCtrlOUT(0);
     e80:	2100      	movs	r1, #0
     e82:	f7ff ffc5 	bl	e10 <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
     e86:	42a0      	cmp	r0, r4
     e88:	d900      	bls.n	e8c <_ZN14USBDeviceClass11recvControlEPvm+0x20>
     e8a:	0020      	movs	r0, r4
	for (uint32_t i=0; i<len; i++) {
     e8c:	2300      	movs	r3, #0
		data[i] = buffer[i];
     e8e:	4905      	ldr	r1, [pc, #20]	; (ea4 <_ZN14USBDeviceClass11recvControlEPvm+0x38>)
	for (uint32_t i=0; i<len; i++) {
     e90:	42a3      	cmp	r3, r4
     e92:	d003      	beq.n	e9c <_ZN14USBDeviceClass11recvControlEPvm+0x30>
		data[i] = buffer[i];
     e94:	5c5a      	ldrb	r2, [r3, r1]
     e96:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i=0; i<len; i++) {
     e98:	3301      	adds	r3, #1
     e9a:	e7f9      	b.n	e90 <_ZN14USBDeviceClass11recvControlEPvm+0x24>
}
     e9c:	bd70      	pop	{r4, r5, r6, pc}
     e9e:	46c0      	nop			; (mov r8, r8)
     ea0:	20000608 	.word	0x20000608
     ea4:	2000033c 	.word	0x2000033c

00000ea8 <_ZN14USBDeviceClass7armRecvEm>:

uint8_t USBDeviceClass::armRecv(uint32_t ep)
{
     ea8:	b510      	push	{r4, lr}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     eaa:	b2c9      	uxtb	r1, r1
     eac:	480b      	ldr	r0, [pc, #44]	; (edc <_ZN14USBDeviceClass7armRecvEm+0x34>)
     eae:	0149      	lsls	r1, r1, #5
     eb0:	1842      	adds	r2, r0, r1
     eb2:	6893      	ldr	r3, [r2, #8]
     eb4:	049b      	lsls	r3, r3, #18
     eb6:	0c9b      	lsrs	r3, r3, #18
	uint16_t count = usbd.epBank0ByteCount(ep);
	if (count >= 64) {
     eb8:	2b3f      	cmp	r3, #63	; 0x3f
     eba:	dd0b      	ble.n	ed4 <_ZN14USBDeviceClass7armRecvEm+0x2c>
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     ebc:	6894      	ldr	r4, [r2, #8]
		usbd.epBank0SetByteCount(ep, count - 64);
     ebe:	3b40      	subs	r3, #64	; 0x40
     ec0:	049b      	lsls	r3, r3, #18
     ec2:	0ba4      	lsrs	r4, r4, #14
     ec4:	0c9b      	lsrs	r3, r3, #18
     ec6:	03a4      	lsls	r4, r4, #14
     ec8:	4323      	orrs	r3, r4
     eca:	6093      	str	r3, [r2, #8]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
     ecc:	1841      	adds	r1, r0, r1
     ece:	6888      	ldr	r0, [r1, #8]
	} else {
		usbd.epBank0SetByteCount(ep, 0);
	}
	return usbd.epBank0ByteCount(ep);
     ed0:	b2c0      	uxtb	r0, r0
}
     ed2:	bd10      	pop	{r4, pc}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
     ed4:	6893      	ldr	r3, [r2, #8]
     ed6:	0b9b      	lsrs	r3, r3, #14
     ed8:	039b      	lsls	r3, r3, #14
     eda:	e7f6      	b.n	eca <_ZN14USBDeviceClass7armRecvEm+0x22>
     edc:	20000608 	.word	0x20000608

00000ee0 <_ZN14USBDeviceClass4recvEmPvm>:
{
     ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ee2:	001c      	movs	r4, r3
	if (!_usbConfiguration)
     ee4:	4b30      	ldr	r3, [pc, #192]	; (fa8 <_ZN14USBDeviceClass4recvEmPvm+0xc8>)
{
     ee6:	b085      	sub	sp, #20
	if (!_usbConfiguration)
     ee8:	681b      	ldr	r3, [r3, #0]
{
     eea:	0006      	movs	r6, r0
     eec:	000d      	movs	r5, r1
     eee:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
     ef0:	2b00      	cmp	r3, #0
     ef2:	d055      	beq.n	fa0 <_ZN14USBDeviceClass4recvEmPvm+0xc0>
	if (rxLEDPulse == 0)
     ef4:	4f2d      	ldr	r7, [pc, #180]	; (fac <_ZN14USBDeviceClass4recvEmPvm+0xcc>)
     ef6:	7839      	ldrb	r1, [r7, #0]
     ef8:	b2c9      	uxtb	r1, r1
     efa:	2900      	cmp	r1, #0
     efc:	d102      	bne.n	f04 <_ZN14USBDeviceClass4recvEmPvm+0x24>
		digitalWrite(PIN_LED_RXL, LOW);
     efe:	2019      	movs	r0, #25
     f00:	f000 fcbc 	bl	187c <digitalWrite>
	rxLEDPulse = TX_RX_LED_PULSE_MS;
     f04:	2364      	movs	r3, #100	; 0x64
     f06:	703b      	strb	r3, [r7, #0]
	if (epHandlers[ep]) {
     f08:	4b29      	ldr	r3, [pc, #164]	; (fb0 <_ZN14USBDeviceClass4recvEmPvm+0xd0>)
     f0a:	00aa      	lsls	r2, r5, #2
     f0c:	58d0      	ldr	r0, [r2, r3]
     f0e:	2800      	cmp	r0, #0
     f10:	d008      	beq.n	f24 <_ZN14USBDeviceClass4recvEmPvm+0x44>
		return epHandlers[ep]->recv(_data, len);
     f12:	6803      	ldr	r3, [r0, #0]
     f14:	0022      	movs	r2, r4
     f16:	685b      	ldr	r3, [r3, #4]
     f18:	9901      	ldr	r1, [sp, #4]
     f1a:	4798      	blx	r3
     f1c:	0004      	movs	r4, r0
}
     f1e:	0020      	movs	r0, r4
     f20:	b005      	add	sp, #20
     f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (available(ep) < len)
     f24:	0029      	movs	r1, r5
     f26:	0030      	movs	r0, r6
     f28:	f7ff ff46 	bl	db8 <_ZN14USBDeviceClass9availableEm>
     f2c:	4284      	cmp	r4, r0
     f2e:	d904      	bls.n	f3a <_ZN14USBDeviceClass4recvEmPvm+0x5a>
		len = available(ep);
     f30:	0029      	movs	r1, r5
     f32:	0030      	movs	r0, r6
     f34:	f7ff ff40 	bl	db8 <_ZN14USBDeviceClass9availableEm>
     f38:	0004      	movs	r4, r0
	armRecv(ep);
     f3a:	0029      	movs	r1, r5
     f3c:	0030      	movs	r0, r6
     f3e:	f7ff ffb3 	bl	ea8 <_ZN14USBDeviceClass7armRecvEm>
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
     f42:	2101      	movs	r1, #1
     f44:	b2eb      	uxtb	r3, r5
     f46:	4f1b      	ldr	r7, [pc, #108]	; (fb4 <_ZN14USBDeviceClass4recvEmPvm+0xd4>)
     f48:	9303      	str	r3, [sp, #12]
     f4a:	015b      	lsls	r3, r3, #5
     f4c:	9302      	str	r3, [sp, #8]
     f4e:	9a02      	ldr	r2, [sp, #8]
     f50:	683b      	ldr	r3, [r7, #0]
	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
     f52:	9801      	ldr	r0, [sp, #4]
     f54:	189b      	adds	r3, r3, r2
     f56:	33ff      	adds	r3, #255	; 0xff
     f58:	7a5a      	ldrb	r2, [r3, #9]
     f5a:	430a      	orrs	r2, r1
     f5c:	4916      	ldr	r1, [pc, #88]	; (fb8 <_ZN14USBDeviceClass4recvEmPvm+0xd8>)
     f5e:	725a      	strb	r2, [r3, #9]
     f60:	01ab      	lsls	r3, r5, #6
     f62:	18c9      	adds	r1, r1, r3
     f64:	0022      	movs	r2, r4
     f66:	f001 f8df 	bl	2128 <memcpy>
	if (len && !available(ep)) {
     f6a:	2c00      	cmp	r4, #0
     f6c:	d0d7      	beq.n	f1e <_ZN14USBDeviceClass4recvEmPvm+0x3e>
     f6e:	0029      	movs	r1, r5
     f70:	0030      	movs	r0, r6
     f72:	f7ff ff21 	bl	db8 <_ZN14USBDeviceClass9availableEm>
     f76:	2800      	cmp	r0, #0
     f78:	d1d1      	bne.n	f1e <_ZN14USBDeviceClass4recvEmPvm+0x3e>
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
     f7a:	2140      	movs	r1, #64	; 0x40
     f7c:	9b03      	ldr	r3, [sp, #12]
     f7e:	683a      	ldr	r2, [r7, #0]
     f80:	3308      	adds	r3, #8
     f82:	015b      	lsls	r3, r3, #5
     f84:	18d3      	adds	r3, r2, r3
     f86:	7918      	ldrb	r0, [r3, #4]
     f88:	4301      	orrs	r1, r0
     f8a:	7119      	strb	r1, [r3, #4]
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
     f8c:	2101      	movs	r1, #1
     f8e:	71d9      	strb	r1, [r3, #7]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
     f90:	2101      	movs	r1, #1
     f92:	9b02      	ldr	r3, [sp, #8]
     f94:	18d3      	adds	r3, r2, r3
     f96:	33ff      	adds	r3, #255	; 0xff
     f98:	7a9a      	ldrb	r2, [r3, #10]
     f9a:	430a      	orrs	r2, r1
     f9c:	729a      	strb	r2, [r3, #10]
     f9e:	e7be      	b.n	f1e <_ZN14USBDeviceClass4recvEmPvm+0x3e>
		return -1;
     fa0:	2401      	movs	r4, #1
     fa2:	4264      	negs	r4, r4
     fa4:	e7bb      	b.n	f1e <_ZN14USBDeviceClass4recvEmPvm+0x3e>
     fa6:	46c0      	nop			; (mov r8, r8)
     fa8:	20000600 	.word	0x20000600
     fac:	20000170 	.word	0x20000170
     fb0:	20000154 	.word	0x20000154
     fb4:	20000608 	.word	0x20000608
     fb8:	2000033c 	.word	0x2000033c

00000fbc <_ZN14USBDeviceClass4recvEm>:
{
     fbc:	b513      	push	{r0, r1, r4, lr}
	if (recv(ep, &c, 1) != 1) {
     fbe:	466b      	mov	r3, sp
     fc0:	1ddc      	adds	r4, r3, #7
     fc2:	0022      	movs	r2, r4
     fc4:	2301      	movs	r3, #1
     fc6:	f7ff ff8b 	bl	ee0 <_ZN14USBDeviceClass4recvEmPvm>
     fca:	2801      	cmp	r0, #1
     fcc:	d101      	bne.n	fd2 <_ZN14USBDeviceClass4recvEm+0x16>
		return c;
     fce:	7820      	ldrb	r0, [r4, #0]
}
     fd0:	bd16      	pop	{r1, r2, r4, pc}
		return -1;
     fd2:	2001      	movs	r0, #1
     fd4:	4240      	negs	r0, r0
     fd6:	e7fb      	b.n	fd0 <_ZN14USBDeviceClass4recvEm+0x14>

00000fd8 <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
     fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
     fda:	001e      	movs	r6, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
     fdc:	4b3a      	ldr	r3, [pc, #232]	; (10c8 <_ZN14USBDeviceClass4sendEmPKvm+0xf0>)
{
     fde:	b085      	sub	sp, #20
	if (!_usbConfiguration)
     fe0:	681b      	ldr	r3, [r3, #0]
{
     fe2:	000f      	movs	r7, r1
     fe4:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
     fe6:	2b00      	cmp	r3, #0
     fe8:	d03f      	beq.n	106a <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;
	if (len > 16384)
     fea:	2380      	movs	r3, #128	; 0x80
     fec:	01db      	lsls	r3, r3, #7
     fee:	429e      	cmp	r6, r3
     ff0:	d83b      	bhi.n	106a <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
     ff2:	4c36      	ldr	r4, [pc, #216]	; (10cc <_ZN14USBDeviceClass4sendEmPKvm+0xf4>)
     ff4:	7821      	ldrb	r1, [r4, #0]
     ff6:	b2c9      	uxtb	r1, r1
     ff8:	2900      	cmp	r1, #0
     ffa:	d102      	bne.n	1002 <_ZN14USBDeviceClass4sendEmPKvm+0x2a>
		digitalWrite(PIN_LED_TXL, LOW);
     ffc:	201a      	movs	r0, #26
     ffe:	f000 fc3d 	bl	187c <digitalWrite>

	txLEDPulse = TX_RX_LED_PULSE_MS;
    1002:	2364      	movs	r3, #100	; 0x64
	uint32_t written = 0;
    1004:	2500      	movs	r5, #0
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    1006:	4a32      	ldr	r2, [pc, #200]	; (10d0 <_ZN14USBDeviceClass4sendEmPKvm+0xf8>)
	txLEDPulse = TX_RX_LED_PULSE_MS;
    1008:	7023      	strb	r3, [r4, #0]
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    100a:	01bb      	lsls	r3, r7, #6
    100c:	18d3      	adds	r3, r2, r3
    100e:	9302      	str	r3, [sp, #8]
	while (len != 0)
    1010:	2e00      	cmp	r6, #0
    1012:	d02c      	beq.n	106e <_ZN14USBDeviceClass4sendEmPKvm+0x96>
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    1014:	4b2f      	ldr	r3, [pc, #188]	; (10d4 <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
    1016:	681b      	ldr	r3, [r3, #0]
    1018:	9303      	str	r3, [sp, #12]
    101a:	23ff      	movs	r3, #255	; 0xff
    101c:	403b      	ands	r3, r7
    101e:	001c      	movs	r4, r3
    1020:	9300      	str	r3, [sp, #0]
    1022:	3408      	adds	r4, #8
    1024:	9b03      	ldr	r3, [sp, #12]
    1026:	0164      	lsls	r4, r4, #5
    1028:	191c      	adds	r4, r3, r4
    102a:	79a3      	ldrb	r3, [r4, #6]
    102c:	09db      	lsrs	r3, r3, #7
		if (usbd.epBank1IsReady(ep)) {
    102e:	d021      	beq.n	1074 <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    1030:	4b29      	ldr	r3, [pc, #164]	; (10d8 <_ZN14USBDeviceClass4sendEmPKvm+0x100>)
    1032:	492a      	ldr	r1, [pc, #168]	; (10dc <_ZN14USBDeviceClass4sendEmPKvm+0x104>)
    1034:	6818      	ldr	r0, [r3, #0]
    1036:	f000 ffbd 	bl	1fb4 <__udivsi3>
    103a:	4b29      	ldr	r3, [pc, #164]	; (10e0 <_ZN14USBDeviceClass4sendEmPKvm+0x108>)
    103c:	2117      	movs	r1, #23
    103e:	4358      	muls	r0, r3
    1040:	f000 ffb8 	bl	1fb4 <__udivsi3>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    1044:	4b27      	ldr	r3, [pc, #156]	; (10e4 <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    1046:	79e2      	ldrb	r2, [r4, #7]
			while (!usbd.epBank1IsTransferComplete(ep)) {
    1048:	0792      	lsls	r2, r2, #30
    104a:	d413      	bmi.n	1074 <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    104c:	5dda      	ldrb	r2, [r3, r7]
    104e:	2a00      	cmp	r2, #0
    1050:	d101      	bne.n	1056 <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
    1052:	3801      	subs	r0, #1
    1054:	d2f7      	bcs.n	1046 <_ZN14USBDeviceClass4sendEmPKvm+0x6e>
					LastTransmitTimedOut[ep] = 1;
    1056:	2201      	movs	r2, #1
    1058:	55da      	strb	r2, [r3, r7]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    105a:	9b00      	ldr	r3, [sp, #0]
    105c:	015a      	lsls	r2, r3, #5
    105e:	4b1d      	ldr	r3, [pc, #116]	; (10d4 <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
    1060:	189b      	adds	r3, r3, r2
    1062:	699a      	ldr	r2, [r3, #24]
    1064:	0b92      	lsrs	r2, r2, #14
    1066:	0392      	lsls	r2, r2, #14
    1068:	619a      	str	r2, [r3, #24]
					return -1;
    106a:	2501      	movs	r5, #1
    106c:	426d      	negs	r5, r5
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
    106e:	0028      	movs	r0, r5
    1070:	b005      	add	sp, #20
    1072:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LastTransmitTimedOut[ep] = 0;
    1074:	2200      	movs	r2, #0
    1076:	4b1b      	ldr	r3, [pc, #108]	; (10e4 <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
    1078:	0034      	movs	r4, r6
    107a:	55da      	strb	r2, [r3, r7]
    107c:	2e3f      	cmp	r6, #63	; 0x3f
    107e:	d900      	bls.n	1082 <_ZN14USBDeviceClass4sendEmPKvm+0xaa>
    1080:	243f      	movs	r4, #63	; 0x3f
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    1082:	0022      	movs	r2, r4
    1084:	9901      	ldr	r1, [sp, #4]
    1086:	9802      	ldr	r0, [sp, #8]
    1088:	f001 f84e 	bl	2128 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    108c:	9b00      	ldr	r3, [sp, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    108e:	04a1      	lsls	r1, r4, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1090:	015a      	lsls	r2, r3, #5
    1092:	4b10      	ldr	r3, [pc, #64]	; (10d4 <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1094:	0c89      	lsrs	r1, r1, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    1096:	189b      	adds	r3, r3, r2
    1098:	9a02      	ldr	r2, [sp, #8]
		written += length;
    109a:	192d      	adds	r5, r5, r4
    109c:	615a      	str	r2, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    109e:	699a      	ldr	r2, [r3, #24]
		len -= length;
    10a0:	1b36      	subs	r6, r6, r4
    10a2:	0b92      	lsrs	r2, r2, #14
    10a4:	0392      	lsls	r2, r2, #14
    10a6:	430a      	orrs	r2, r1
    10a8:	619a      	str	r2, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    10aa:	9b00      	ldr	r3, [sp, #0]
    10ac:	9a03      	ldr	r2, [sp, #12]
    10ae:	3308      	adds	r3, #8
    10b0:	015b      	lsls	r3, r3, #5
    10b2:	18d3      	adds	r3, r2, r3
    10b4:	2202      	movs	r2, #2
    10b6:	71da      	strb	r2, [r3, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    10b8:	7959      	ldrb	r1, [r3, #5]
    10ba:	3a82      	subs	r2, #130	; 0x82
    10bc:	430a      	orrs	r2, r1
    10be:	715a      	strb	r2, [r3, #5]
		data = (char *)data + length;
    10c0:	9b01      	ldr	r3, [sp, #4]
    10c2:	191b      	adds	r3, r3, r4
    10c4:	9301      	str	r3, [sp, #4]
	while (len != 0)
    10c6:	e7a3      	b.n	1010 <_ZN14USBDeviceClass4sendEmPKvm+0x38>
    10c8:	20000600 	.word	0x20000600
    10cc:	20000171 	.word	0x20000171
    10d0:	2000017c 	.word	0x2000017c
    10d4:	20000608 	.word	0x20000608
    10d8:	20000080 	.word	0x20000080
    10dc:	000f4240 	.word	0x000f4240
    10e0:	00011170 	.word	0x00011170
    10e4:	20000173 	.word	0x20000173

000010e8 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    10e8:	b570      	push	{r4, r5, r6, lr}
    10ea:	000d      	movs	r5, r1
    10ec:	001c      	movs	r4, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    10ee:	4e0d      	ldr	r6, [pc, #52]	; (1124 <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
    10f0:	01ab      	lsls	r3, r5, #6
    10f2:	18f6      	adds	r6, r6, r3
{
    10f4:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    10f6:	0030      	movs	r0, r6
    10f8:	0022      	movs	r2, r4
    10fa:	f001 f815 	bl	2128 <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    10fe:	b2ed      	uxtb	r5, r5
    1100:	4909      	ldr	r1, [pc, #36]	; (1128 <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
    1102:	016d      	lsls	r5, r5, #5
    1104:	194d      	adds	r5, r1, r5
    1106:	616e      	str	r6, [r5, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    1108:	69ab      	ldr	r3, [r5, #24]
    110a:	4a08      	ldr	r2, [pc, #32]	; (112c <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
    110c:	0020      	movs	r0, r4
    110e:	4013      	ands	r3, r2
    1110:	61ab      	str	r3, [r5, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    1112:	69ab      	ldr	r3, [r5, #24]
    1114:	04a2      	lsls	r2, r4, #18
    1116:	0b9b      	lsrs	r3, r3, #14
    1118:	0c92      	lsrs	r2, r2, #18
    111a:	039b      	lsls	r3, r3, #14
    111c:	4313      	orrs	r3, r2
    111e:	61ab      	str	r3, [r5, #24]
    1120:	bd70      	pop	{r4, r5, r6, pc}
    1122:	46c0      	nop			; (mov r8, r8)
    1124:	2000017c 	.word	0x2000017c
    1128:	20000608 	.word	0x20000608
    112c:	f0003fff 	.word	0xf0003fff

00001130 <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    1130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    1132:	4b10      	ldr	r3, [pc, #64]	; (1174 <_ZN14USBDeviceClass11sendControlEPKvm+0x44>)
{
    1134:	9001      	str	r0, [sp, #4]
	if (_dry_run == true)
    1136:	781b      	ldrb	r3, [r3, #0]
{
    1138:	000f      	movs	r7, r1
    113a:	0015      	movs	r5, r2
	if (_dry_run == true)
    113c:	2b00      	cmp	r3, #0
    113e:	d10c      	bne.n	115a <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		return length;

	if (_pack_message == true) {
    1140:	4b0d      	ldr	r3, [pc, #52]	; (1178 <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)
    1142:	0016      	movs	r6, r2
    1144:	781c      	ldrb	r4, [r3, #0]
    1146:	2c00      	cmp	r4, #0
    1148:	d009      	beq.n	115e <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
		memcpy(&_pack_buffer[_pack_size], data, len);
    114a:	4e0c      	ldr	r6, [pc, #48]	; (117c <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
    114c:	480c      	ldr	r0, [pc, #48]	; (1180 <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
    114e:	8834      	ldrh	r4, [r6, #0]
    1150:	1900      	adds	r0, r0, r4
		_pack_size += len;
    1152:	1964      	adds	r4, r4, r5
		memcpy(&_pack_buffer[_pack_size], data, len);
    1154:	f000 ffe8 	bl	2128 <memcpy>
		_pack_size += len;
    1158:	8034      	strh	r4, [r6, #0]
		pos += sent;
		len -= sent;
 	}

	return length;
}
    115a:	0028      	movs	r0, r5
    115c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 	while (len > 0)
    115e:	2e00      	cmp	r6, #0
    1160:	d0fb      	beq.n	115a <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		sent = armSend(EP0, data + pos, len);
    1162:	193a      	adds	r2, r7, r4
    1164:	0033      	movs	r3, r6
    1166:	2100      	movs	r1, #0
    1168:	9801      	ldr	r0, [sp, #4]
    116a:	f7ff ffbd 	bl	10e8 <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
    116e:	1824      	adds	r4, r4, r0
		len -= sent;
    1170:	1a36      	subs	r6, r6, r0
 	while (len > 0)
    1172:	e7f4      	b.n	115e <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
    1174:	200004fc 	.word	0x200004fc
    1178:	200005fd 	.word	0x200005fd
    117c:	200005fe 	.word	0x200005fe
    1180:	200004fd 	.word	0x200004fd

00001184 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>:
{
    1184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return false;
    1186:	2000      	movs	r0, #0
{
    1188:	af00      	add	r7, sp, #0
    118a:	000e      	movs	r6, r1
    118c:	0015      	movs	r5, r2
	if (maxlen < 2)
    118e:	2a01      	cmp	r2, #1
    1190:	dd26      	ble.n	11e0 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x5c>
	uint8_t buffer[maxlen];
    1192:	1dd3      	adds	r3, r2, #7
    1194:	466a      	mov	r2, sp
    1196:	08db      	lsrs	r3, r3, #3
    1198:	00db      	lsls	r3, r3, #3
    119a:	1ad3      	subs	r3, r2, r3
    119c:	469d      	mov	sp, r3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    119e:	0008      	movs	r0, r1
    11a0:	f001 f844 	bl	222c <strlen>
	uint8_t buffer[maxlen];
    11a4:	466c      	mov	r4, sp
	buffer[1] = 0x03;
    11a6:	2303      	movs	r3, #3
		buffer[i] = 0;
    11a8:	2100      	movs	r1, #0
	buffer[0] = strlen((const char*)string) * 2 + 2;
    11aa:	3001      	adds	r0, #1
    11ac:	0040      	lsls	r0, r0, #1
    11ae:	7020      	strb	r0, [r4, #0]
	buffer[1] = 0x03;
    11b0:	7063      	strb	r3, [r4, #1]
    11b2:	1e5a      	subs	r2, r3, #1
    11b4:	b2d2      	uxtb	r2, r2
	for (i = 2; i < maxlen && *string; i++) {
    11b6:	4295      	cmp	r5, r2
    11b8:	dd0b      	ble.n	11d2 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
    11ba:	7830      	ldrb	r0, [r6, #0]
    11bc:	2800      	cmp	r0, #0
    11be:	d008      	beq.n	11d2 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
		buffer[i++] = *string++;
    11c0:	3601      	adds	r6, #1
    11c2:	54a0      	strb	r0, [r4, r2]
		if (i == maxlen) break;
    11c4:	429d      	cmp	r5, r3
    11c6:	d003      	beq.n	11d0 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4c>
		buffer[i] = 0;
    11c8:	54e1      	strb	r1, [r4, r3]
    11ca:	3302      	adds	r3, #2
    11cc:	b2db      	uxtb	r3, r3
	for (i = 2; i < maxlen && *string; i++) {
    11ce:	e7f0      	b.n	11b2 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x2e>
    11d0:	002a      	movs	r2, r5
	return USBDevice.sendControl(buffer, i);
    11d2:	0021      	movs	r1, r4
    11d4:	4803      	ldr	r0, [pc, #12]	; (11e4 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x60>)
    11d6:	f7ff ffab 	bl	1130 <_ZN14USBDeviceClass11sendControlEPKvm>
    11da:	1e43      	subs	r3, r0, #1
    11dc:	4198      	sbcs	r0, r3
    11de:	b2c0      	uxtb	r0, r0
}
    11e0:	46bd      	mov	sp, r7
    11e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11e4:	20000150 	.word	0x20000150

000011e8 <_ZN14USBDeviceClass17sendConfigurationEm>:
{
    11e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
    11ea:	2700      	movs	r7, #0
	_dry_run = true;
    11ec:	2601      	movs	r6, #1
{
    11ee:	b087      	sub	sp, #28
	_dry_run = true;
    11f0:	4b1e      	ldr	r3, [pc, #120]	; (126c <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
{
    11f2:	9100      	str	r1, [sp, #0]
	uint8_t interfaces = SendInterfaces(&total);
    11f4:	a902      	add	r1, sp, #8
	_dry_run = true;
    11f6:	701e      	strb	r6, [r3, #0]
{
    11f8:	0005      	movs	r5, r0
	uint32_t total = 0;
    11fa:	9702      	str	r7, [sp, #8]
	uint8_t interfaces = SendInterfaces(&total);
    11fc:	f7ff fc2a 	bl	a54 <_ZN14USBDeviceClass14SendInterfacesEPm>
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    1200:	ac03      	add	r4, sp, #12
	uint8_t interfaces = SendInterfaces(&total);
    1202:	9001      	str	r0, [sp, #4]
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    1204:	2209      	movs	r2, #9
    1206:	0039      	movs	r1, r7
    1208:	0020      	movs	r0, r4
    120a:	f000 ff96 	bl	213a <memset>
    120e:	2309      	movs	r3, #9
    1210:	7023      	strb	r3, [r4, #0]
    1212:	2302      	movs	r3, #2
    1214:	7063      	strb	r3, [r4, #1]
    1216:	339e      	adds	r3, #158	; 0x9e
    1218:	71e3      	strb	r3, [r4, #7]
    121a:	335a      	adds	r3, #90	; 0x5a
    121c:	7223      	strb	r3, [r4, #8]
    121e:	9b02      	ldr	r3, [sp, #8]
    1220:	7166      	strb	r6, [r4, #5]
    1222:	3309      	adds	r3, #9
    1224:	8063      	strh	r3, [r4, #2]
    1226:	466b      	mov	r3, sp
    1228:	791b      	ldrb	r3, [r3, #4]
    122a:	7123      	strb	r3, [r4, #4]
	_dry_run = false;
    122c:	4b0f      	ldr	r3, [pc, #60]	; (126c <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    122e:	701f      	strb	r7, [r3, #0]
	if (maxlen == sizeof(ConfigDescriptor)) {
    1230:	9b00      	ldr	r3, [sp, #0]
    1232:	2b09      	cmp	r3, #9
    1234:	d107      	bne.n	1246 <_ZN14USBDeviceClass17sendConfigurationEm+0x5e>
		sendControl(&config, sizeof(ConfigDescriptor));
    1236:	001a      	movs	r2, r3
    1238:	0021      	movs	r1, r4
		sendControl(_pack_buffer, _pack_size);
    123a:	0028      	movs	r0, r5
    123c:	f7ff ff78 	bl	1130 <_ZN14USBDeviceClass11sendControlEPKvm>
}
    1240:	2001      	movs	r0, #1
    1242:	b007      	add	sp, #28
    1244:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_pack_message = true;
    1246:	4b0a      	ldr	r3, [pc, #40]	; (1270 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	sendControl(&config, sizeof(ConfigDescriptor));
    1248:	2209      	movs	r2, #9
		_pack_message = true;
    124a:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    124c:	4e09      	ldr	r6, [pc, #36]	; (1274 <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	sendControl(&config, sizeof(ConfigDescriptor));
    124e:	0021      	movs	r1, r4
    1250:	0028      	movs	r0, r5
	total = 0;
    1252:	9702      	str	r7, [sp, #8]
		_pack_size = 0;
    1254:	8037      	strh	r7, [r6, #0]
	sendControl(&config, sizeof(ConfigDescriptor));
    1256:	f7ff ff6b 	bl	1130 <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    125a:	a902      	add	r1, sp, #8
    125c:	0028      	movs	r0, r5
    125e:	f7ff fbf9 	bl	a54 <_ZN14USBDeviceClass14SendInterfacesEPm>
		_pack_message = false;
    1262:	4b03      	ldr	r3, [pc, #12]	; (1270 <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    1264:	8832      	ldrh	r2, [r6, #0]
		_pack_message = false;
    1266:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    1268:	4903      	ldr	r1, [pc, #12]	; (1278 <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
    126a:	e7e6      	b.n	123a <_ZN14USBDeviceClass17sendConfigurationEm+0x52>
    126c:	200004fc 	.word	0x200004fc
    1270:	200005fd 	.word	0x200005fd
    1274:	200005fe 	.word	0x200005fe
    1278:	200004fd 	.word	0x200004fd

0000127c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:
{
    127c:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    127e:	78ce      	ldrb	r6, [r1, #3]
{
    1280:	b08a      	sub	sp, #40	; 0x28
    1282:	0005      	movs	r5, r0
    1284:	000c      	movs	r4, r1
	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    1286:	2e02      	cmp	r6, #2
    1288:	d108      	bne.n	129c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x20>
		return USBDevice.sendConfiguration(setup.wLength);
    128a:	88c9      	ldrh	r1, [r1, #6]
    128c:	4821      	ldr	r0, [pc, #132]	; (1314 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x98>)
    128e:	f7ff ffab 	bl	11e8 <_ZN14USBDeviceClass17sendConfigurationEm>
    1292:	1e43      	subs	r3, r0, #1
    1294:	4198      	sbcs	r0, r3
    1296:	b2c0      	uxtb	r0, r0
}
    1298:	b00a      	add	sp, #40	; 0x28
    129a:	bd70      	pop	{r4, r5, r6, pc}
	ret = PluggableUSB().getDescriptor(setup);
    129c:	f000 fe08 	bl	1eb0 <_Z12PluggableUSBv>
    12a0:	0021      	movs	r1, r4
    12a2:	f000 fdd5 	bl	1e50 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    12a6:	2800      	cmp	r0, #0
    12a8:	d003      	beq.n	12b2 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x36>
		return (ret > 0 ? true : false);
    12aa:	17c3      	asrs	r3, r0, #31
    12ac:	1a18      	subs	r0, r3, r0
    12ae:	0fc0      	lsrs	r0, r0, #31
    12b0:	e7f2      	b.n	1298 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    12b2:	2e01      	cmp	r6, #1
    12b4:	d10b      	bne.n	12ce <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x52>
		if (setup.wLength == 8)
    12b6:	88e2      	ldrh	r2, [r4, #6]
    12b8:	4917      	ldr	r1, [pc, #92]	; (1318 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x9c>)
		if (*desc_addr > setup.wLength) {
    12ba:	2a11      	cmp	r2, #17
    12bc:	dc10      	bgt.n	12e0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
			desc_length = setup.wLength;
    12be:	b2d2      	uxtb	r2, r2
	if (desc_length == 0) {
    12c0:	2a00      	cmp	r2, #0
    12c2:	d00d      	beq.n	12e0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
	sendControl(desc_addr, desc_length);
    12c4:	0028      	movs	r0, r5
    12c6:	f7ff ff33 	bl	1130 <_ZN14USBDeviceClass11sendControlEPKvm>
	return true;
    12ca:	2001      	movs	r0, #1
    12cc:	e7e4      	b.n	1298 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    12ce:	2e03      	cmp	r6, #3
    12d0:	d1e2      	bne.n	1298 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		if (setup.wValueL == 0) {
    12d2:	78a3      	ldrb	r3, [r4, #2]
    12d4:	2b00      	cmp	r3, #0
    12d6:	d105      	bne.n	12e4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x68>
		if (*desc_addr > setup.wLength) {
    12d8:	88e2      	ldrh	r2, [r4, #6]
    12da:	4910      	ldr	r1, [pc, #64]	; (131c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xa0>)
    12dc:	2a03      	cmp	r2, #3
    12de:	ddee      	ble.n	12be <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x42>
		desc_length = *desc_addr;
    12e0:	780a      	ldrb	r2, [r1, #0]
    12e2:	e7ef      	b.n	12c4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x48>
		else if (setup.wValueL == IPRODUCT) {
    12e4:	2b02      	cmp	r3, #2
    12e6:	d105      	bne.n	12f4 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x78>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    12e8:	79a2      	ldrb	r2, [r4, #6]
    12ea:	490d      	ldr	r1, [pc, #52]	; (1320 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xa4>)
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    12ec:	0028      	movs	r0, r5
    12ee:	f7ff ff49 	bl	1184 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    12f2:	e7d1      	b.n	1298 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		else if (setup.wValueL == IMANUFACTURER) {
    12f4:	2b01      	cmp	r3, #1
    12f6:	d102      	bne.n	12fe <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x82>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    12f8:	79a2      	ldrb	r2, [r4, #6]
    12fa:	490a      	ldr	r1, [pc, #40]	; (1324 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xa8>)
    12fc:	e7f6      	b.n	12ec <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
		else if (setup.wValueL == ISERIAL) {
    12fe:	2b03      	cmp	r3, #3
    1300:	d1ca      	bne.n	1298 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
			PluggableUSB().getShortName(name);
    1302:	f000 fdd5 	bl	1eb0 <_Z12PluggableUSBv>
    1306:	a901      	add	r1, sp, #4
    1308:	f000 fdb2 	bl	1e70 <_ZN13PluggableUSB_12getShortNameEPc>
			return sendStringDescriptor((uint8_t*)name, setup.wLength);
    130c:	79a2      	ldrb	r2, [r4, #6]
    130e:	a901      	add	r1, sp, #4
    1310:	e7ec      	b.n	12ec <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
    1312:	46c0      	nop			; (mov r8, r8)
    1314:	20000150 	.word	0x20000150
    1318:	000022c5 	.word	0x000022c5
    131c:	000022b8 	.word	0x000022b8
    1320:	000022ac 	.word	0x000022ac
    1324:	000022bc 	.word	0x000022bc

00001328 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    1328:	b573      	push	{r0, r1, r4, r5, r6, lr}
    132a:	0006      	movs	r6, r0
	switch (setup.bRequest) {
    132c:	7848      	ldrb	r0, [r1, #1]
{
    132e:	000d      	movs	r5, r1
	switch (setup.bRequest) {
    1330:	280b      	cmp	r0, #11
    1332:	d811      	bhi.n	1358 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
    1334:	f000 fe34 	bl	1fa0 <__gnu_thumb1_case_uqi>
    1338:	2e101d06 	.word	0x2e101d06
    133c:	70484310 	.word	0x70484310
    1340:	6c694f4c 	.word	0x6c694f4c
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    1344:	7809      	ldrb	r1, [r1, #0]
    1346:	aa01      	add	r2, sp, #4
    1348:	2900      	cmp	r1, #0
    134a:	d107      	bne.n	135c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x34>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    134c:	2302      	movs	r3, #2
			uint8_t buff[] = { 0, 0 };
    134e:	7011      	strb	r1, [r2, #0]
    1350:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    1352:	0030      	movs	r0, r6
    1354:	f7ff fec8 	bl	10e8 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    1358:	2001      	movs	r0, #1
		return true;

	default:
		return true;
	}
}
    135a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
			uint8_t buff[] = { 0, 0 };
    135c:	2300      	movs	r3, #0
    135e:	7013      	strb	r3, [r2, #0]
    1360:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    1362:	4b2e      	ldr	r3, [pc, #184]	; (141c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
			if (isRemoteWakeUpEnabled == 1)
    1364:	781b      	ldrb	r3, [r3, #0]
    1366:	2b01      	cmp	r3, #1
    1368:	d100      	bne.n	136c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x44>
				buff[0] = 1;
    136a:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    136c:	2302      	movs	r3, #2
		armSend(0, (void*)&_usbSetInterface, 1);
    136e:	2100      	movs	r1, #0
    1370:	e7ef      	b.n	1352 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    1372:	788a      	ldrb	r2, [r1, #2]
    1374:	2300      	movs	r3, #0
    1376:	2a01      	cmp	r2, #1
    1378:	d104      	bne.n	1384 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x5c>
			uint8_t buff[] = { 0, 0 };
    137a:	aa01      	add	r2, sp, #4
    137c:	7013      	strb	r3, [r2, #0]
    137e:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    1380:	4b27      	ldr	r3, [pc, #156]	; (1420 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
    1382:	e7ef      	b.n	1364 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x3c>
			isEndpointHalt = 0;
    1384:	4a25      	ldr	r2, [pc, #148]	; (141c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    1386:	7013      	strb	r3, [r2, #0]
    1388:	4a26      	ldr	r2, [pc, #152]	; (1424 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    138a:	6993      	ldr	r3, [r2, #24]
    138c:	0b9b      	lsrs	r3, r3, #14
    138e:	039b      	lsls	r3, r3, #14
    1390:	6193      	str	r3, [r2, #24]
    1392:	e7e1      	b.n	1358 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    1394:	788c      	ldrb	r4, [r1, #2]
    1396:	2c01      	cmp	r4, #1
    1398:	d106      	bne.n	13a8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
			uint8_t buff[] = { 0 };
    139a:	2100      	movs	r1, #0
			isRemoteWakeUpEnabled = 1;
    139c:	4b20      	ldr	r3, [pc, #128]	; (1420 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
			uint8_t buff[] = { 0 };
    139e:	aa01      	add	r2, sp, #4
			isRemoteWakeUpEnabled = 1;
    13a0:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    13a2:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    13a4:	0023      	movs	r3, r4
    13a6:	e7d4      	b.n	1352 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 0) // ENDPOINTHALT
    13a8:	2c00      	cmp	r4, #0
    13aa:	d108      	bne.n	13be <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x96>
			isEndpointHalt = 1;
    13ac:	2001      	movs	r0, #1
    13ae:	4b1b      	ldr	r3, [pc, #108]	; (141c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    13b0:	4a1c      	ldr	r2, [pc, #112]	; (1424 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    13b2:	7018      	strb	r0, [r3, #0]
    13b4:	6993      	ldr	r3, [r2, #24]
    13b6:	0b9b      	lsrs	r3, r3, #14
    13b8:	039b      	lsls	r3, r3, #14
    13ba:	6193      	str	r3, [r2, #24]
			return true;
    13bc:	e7cd      	b.n	135a <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		setAddress(setup.wValueL);
    13be:	78a9      	ldrb	r1, [r5, #2]
    13c0:	0030      	movs	r0, r6
    13c2:	f7ff fc11 	bl	be8 <_ZN14USBDeviceClass10setAddressEm>
    13c6:	e7c7      	b.n	1358 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		return sendDescriptor(setup);
    13c8:	0030      	movs	r0, r6
    13ca:	f7ff ff57 	bl	127c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    13ce:	e7c4      	b.n	135a <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		armSend(0, (void*)&_usbConfiguration, 1);
    13d0:	2301      	movs	r3, #1
    13d2:	4a15      	ldr	r2, [pc, #84]	; (1428 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    13d4:	e7cb      	b.n	136e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    13d6:	780b      	ldrb	r3, [r1, #0]
			return false;
    13d8:	2000      	movs	r0, #0
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    13da:	06db      	lsls	r3, r3, #27
    13dc:	d1bd      	bne.n	135a <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			initEndpoints();
    13de:	0030      	movs	r0, r6
    13e0:	f7ff fcd8 	bl	d94 <_ZN14USBDeviceClass13initEndpointsEv>
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    13e4:	202a      	movs	r0, #42	; 0x2a
    13e6:	2102      	movs	r1, #2
			_usbConfiguration = setup.wValueL;
    13e8:	78aa      	ldrb	r2, [r5, #2]
    13ea:	4b0f      	ldr	r3, [pc, #60]	; (1428 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    13ec:	30ff      	adds	r0, #255	; 0xff
    13ee:	601a      	str	r2, [r3, #0]
    13f0:	4a0c      	ldr	r2, [pc, #48]	; (1424 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    13f2:	6813      	ldr	r3, [r2, #0]
    13f4:	5c1c      	ldrb	r4, [r3, r0]
    13f6:	4321      	orrs	r1, r4
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    13f8:	244a      	movs	r4, #74	; 0x4a
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    13fa:	5419      	strb	r1, [r3, r0]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    13fc:	34ff      	adds	r4, #255	; 0xff
    13fe:	5d19      	ldrb	r1, [r3, r4]
    1400:	3829      	subs	r0, #41	; 0x29
    1402:	38ff      	subs	r0, #255	; 0xff
    1404:	4301      	orrs	r1, r0
    1406:	5519      	strb	r1, [r3, r4]
    1408:	e7d4      	b.n	13b4 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x8c>
		armSend(0, (void*)&_usbSetInterface, 1);
    140a:	2301      	movs	r3, #1
    140c:	4a07      	ldr	r2, [pc, #28]	; (142c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    140e:	e7ae      	b.n	136e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		_usbSetInterface = setup.wValueL;
    1410:	788a      	ldrb	r2, [r1, #2]
    1412:	4b06      	ldr	r3, [pc, #24]	; (142c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    1414:	601a      	str	r2, [r3, #0]
    1416:	e7b7      	b.n	1388 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		return false;
    1418:	2000      	movs	r0, #0
    141a:	e79e      	b.n	135a <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
    141c:	20000172 	.word	0x20000172
    1420:	2000017a 	.word	0x2000017a
    1424:	20000608 	.word	0x20000608
    1428:	20000600 	.word	0x20000600
    142c:	20000604 	.word	0x20000604

00001430 <_ZN14USBDeviceClass10ISRHandlerEv>:

void USBDeviceClass::ISRHandler()
{

	if (_pack_message == true) {
    1430:	4b4b      	ldr	r3, [pc, #300]	; (1560 <_ZN14USBDeviceClass10ISRHandlerEv+0x130>)
{
    1432:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (_pack_message == true) {
    1434:	781c      	ldrb	r4, [r3, #0]
{
    1436:	0007      	movs	r7, r0
	if (_pack_message == true) {
    1438:	2c00      	cmp	r4, #0
    143a:	d17c      	bne.n	1536 <_ZN14USBDeviceClass10ISRHandlerEv+0x106>
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    143c:	4e49      	ldr	r6, [pc, #292]	; (1564 <_ZN14USBDeviceClass10ISRHandlerEv+0x134>)
    143e:	6833      	ldr	r3, [r6, #0]
    1440:	8b9b      	ldrh	r3, [r3, #28]
		return;
	}
	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    1442:	071b      	lsls	r3, r3, #28
    1444:	d50d      	bpl.n	1462 <_ZN14USBDeviceClass10ISRHandlerEv+0x32>
    1446:	0020      	movs	r0, r4
    1448:	f7ff f934 	bl	6b4 <_ZN14USBDeviceClass6initEPEmm.part.5>
	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    144c:	6832      	ldr	r2, [r6, #0]
    144e:	2310      	movs	r3, #16
    1450:	0011      	movs	r1, r2
    1452:	31ff      	adds	r1, #255	; 0xff
    1454:	7a88      	ldrb	r0, [r1, #10]
    1456:	4303      	orrs	r3, r0
    1458:	728b      	strb	r3, [r1, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    145a:	4b43      	ldr	r3, [pc, #268]	; (1568 <_ZN14USBDeviceClass10ISRHandlerEv+0x138>)
    145c:	601c      	str	r4, [r3, #0]
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    145e:	2308      	movs	r3, #8
    1460:	8393      	strh	r3, [r2, #28]
	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    1462:	6833      	ldr	r3, [r6, #0]
    1464:	8b9a      	ldrh	r2, [r3, #28]

		usbd.ackEndOfResetInterrupt();
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    1466:	0752      	lsls	r2, r2, #29
    1468:	d51f      	bpl.n	14aa <_ZN14USBDeviceClass10ISRHandlerEv+0x7a>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    146a:	2204      	movs	r2, #4
    146c:	839a      	strh	r2, [r3, #28]
	{
		usbd.ackStartOfFrameInterrupt();

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    146e:	4a3f      	ldr	r2, [pc, #252]	; (156c <_ZN14USBDeviceClass10ISRHandlerEv+0x13c>)
    1470:	7813      	ldrb	r3, [r2, #0]
    1472:	2b00      	cmp	r3, #0
    1474:	d00a      	beq.n	148c <_ZN14USBDeviceClass10ISRHandlerEv+0x5c>
			txLEDPulse--;
    1476:	7813      	ldrb	r3, [r2, #0]
    1478:	3b01      	subs	r3, #1
    147a:	b2db      	uxtb	r3, r3
    147c:	7013      	strb	r3, [r2, #0]
			if (txLEDPulse == 0)
    147e:	7813      	ldrb	r3, [r2, #0]
    1480:	2b00      	cmp	r3, #0
    1482:	d103      	bne.n	148c <_ZN14USBDeviceClass10ISRHandlerEv+0x5c>
				digitalWrite(PIN_LED_TXL, HIGH);
    1484:	2101      	movs	r1, #1
    1486:	201a      	movs	r0, #26
    1488:	f000 f9f8 	bl	187c <digitalWrite>
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    148c:	4a38      	ldr	r2, [pc, #224]	; (1570 <_ZN14USBDeviceClass10ISRHandlerEv+0x140>)
    148e:	7813      	ldrb	r3, [r2, #0]
    1490:	2b00      	cmp	r3, #0
    1492:	d00a      	beq.n	14aa <_ZN14USBDeviceClass10ISRHandlerEv+0x7a>
			rxLEDPulse--;
    1494:	7813      	ldrb	r3, [r2, #0]
    1496:	3b01      	subs	r3, #1
    1498:	b2db      	uxtb	r3, r3
    149a:	7013      	strb	r3, [r2, #0]
			if (rxLEDPulse == 0)
    149c:	7813      	ldrb	r3, [r2, #0]
    149e:	2b00      	cmp	r3, #0
    14a0:	d103      	bne.n	14aa <_ZN14USBDeviceClass10ISRHandlerEv+0x7a>
				digitalWrite(PIN_LED_RXL, HIGH);
    14a2:	2101      	movs	r1, #1
    14a4:	2019      	movs	r0, #25
    14a6:	f000 f9e9 	bl	187c <digitalWrite>
	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    14aa:	6833      	ldr	r3, [r6, #0]
    14ac:	33ff      	adds	r3, #255	; 0xff
    14ae:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    14b0:	06d2      	lsls	r2, r2, #27
    14b2:	d520      	bpl.n	14f6 <_ZN14USBDeviceClass10ISRHandlerEv+0xc6>
	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    14b4:	2210      	movs	r2, #16
    14b6:	721a      	strb	r2, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    14b8:	7959      	ldrb	r1, [r3, #5]
    14ba:	3230      	adds	r2, #48	; 0x30
    14bc:	430a      	orrs	r2, r1
    14be:	715a      	strb	r2, [r3, #5]
		/* Clear the Bank 0 ready flag on Control OUT */
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    14c0:	2360      	movs	r3, #96	; 0x60
    14c2:	492c      	ldr	r1, [pc, #176]	; (1574 <_ZN14USBDeviceClass10ISRHandlerEv+0x144>)
			// Standard Requests
			ok = handleStandardSetup(*setup);
    14c4:	0038      	movs	r0, r7
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    14c6:	780a      	ldrb	r2, [r1, #0]
    14c8:	421a      	tst	r2, r3
    14ca:	d135      	bne.n	1538 <_ZN14USBDeviceClass10ISRHandlerEv+0x108>
			ok = handleStandardSetup(*setup);
    14cc:	f7ff ff2c 	bl	1328 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(*setup);
		}

		if (ok) {
    14d0:	2800      	cmp	r0, #0
    14d2:	d034      	beq.n	153e <_ZN14USBDeviceClass10ISRHandlerEv+0x10e>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    14d4:	2280      	movs	r2, #128	; 0x80
    14d6:	6833      	ldr	r3, [r6, #0]
    14d8:	4252      	negs	r2, r2
    14da:	33ff      	adds	r3, #255	; 0xff
    14dc:	7999      	ldrb	r1, [r3, #6]
    14de:	430a      	orrs	r2, r1
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    14e0:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    14e2:	6833      	ldr	r3, [r6, #0]
    14e4:	33ff      	adds	r3, #255	; 0xff
    14e6:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    14e8:	0652      	lsls	r2, r2, #25
    14ea:	d504      	bpl.n	14f6 <_ZN14USBDeviceClass10ISRHandlerEv+0xc6>
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    14ec:	2240      	movs	r2, #64	; 0x40
    14ee:	721a      	strb	r2, [r3, #8]
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    14f0:	7a59      	ldrb	r1, [r3, #9]
    14f2:	430a      	orrs	r2, r1
    14f4:	725a      	strb	r2, [r3, #9]
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }
    14f6:	6833      	ldr	r3, [r6, #0]
		}

	} // end Received Setup handler

	uint8_t i=0;
	uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
    14f8:	2500      	movs	r5, #0
    14fa:	8c1c      	ldrh	r4, [r3, #32]
    14fc:	2301      	movs	r3, #1
    14fe:	439c      	bics	r4, r3
    1500:	b2e4      	uxtb	r4, r4
	while (ept_int != 0)
	{
		// Check if endpoint has a pending interrupt
		if ((ept_int & (1 << i)) != 0)
    1502:	9301      	str	r3, [sp, #4]
    1504:	b2e9      	uxtb	r1, r5
	while (ept_int != 0)
    1506:	2c00      	cmp	r4, #0
    1508:	d015      	beq.n	1536 <_ZN14USBDeviceClass10ISRHandlerEv+0x106>
		if ((ept_int & (1 << i)) != 0)
    150a:	0023      	movs	r3, r4
    150c:	412b      	asrs	r3, r5
    150e:	9a01      	ldr	r2, [sp, #4]
    1510:	4213      	tst	r3, r2
    1512:	d00d      	beq.n	1530 <_ZN14USBDeviceClass10ISRHandlerEv+0x100>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    1514:	002b      	movs	r3, r5
    1516:	6832      	ldr	r2, [r6, #0]
    1518:	3308      	adds	r3, #8
    151a:	015b      	lsls	r3, r3, #5
    151c:	18d3      	adds	r3, r2, r3
    151e:	79da      	ldrb	r2, [r3, #7]
		{
			// Endpoint Transfer Complete (0/1) Interrupt
			if (usbd.epBank0IsTransferComplete(i) ||
    1520:	07d2      	lsls	r2, r2, #31
    1522:	d413      	bmi.n	154c <_ZN14USBDeviceClass10ISRHandlerEv+0x11c>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    1524:	79db      	ldrb	r3, [r3, #7]
    1526:	079b      	lsls	r3, r3, #30
    1528:	d410      	bmi.n	154c <_ZN14USBDeviceClass10ISRHandlerEv+0x11c>
					epHandlers[i]->handleEndpoint();
				} else {
					handleEndpoint(i);
				}
			}
			ept_int &= ~(1 << i);
    152a:	9b01      	ldr	r3, [sp, #4]
    152c:	40ab      	lsls	r3, r5
    152e:	439c      	bics	r4, r3
    1530:	3501      	adds	r5, #1
		}
		i++;
		if (i > USB_EPT_NUM)
    1532:	2d09      	cmp	r5, #9
    1534:	d1e6      	bne.n	1504 <_ZN14USBDeviceClass10ISRHandlerEv+0xd4>
			break;  // fire exit
	}
}
    1536:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			ok = handleClassInterfaceSetup(*setup);
    1538:	f7ff fb7a 	bl	c30 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    153c:	e7c8      	b.n	14d0 <_ZN14USBDeviceClass10ISRHandlerEv+0xa0>
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    153e:	2220      	movs	r2, #32
    1540:	4b0d      	ldr	r3, [pc, #52]	; (1578 <_ZN14USBDeviceClass10ISRHandlerEv+0x148>)
    1542:	e7cd      	b.n	14e0 <_ZN14USBDeviceClass10ISRHandlerEv+0xb0>
					epHandlers[i]->handleEndpoint();
    1544:	6803      	ldr	r3, [r0, #0]
    1546:	681b      	ldr	r3, [r3, #0]
    1548:	4798      	blx	r3
    154a:	e7ee      	b.n	152a <_ZN14USBDeviceClass10ISRHandlerEv+0xfa>
				if (epHandlers[i]) {
    154c:	4b0b      	ldr	r3, [pc, #44]	; (157c <_ZN14USBDeviceClass10ISRHandlerEv+0x14c>)
    154e:	00aa      	lsls	r2, r5, #2
    1550:	58d0      	ldr	r0, [r2, r3]
    1552:	2800      	cmp	r0, #0
    1554:	d1f6      	bne.n	1544 <_ZN14USBDeviceClass10ISRHandlerEv+0x114>
					handleEndpoint(i);
    1556:	0038      	movs	r0, r7
    1558:	f7ff fa92 	bl	a80 <_ZN14USBDeviceClass14handleEndpointEh>
    155c:	e7e5      	b.n	152a <_ZN14USBDeviceClass10ISRHandlerEv+0xfa>
    155e:	46c0      	nop			; (mov r8, r8)
    1560:	200005fd 	.word	0x200005fd
    1564:	20000608 	.word	0x20000608
    1568:	20000600 	.word	0x20000600
    156c:	20000171 	.word	0x20000171
    1570:	20000170 	.word	0x20000170
    1574:	2000033c 	.word	0x2000033c
    1578:	410050ff 	.word	0x410050ff
    157c:	20000154 	.word	0x20000154

00001580 <UDD_Handler>:
extern "C" void UDD_Handler(void) {
    1580:	b510      	push	{r4, lr}
	USBDevice.ISRHandler();
    1582:	4802      	ldr	r0, [pc, #8]	; (158c <UDD_Handler+0xc>)
    1584:	f7ff ff54 	bl	1430 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    1588:	bd10      	pop	{r4, pc}
    158a:	46c0      	nop			; (mov r8, r8)
    158c:	20000150 	.word	0x20000150

00001590 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    1590:	4a01      	ldr	r2, [pc, #4]	; (1598 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0x8>)
    1592:	4b02      	ldr	r3, [pc, #8]	; (159c <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0xc>)
    1594:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    1596:	4770      	bx	lr
    1598:	41005000 	.word	0x41005000
    159c:	20000608 	.word	0x20000608

000015a0 <init>:
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
  // Set Systick to 1ms interval, common to all Cortex-M variants
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    15a0:	21fa      	movs	r1, #250	; 0xfa
    15a2:	4b31      	ldr	r3, [pc, #196]	; (1668 <init+0xc8>)
{
    15a4:	b510      	push	{r4, lr}
  if ( SysTick_Config( SystemCoreClock / 1000 ) )
    15a6:	6818      	ldr	r0, [r3, #0]
    15a8:	0089      	lsls	r1, r1, #2
    15aa:	f000 fd03 	bl	1fb4 <__udivsi3>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
    15ae:	4b2f      	ldr	r3, [pc, #188]	; (166c <init+0xcc>)
    15b0:	3801      	subs	r0, #1
    15b2:	4298      	cmp	r0, r3
    15b4:	d856      	bhi.n	1664 <init+0xc4>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    15b6:	492e      	ldr	r1, [pc, #184]	; (1670 <init+0xd0>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    15b8:	4a2e      	ldr	r2, [pc, #184]	; (1674 <init+0xd4>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    15ba:	6048      	str	r0, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    15bc:	20c0      	movs	r0, #192	; 0xc0
    15be:	6a13      	ldr	r3, [r2, #32]
    15c0:	0600      	lsls	r0, r0, #24
    15c2:	021b      	lsls	r3, r3, #8
    15c4:	0a1b      	lsrs	r3, r3, #8
    15c6:	4303      	orrs	r3, r0
    15c8:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    15ca:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    15cc:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    15ce:	608c      	str	r4, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    15d0:	600b      	str	r3, [r1, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    15d2:	2180      	movs	r1, #128	; 0x80
    15d4:	6a13      	ldr	r3, [r2, #32]
    15d6:	0609      	lsls	r1, r1, #24
    15d8:	021b      	lsls	r3, r3, #8
    15da:	0a1b      	lsrs	r3, r3, #8
    15dc:	430b      	orrs	r3, r1
    15de:	6213      	str	r3, [r2, #32]
//
//  // Clock EIC for I/O interrupts
//  PM->APBAMASK.reg |= PM_APBAMASK_EIC ;

  // Clock SERCOM for Serial
  PM->APBCMASK.reg |= PM_APBCMASK_SERCOM0 | PM_APBCMASK_SERCOM1 | PM_APBCMASK_SERCOM2 | PM_APBCMASK_SERCOM3 | PM_APBCMASK_SERCOM4 | PM_APBCMASK_SERCOM5 ;
    15e0:	22fc      	movs	r2, #252	; 0xfc
    15e2:	4b25      	ldr	r3, [pc, #148]	; (1678 <init+0xd8>)
    15e4:	6a19      	ldr	r1, [r3, #32]
    15e6:	430a      	orrs	r2, r1
    15e8:	621a      	str	r2, [r3, #32]

  // Clock TC/TCC for Pulse and Analog
  PM->APBCMASK.reg |= PM_APBCMASK_TCC0 | PM_APBCMASK_TCC1 | PM_APBCMASK_TCC2 | PM_APBCMASK_TC3 | PM_APBCMASK_TC4 | PM_APBCMASK_TC5 ;
    15ea:	22fc      	movs	r2, #252	; 0xfc
    15ec:	6a19      	ldr	r1, [r3, #32]
    15ee:	0192      	lsls	r2, r2, #6
    15f0:	430a      	orrs	r2, r1
    15f2:	621a      	str	r2, [r3, #32]

  // ATSAMR, for example, doesn't have a DAC
#ifdef PM_APBCMASK_DAC
  // Clock ADC/DAC for Analog
  PM->APBCMASK.reg |= PM_APBCMASK_ADC | PM_APBCMASK_DAC ;
    15f4:	22a0      	movs	r2, #160	; 0xa0
    15f6:	6a19      	ldr	r1, [r3, #32]
    15f8:	02d2      	lsls	r2, r2, #11
    15fa:	430a      	orrs	r2, r1
    15fc:	621a      	str	r2, [r3, #32]
#endif

  // Setup all pins (digital and analog) in INPUT mode (default is nothing)
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
    pinMode( ul, INPUT ) ;
    15fe:	0020      	movs	r0, r4
    1600:	2100      	movs	r1, #0
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    1602:	3401      	adds	r4, #1
    pinMode( ul, INPUT ) ;
    1604:	f000 f8ee 	bl	17e4 <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    1608:	2c14      	cmp	r4, #20
    160a:	d1f8      	bne.n	15fe <init+0x5e>
  }

  // Initialize Analog Controller
  // Setting clock
  while(GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    160c:	4b1b      	ldr	r3, [pc, #108]	; (167c <init+0xdc>)
    160e:	001c      	movs	r4, r3
    1610:	785a      	ldrb	r2, [r3, #1]
    1612:	b252      	sxtb	r2, r2
    1614:	2a00      	cmp	r2, #0
    1616:	dbfb      	blt.n	1610 <init+0x70>

  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_ADC ) | // Generic Clock ADC
    1618:	4a19      	ldr	r2, [pc, #100]	; (1680 <init+0xe0>)
    161a:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    161c:	4b19      	ldr	r3, [pc, #100]	; (1684 <init+0xe4>)
    161e:	001a      	movs	r2, r3
    1620:	7e59      	ldrb	r1, [r3, #25]
    1622:	09c9      	lsrs	r1, r1, #7
    1624:	2901      	cmp	r1, #1
    1626:	d0fb      	beq.n	1620 <init+0x80>

  ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |    // Divide Clock by 512.
    1628:	21e4      	movs	r1, #228	; 0xe4
    162a:	00c9      	lsls	r1, r1, #3
    162c:	8099      	strh	r1, [r3, #4]
                   ADC_CTRLB_RESSEL_10BIT;         // 10 bits resolution as default

  ADC->SAMPCTRL.reg = 0x3f;                        // Set max Sampling Time Length
    162e:	213f      	movs	r1, #63	; 0x3f
    1630:	70d9      	strb	r1, [r3, #3]

  while( ADC->STATUS.bit.SYNCBUSY == 1 );          // Wait for synchronization of registers between the clock domains
    1632:	7e53      	ldrb	r3, [r2, #25]
    1634:	09db      	lsrs	r3, r3, #7
    1636:	2b01      	cmp	r3, #1
    1638:	d0fb      	beq.n	1632 <init+0x92>

  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    163a:	23c0      	movs	r3, #192	; 0xc0

  // Averaging (see datasheet table in AVGCTRL register description)
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    163c:	2000      	movs	r0, #0
  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    163e:	015b      	lsls	r3, r3, #5
    1640:	6113      	str	r3, [r2, #16]
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    1642:	7090      	strb	r0, [r2, #2]
                     ADC_AVGCTRL_ADJRES(0x0ul);   // Adjusting result by 0

  analogReference( AR_DEFAULT ) ; // Analog Reference is AREF pin (3.3v)
    1644:	f000 f82e 	bl	16a4 <analogReference>

  // Initialize DAC
  // Setting clock
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
    1648:	7863      	ldrb	r3, [r4, #1]
    164a:	b25b      	sxtb	r3, r3
    164c:	2b00      	cmp	r3, #0
    164e:	dbfb      	blt.n	1648 <init+0xa8>
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    1650:	4b0d      	ldr	r3, [pc, #52]	; (1688 <init+0xe8>)
                      GCLK_CLKCTRL_GEN_GCLK0     | // Generic Clock Generator 0 is source
                      GCLK_CLKCTRL_CLKEN ;

 // ATSAMR, for example, doesn't have a DAC
#ifdef DAC
  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    1652:	4a0e      	ldr	r2, [pc, #56]	; (168c <init+0xec>)
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( GCM_DAC ) | // Generic Clock ADC
    1654:	8063      	strh	r3, [r4, #2]
  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
    1656:	79d3      	ldrb	r3, [r2, #7]
    1658:	09db      	lsrs	r3, r3, #7
    165a:	2b01      	cmp	r3, #1
    165c:	d0fb      	beq.n	1656 <init+0xb6>
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
    165e:	2341      	movs	r3, #65	; 0x41
    1660:	7053      	strb	r3, [r2, #1]
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
#endif

}
    1662:	bd10      	pop	{r4, pc}
    1664:	e7fe      	b.n	1664 <init+0xc4>
    1666:	46c0      	nop			; (mov r8, r8)
    1668:	20000080 	.word	0x20000080
    166c:	00ffffff 	.word	0x00ffffff
    1670:	e000e010 	.word	0xe000e010
    1674:	e000ed00 	.word	0xe000ed00
    1678:	40000400 	.word	0x40000400
    167c:	40000c00 	.word	0x40000c00
    1680:	0000401e 	.word	0x0000401e
    1684:	42004000 	.word	0x42004000
    1688:	00004021 	.word	0x00004021
    168c:	42004800 	.word	0x42004800

00001690 <mapResolution>:
  _writeResolution = res;
}

static inline uint32_t mapResolution(uint32_t value, uint32_t from, uint32_t to)
{
  if (from == to) {
    1690:	4291      	cmp	r1, r2
    1692:	d002      	beq.n	169a <mapResolution+0xa>
    return value;
  }
  if (from > to) {
    1694:	d902      	bls.n	169c <mapResolution+0xc>
    return value >> (from-to);
    1696:	1a8a      	subs	r2, r1, r2
    1698:	40d0      	lsrs	r0, r2
  }
  return value << (to-from);
}
    169a:	4770      	bx	lr
  return value << (to-from);
    169c:	1a52      	subs	r2, r2, r1
    169e:	4090      	lsls	r0, r2
    16a0:	e7fb      	b.n	169a <mapResolution+0xa>
	...

000016a4 <analogReference>:
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    16a4:	4a16      	ldr	r2, [pc, #88]	; (1700 <analogReference+0x5c>)
 * External Reference should be between 1v and VDDANA-0.6v=2.7v
 *
 * Warning : On Arduino Zero board the input/output voltage for SAMD21G18 is 3.3 volts maximum
 */
void analogReference(eAnalogReference mode)
{
    16a6:	b500      	push	{lr}
    16a8:	0013      	movs	r3, r2
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    16aa:	7e51      	ldrb	r1, [r2, #25]
    16ac:	09c9      	lsrs	r1, r1, #7
    16ae:	2901      	cmp	r1, #1
    16b0:	d0fb      	beq.n	16aa <analogReference+0x6>
  syncADC();
  switch (mode)
    16b2:	3801      	subs	r0, #1
    16b4:	2804      	cmp	r0, #4
    16b6:	d816      	bhi.n	16e6 <analogReference+0x42>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INT1V_Val;   // 1.0V voltage reference
      break;

    case AR_INTERNAL1V65:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    16b8:	6919      	ldr	r1, [r3, #16]
    16ba:	4a12      	ldr	r2, [pc, #72]	; (1704 <analogReference+0x60>)
    16bc:	400a      	ands	r2, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    16be:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_1X_Val;      // Gain Factor Selection
    16c0:	611a      	str	r2, [r3, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    16c2:	785a      	ldrb	r2, [r3, #1]
    16c4:	438a      	bics	r2, r1
  switch (mode)
    16c6:	f000 fc6b 	bl	1fa0 <__gnu_thumb1_case_uqi>
    16ca:	0803      	.short	0x0803
    16cc:	0b06      	.short	0x0b06
    16ce:	03          	.byte	0x03
    16cf:	00          	.byte	0x00
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC0_Val; // 1/1.48 VDDANA = 1/1.48* 3V3 = 2.2297
    16d0:	0011      	movs	r1, r2
    16d2:	2201      	movs	r2, #1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    16d4:	430a      	orrs	r2, r1
    16d6:	705a      	strb	r2, [r3, #1]
    default:
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
      break;
  }
}
    16d8:	bd00      	pop	{pc}
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_AREFA_Val;
    16da:	0011      	movs	r1, r2
    16dc:	2203      	movs	r2, #3
    16de:	e7f9      	b.n	16d4 <analogReference+0x30>
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    16e0:	0011      	movs	r1, r2
    16e2:	2202      	movs	r2, #2
    16e4:	e7f6      	b.n	16d4 <analogReference+0x30>
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    16e6:	23f0      	movs	r3, #240	; 0xf0
    16e8:	6911      	ldr	r1, [r2, #16]
    16ea:	051b      	lsls	r3, r3, #20
    16ec:	430b      	orrs	r3, r1
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    16ee:	210f      	movs	r1, #15
      ADC->INPUTCTRL.bit.GAIN = ADC_INPUTCTRL_GAIN_DIV2_Val;
    16f0:	6113      	str	r3, [r2, #16]
      ADC->REFCTRL.bit.REFSEL = ADC_REFCTRL_REFSEL_INTVCC1_Val; // 1/2 VDDANA = 0.5* 3V3 = 1.65V
    16f2:	7853      	ldrb	r3, [r2, #1]
    16f4:	438b      	bics	r3, r1
    16f6:	0019      	movs	r1, r3
    16f8:	2302      	movs	r3, #2
    16fa:	430b      	orrs	r3, r1
    16fc:	7053      	strb	r3, [r2, #1]
}
    16fe:	e7eb      	b.n	16d8 <analogReference+0x34>
    1700:	42004000 	.word	0x42004000
    1704:	f0ffffff 	.word	0xf0ffffff

00001708 <analogRead>:

uint32_t analogRead(uint32_t pin)
{
    1708:	b510      	push	{r4, lr}
    170a:	0004      	movs	r4, r0
  uint32_t valueRead = 0;

#if defined(PIN_A6)
  if (pin == 6) {
    170c:	2806      	cmp	r0, #6
    170e:	d05b      	beq.n	17c8 <analogRead+0xc0>
    pin = PIN_A6;
  } else
#endif
#if defined(PIN_A7)
  if (pin == 7) {
    1710:	2807      	cmp	r0, #7
    1712:	d05b      	beq.n	17cc <analogRead+0xc4>
    pin = PIN_A7;
  } else 
#endif
  if (pin <= 5) {
    1714:	2805      	cmp	r0, #5
    1716:	d800      	bhi.n	171a <analogRead+0x12>
    pin += A0;
    1718:	340e      	adds	r4, #14
  }

  pinPeripheral(pin, PIO_ANALOG);
    171a:	2101      	movs	r1, #1
    171c:	0020      	movs	r0, r4
    171e:	f000 f8d9 	bl	18d4 <pinPeripheral>

 // ATSAMR, for example, doesn't have a DAC
#ifdef DAC
  if (pin == A0) { // Disable DAC, if analogWrite(A0,dval) used previously the DAC is enabled
    1722:	2c0e      	cmp	r4, #14
    1724:	d10d      	bne.n	1742 <analogRead+0x3a>
  while (DAC->STATUS.bit.SYNCBUSY == 1)
    1726:	4b2a      	ldr	r3, [pc, #168]	; (17d0 <analogRead+0xc8>)
    1728:	0019      	movs	r1, r3
    172a:	79da      	ldrb	r2, [r3, #7]
    172c:	09d2      	lsrs	r2, r2, #7
    172e:	2a01      	cmp	r2, #1
    1730:	d0fb      	beq.n	172a <analogRead+0x22>
    syncDAC();
    DAC->CTRLA.bit.ENABLE = 0x00; // Disable DAC
    1732:	2002      	movs	r0, #2
    1734:	781a      	ldrb	r2, [r3, #0]
    1736:	4382      	bics	r2, r0
    1738:	701a      	strb	r2, [r3, #0]
  while (DAC->STATUS.bit.SYNCBUSY == 1)
    173a:	79cb      	ldrb	r3, [r1, #7]
    173c:	09db      	lsrs	r3, r3, #7
    173e:	2b01      	cmp	r3, #1
    1740:	d0fb      	beq.n	173a <analogRead+0x32>
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1742:	4924      	ldr	r1, [pc, #144]	; (17d4 <analogRead+0xcc>)
    1744:	000b      	movs	r3, r1
    1746:	7e4a      	ldrb	r2, [r1, #25]
    1748:	09d2      	lsrs	r2, r2, #7
    174a:	2a01      	cmp	r2, #1
    174c:	d0fb      	beq.n	1746 <analogRead+0x3e>
    syncDAC();
  }
#endif

  syncADC();
  ADC->INPUTCTRL.bit.MUXPOS = g_APinDescription[pin].ulADCChannelNumber; // Selection for the positive ADC input
    174e:	2218      	movs	r2, #24
    1750:	4362      	muls	r2, r4
    1752:	4c21      	ldr	r4, [pc, #132]	; (17d8 <analogRead+0xd0>)
    1754:	18a4      	adds	r4, r4, r2
    1756:	7c20      	ldrb	r0, [r4, #16]
    1758:	241f      	movs	r4, #31
    175a:	690a      	ldr	r2, [r1, #16]
    175c:	4020      	ands	r0, r4
    175e:	43a2      	bics	r2, r4
    1760:	4302      	orrs	r2, r0
    1762:	610a      	str	r2, [r1, #16]
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1764:	7e5a      	ldrb	r2, [r3, #25]
    1766:	09d2      	lsrs	r2, r2, #7
    1768:	2a01      	cmp	r2, #1
    176a:	d0fb      	beq.n	1764 <analogRead+0x5c>
   *
   * Before enabling the ADC, the asynchronous clock source must be selected and enabled, and the ADC reference must be
   * configured. The first conversion after the reference is changed must not be used.
   */
  syncADC();
  ADC->CTRLA.bit.ENABLE = 0x01;             // Enable ADC
    176c:	2202      	movs	r2, #2
    176e:	7819      	ldrb	r1, [r3, #0]
    1770:	430a      	orrs	r2, r1
    1772:	701a      	strb	r2, [r3, #0]
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1774:	7e5a      	ldrb	r2, [r3, #25]
    1776:	09d2      	lsrs	r2, r2, #7
    1778:	2a01      	cmp	r2, #1
    177a:	d0fb      	beq.n	1774 <analogRead+0x6c>

  // Start conversion
  syncADC();
  ADC->SWTRIG.bit.START = 1;
    177c:	2202      	movs	r2, #2
    177e:	7b19      	ldrb	r1, [r3, #12]
    1780:	430a      	orrs	r2, r1
    1782:	731a      	strb	r2, [r3, #12]

  // Clear the Data Ready flag
  ADC->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    1784:	2201      	movs	r2, #1
    1786:	761a      	strb	r2, [r3, #24]
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    1788:	7e5a      	ldrb	r2, [r3, #25]
    178a:	09d2      	lsrs	r2, r2, #7
    178c:	2a01      	cmp	r2, #1
    178e:	d0fb      	beq.n	1788 <analogRead+0x80>

  // Start conversion again, since The first conversion after the reference is changed must not be used.
  syncADC();
  ADC->SWTRIG.bit.START = 1;
    1790:	2202      	movs	r2, #2
    1792:	7b19      	ldrb	r1, [r3, #12]
    1794:	430a      	orrs	r2, r1
    1796:	731a      	strb	r2, [r3, #12]

  // Store the value
  while (ADC->INTFLAG.bit.RESRDY == 0);   // Waiting for conversion to complete
    1798:	7e1a      	ldrb	r2, [r3, #24]
    179a:	07d2      	lsls	r2, r2, #31
    179c:	d5fc      	bpl.n	1798 <analogRead+0x90>
  valueRead = ADC->RESULT.reg;
    179e:	8b58      	ldrh	r0, [r3, #26]
    17a0:	b280      	uxth	r0, r0
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    17a2:	7e5a      	ldrb	r2, [r3, #25]
    17a4:	09d2      	lsrs	r2, r2, #7
    17a6:	2a01      	cmp	r2, #1
    17a8:	d0fb      	beq.n	17a2 <analogRead+0x9a>

  syncADC();
  ADC->CTRLA.bit.ENABLE = 0x00;             // Disable ADC
    17aa:	2102      	movs	r1, #2
    17ac:	781a      	ldrb	r2, [r3, #0]
    17ae:	438a      	bics	r2, r1
    17b0:	701a      	strb	r2, [r3, #0]
  while (ADC->STATUS.bit.SYNCBUSY == 1)
    17b2:	7e5a      	ldrb	r2, [r3, #25]
    17b4:	09d2      	lsrs	r2, r2, #7
    17b6:	2a01      	cmp	r2, #1
    17b8:	d0fb      	beq.n	17b2 <analogRead+0xaa>
  syncADC();

  return mapResolution(valueRead, _ADCResolution, _readResolution);
    17ba:	4b08      	ldr	r3, [pc, #32]	; (17dc <analogRead+0xd4>)
    17bc:	681a      	ldr	r2, [r3, #0]
    17be:	4b08      	ldr	r3, [pc, #32]	; (17e0 <analogRead+0xd8>)
    17c0:	6819      	ldr	r1, [r3, #0]
    17c2:	f7ff ff65 	bl	1690 <mapResolution>
}
    17c6:	bd10      	pop	{r4, pc}
    pin = PIN_A6;
    17c8:	242c      	movs	r4, #44	; 0x2c
    17ca:	e7a6      	b.n	171a <analogRead+0x12>
    pin = PIN_A7;
    17cc:	242d      	movs	r4, #45	; 0x2d
    17ce:	e7a4      	b.n	171a <analogRead+0x12>
    17d0:	42004800 	.word	0x42004800
    17d4:	42004000 	.word	0x42004000
    17d8:	000022d8 	.word	0x000022d8
    17dc:	20000088 	.word	0x20000088
    17e0:	20000084 	.word	0x20000084

000017e4 <pinMode>:
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    17e4:	2318      	movs	r3, #24
{
    17e6:	b530      	push	{r4, r5, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    17e8:	001d      	movs	r5, r3
{
    17ea:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    17ec:	4345      	muls	r5, r0
    17ee:	2008      	movs	r0, #8
    17f0:	4a20      	ldr	r2, [pc, #128]	; (1874 <pinMode+0x90>)
    17f2:	1955      	adds	r5, r2, r5
    17f4:	5628      	ldrsb	r0, [r5, r0]
    17f6:	3001      	adds	r0, #1
    17f8:	d014      	beq.n	1824 <pinMode+0x40>
  {
    return ;
  }

  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  switch ( ulMode )
    17fa:	2903      	cmp	r1, #3
    17fc:	d812      	bhi.n	1824 <pinMode+0x40>
    17fe:	0008      	movs	r0, r1
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    break ;

    case INPUT_PULLDOWN:
      // Set pin to input mode with pull-down resistor enabled
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    1800:	4363      	muls	r3, r4
    1802:	56d1      	ldrsb	r1, [r2, r3]
    1804:	18d3      	adds	r3, r2, r3
  switch ( ulMode )
    1806:	f000 fbcb 	bl	1fa0 <__gnu_thumb1_case_uqi>
    180a:	2802      	.short	0x2802
    180c:	1b0e      	.short	0x1b0e
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    180e:	6858      	ldr	r0, [r3, #4]
    1810:	01cb      	lsls	r3, r1, #7
    1812:	2102      	movs	r1, #2
    1814:	4a18      	ldr	r2, [pc, #96]	; (1878 <pinMode+0x94>)
    1816:	189b      	adds	r3, r3, r2
    1818:	181a      	adds	r2, r3, r0
    181a:	3240      	adds	r2, #64	; 0x40
    181c:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    181e:	2201      	movs	r2, #1
    1820:	4082      	lsls	r2, r0
    1822:	605a      	str	r2, [r3, #4]

    default:
      // do nothing
    break ;
  }
}
    1824:	bd30      	pop	{r4, r5, pc}
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    1826:	6858      	ldr	r0, [r3, #4]
    1828:	01cb      	lsls	r3, r1, #7
    182a:	2106      	movs	r1, #6
    182c:	4a12      	ldr	r2, [pc, #72]	; (1878 <pinMode+0x94>)
    182e:	189b      	adds	r3, r3, r2
    1830:	181a      	adds	r2, r3, r0
    1832:	3240      	adds	r2, #64	; 0x40
    1834:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1836:	2201      	movs	r2, #1
    1838:	4082      	lsls	r2, r0
    183a:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    183c:	619a      	str	r2, [r3, #24]
    break ;
    183e:	e7f1      	b.n	1824 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN|PORT_PINCFG_PULLEN) ;
    1840:	6858      	ldr	r0, [r3, #4]
    1842:	01cb      	lsls	r3, r1, #7
    1844:	2106      	movs	r1, #6
    1846:	4a0c      	ldr	r2, [pc, #48]	; (1878 <pinMode+0x94>)
    1848:	189b      	adds	r3, r3, r2
    184a:	181a      	adds	r2, r3, r0
    184c:	3240      	adds	r2, #64	; 0x40
    184e:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1850:	2201      	movs	r2, #1
    1852:	4082      	lsls	r2, r0
    1854:	605a      	str	r2, [r3, #4]
      PORT->Group[g_APinDescription[ulPin].ulPort].OUTCLR.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    1856:	615a      	str	r2, [r3, #20]
    break ;
    1858:	e7e4      	b.n	1824 <pinMode+0x40>
      PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg=(uint8_t)(PORT_PINCFG_INEN) ;
    185a:	6858      	ldr	r0, [r3, #4]
    185c:	01cb      	lsls	r3, r1, #7
    185e:	2102      	movs	r1, #2
    1860:	4a05      	ldr	r2, [pc, #20]	; (1878 <pinMode+0x94>)
    1862:	189b      	adds	r3, r3, r2
    1864:	181a      	adds	r2, r3, r0
    1866:	3240      	adds	r2, #64	; 0x40
    1868:	7011      	strb	r1, [r2, #0]
      PORT->Group[g_APinDescription[ulPin].ulPort].DIRSET.reg = (uint32_t)(1<<g_APinDescription[ulPin].ulPin) ;
    186a:	2201      	movs	r2, #1
    186c:	4082      	lsls	r2, r0
    186e:	609a      	str	r2, [r3, #8]
    break ;
    1870:	e7d8      	b.n	1824 <pinMode+0x40>
    1872:	46c0      	nop			; (mov r8, r8)
    1874:	000022d8 	.word	0x000022d8
    1878:	41004400 	.word	0x41004400

0000187c <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    187c:	2318      	movs	r3, #24
{
    187e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    1880:	2408      	movs	r4, #8
    1882:	4358      	muls	r0, r3
    1884:	4a11      	ldr	r2, [pc, #68]	; (18cc <digitalWrite+0x50>)
    1886:	1813      	adds	r3, r2, r0
    1888:	571c      	ldrsb	r4, [r3, r4]
    188a:	3401      	adds	r4, #1
    188c:	d01b      	beq.n	18c6 <digitalWrite+0x4a>
    return ;
  }

  EPortType port = g_APinDescription[ulPin].ulPort;
  uint32_t pin = g_APinDescription[ulPin].ulPin;
  uint32_t pinMask = (1ul << pin);
    188e:	2601      	movs	r6, #1
    1890:	0035      	movs	r5, r6
  uint32_t pin = g_APinDescription[ulPin].ulPin;
    1892:	685f      	ldr	r7, [r3, #4]

  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    1894:	5683      	ldrsb	r3, [r0, r2]
  uint32_t pinMask = (1ul << pin);
    1896:	40bd      	lsls	r5, r7
  if ( (PORT->Group[port].DIRSET.reg & pinMask) == 0 ) {
    1898:	4a0d      	ldr	r2, [pc, #52]	; (18d0 <digitalWrite+0x54>)
    189a:	01db      	lsls	r3, r3, #7
    189c:	189a      	adds	r2, r3, r2
    189e:	6890      	ldr	r0, [r2, #8]
    18a0:	4228      	tst	r0, r5
    18a2:	d10b      	bne.n	18bc <digitalWrite+0x40>
    // the pin is not an output, disable pull-up if val is LOW, otherwise enable pull-up
    PORT->Group[port].PINCFG[pin].bit.PULLEN = ((ulVal == LOW) ? 0 : 1) ;
    18a4:	000c      	movs	r4, r1
    18a6:	1e60      	subs	r0, r4, #1
    18a8:	4184      	sbcs	r4, r0
    18aa:	19d2      	adds	r2, r2, r7
    18ac:	3240      	adds	r2, #64	; 0x40
    18ae:	7810      	ldrb	r0, [r2, #0]
    18b0:	4034      	ands	r4, r6
    18b2:	3603      	adds	r6, #3
    18b4:	00a4      	lsls	r4, r4, #2
    18b6:	43b0      	bics	r0, r6
    18b8:	4320      	orrs	r0, r4
    18ba:	7010      	strb	r0, [r2, #0]
  }

  switch ( ulVal )
  {
    case LOW:
      PORT->Group[port].OUTCLR.reg = pinMask;
    18bc:	4a04      	ldr	r2, [pc, #16]	; (18d0 <digitalWrite+0x54>)
    18be:	189b      	adds	r3, r3, r2
  switch ( ulVal )
    18c0:	2900      	cmp	r1, #0
    18c2:	d101      	bne.n	18c8 <digitalWrite+0x4c>
      PORT->Group[port].OUTCLR.reg = pinMask;
    18c4:	615d      	str	r5, [r3, #20]
      PORT->Group[port].OUTSET.reg = pinMask;
    break ;
  }

  return ;
}
    18c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PORT->Group[port].OUTSET.reg = pinMask;
    18c8:	619d      	str	r5, [r3, #24]
    break ;
    18ca:	e7fc      	b.n	18c6 <digitalWrite+0x4a>
    18cc:	000022d8 	.word	0x000022d8
    18d0:	41004400 	.word	0x41004400

000018d4 <pinPeripheral>:

#include "Arduino.h"
#include "wiring_private.h"

int pinPeripheral( uint32_t ulPin, EPioType ulPeripheral )
{
    18d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18d6:	0003      	movs	r3, r0
  // Handle the case the pin isn't usable as PIO
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    18d8:	2018      	movs	r0, #24
    18da:	4358      	muls	r0, r3
    18dc:	4a2a      	ldr	r2, [pc, #168]	; (1988 <pinPeripheral+0xb4>)
    18de:	1810      	adds	r0, r2, r0
    18e0:	7a00      	ldrb	r0, [r0, #8]
    18e2:	b240      	sxtb	r0, r0
  {
    return -1 ;
    18e4:	0004      	movs	r4, r0
  if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
    18e6:	3001      	adds	r0, #1
    18e8:	d013      	beq.n	1912 <pinPeripheral+0x3e>
  }

  switch ( ulPeripheral )
    18ea:	1c48      	adds	r0, r1, #1
    case PIO_NOT_A_PIN:
      return -1l ;
    break ;
  }

  return 0l ;
    18ec:	2400      	movs	r4, #0
  switch ( ulPeripheral )
    18ee:	280c      	cmp	r0, #12
    18f0:	d80f      	bhi.n	1912 <pinPeripheral+0x3e>
    18f2:	f000 fb55 	bl	1fa0 <__gnu_thumb1_case_uqi>
    18f6:	1c45      	.short	0x1c45
    18f8:	1c1c1c1c 	.word	0x1c1c1c1c
    18fc:	071c1c1c 	.word	0x071c1c1c
    1900:	0707      	.short	0x0707
    1902:	07          	.byte	0x07
    1903:	00          	.byte	0x00
      if ( ulPeripheral == PIO_INPUT )
    1904:	2909      	cmp	r1, #9
    1906:	d106      	bne.n	1916 <pinPeripheral+0x42>
        pinMode( ulPin, INPUT ) ;
    1908:	2100      	movs	r1, #0
          pinMode( ulPin, INPUT_PULLUP ) ;
    190a:	0018      	movs	r0, r3
    190c:	f7ff ff6a 	bl	17e4 <pinMode>
  return 0l ;
    1910:	2400      	movs	r4, #0
}
    1912:	0020      	movs	r0, r4
    1914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ( ulPeripheral == PIO_INPUT_PULLUP )
    1916:	290a      	cmp	r1, #10
    1918:	d101      	bne.n	191e <pinPeripheral+0x4a>
          pinMode( ulPin, INPUT_PULLUP ) ;
    191a:	3908      	subs	r1, #8
    191c:	e7f5      	b.n	190a <pinPeripheral+0x36>
  return 0l ;
    191e:	2400      	movs	r4, #0
          if ( ulPeripheral == PIO_OUTPUT )
    1920:	290b      	cmp	r1, #11
    1922:	d1f6      	bne.n	1912 <pinPeripheral+0x3e>
            pinMode( ulPin, OUTPUT ) ;
    1924:	390a      	subs	r1, #10
    1926:	0018      	movs	r0, r3
    1928:	f7ff ff5c 	bl	17e4 <pinMode>
    192c:	e7f1      	b.n	1912 <pinPeripheral+0x3e>
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    192e:	2018      	movs	r0, #24
    1930:	4343      	muls	r3, r0
    1932:	18d0      	adds	r0, r2, r3
    1934:	6846      	ldr	r6, [r0, #4]
    1936:	2501      	movs	r5, #1
    1938:	0034      	movs	r4, r6
    193a:	56d2      	ldrsb	r2, [r2, r3]
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    193c:	4813      	ldr	r0, [pc, #76]	; (198c <pinPeripheral+0xb8>)
    193e:	01d2      	lsls	r2, r2, #7
    1940:	1812      	adds	r2, r2, r0
    1942:	0873      	lsrs	r3, r6, #1
    1944:	18d3      	adds	r3, r2, r3
    1946:	3330      	adds	r3, #48	; 0x30
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    1948:	402c      	ands	r4, r5
        temp = (PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    194a:	7818      	ldrb	r0, [r3, #0]
      if ( g_APinDescription[ulPin].ulPin & 1 ) // is pin odd?
    194c:	2c00      	cmp	r4, #0
    194e:	d00b      	beq.n	1968 <pinPeripheral+0x94>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    1950:	240f      	movs	r4, #15
    1952:	0109      	lsls	r1, r1, #4
    1954:	4020      	ands	r0, r4
    1956:	4301      	orrs	r1, r0
    1958:	b2c9      	uxtb	r1, r1
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    195a:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXO( ulPeripheral ) ;
    195c:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ;
    195e:	3240      	adds	r2, #64	; 0x40
    1960:	7813      	ldrb	r3, [r2, #0]
    1962:	431d      	orrs	r5, r3
    1964:	7015      	strb	r5, [r2, #0]
    1966:	e7d3      	b.n	1910 <pinPeripheral+0x3c>
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    1968:	270f      	movs	r7, #15
    196a:	43b8      	bics	r0, r7
    196c:	4301      	orrs	r1, r0
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    196e:	1992      	adds	r2, r2, r6
        PORT->Group[g_APinDescription[ulPin].ulPort].PMUX[g_APinDescription[ulPin].ulPin >> 1].reg = temp|PORT_PMUX_PMUXE( ulPeripheral ) ;
    1970:	b2c9      	uxtb	r1, r1
    1972:	7019      	strb	r1, [r3, #0]
        PORT->Group[g_APinDescription[ulPin].ulPort].PINCFG[g_APinDescription[ulPin].ulPin].reg |= PORT_PINCFG_PMUXEN ; // Enable port mux
    1974:	0013      	movs	r3, r2
    1976:	3340      	adds	r3, #64	; 0x40
    1978:	781a      	ldrb	r2, [r3, #0]
    197a:	4315      	orrs	r5, r2
    197c:	701d      	strb	r5, [r3, #0]
    197e:	e7c8      	b.n	1912 <pinPeripheral+0x3e>
      return -1l ;
    1980:	2401      	movs	r4, #1
    1982:	4264      	negs	r4, r4
    1984:	e7c5      	b.n	1912 <pinPeripheral+0x3e>
    1986:	46c0      	nop			; (mov r8, r8)
    1988:	000022d8 	.word	0x000022d8
    198c:	41004400 	.word	0x41004400

00001990 <shiftOut>:

  return value ;
}

void shiftOut( uint32_t ulDataPin, uint32_t ulClockPin, uint32_t ulBitOrder, uint32_t ulVal )
{
    1990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1992:	0007      	movs	r7, r0
    1994:	000e      	movs	r6, r1
    1996:	2407      	movs	r4, #7
    1998:	2501      	movs	r5, #1
    199a:	9201      	str	r2, [sp, #4]
    199c:	9300      	str	r3, [sp, #0]
  uint8_t i ;

  for ( i=0 ; i < 8 ; i++ )
  {
    if ( ulBitOrder == LSBFIRST )
    199e:	9b01      	ldr	r3, [sp, #4]
    19a0:	2b00      	cmp	r3, #0
    19a2:	d115      	bne.n	19d0 <shiftOut+0x40>
    {
      digitalWrite( ulDataPin, !!(ulVal & (1 << i)) ) ;
    19a4:	0029      	movs	r1, r5
    19a6:	3307      	adds	r3, #7
    19a8:	1b1b      	subs	r3, r3, r4
    19aa:	4099      	lsls	r1, r3
    }
    else
    {
      digitalWrite( ulDataPin, !!(ulVal & (1 << (7 - i))) ) ;
    19ac:	9b00      	ldr	r3, [sp, #0]
    19ae:	0038      	movs	r0, r7
    19b0:	4019      	ands	r1, r3
    19b2:	1e4b      	subs	r3, r1, #1
    19b4:	4199      	sbcs	r1, r3
    19b6:	f7ff ff61 	bl	187c <digitalWrite>
    }

    digitalWrite( ulClockPin, HIGH ) ;
    19ba:	0029      	movs	r1, r5
    19bc:	0030      	movs	r0, r6
    19be:	f7ff ff5d 	bl	187c <digitalWrite>
    digitalWrite( ulClockPin, LOW ) ;
    19c2:	2100      	movs	r1, #0
    19c4:	0030      	movs	r0, r6
    19c6:	f7ff ff59 	bl	187c <digitalWrite>
  for ( i=0 ; i < 8 ; i++ )
    19ca:	3c01      	subs	r4, #1
    19cc:	d2e7      	bcs.n	199e <shiftOut+0xe>
  }
}
    19ce:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
      digitalWrite( ulDataPin, !!(ulVal & (1 << (7 - i))) ) ;
    19d0:	0029      	movs	r1, r5
    19d2:	40a1      	lsls	r1, r4
    19d4:	e7ea      	b.n	19ac <shiftOut+0x1c>
	...

000019d8 <SERCOM0_Handler>:
SERCOM sercom5( SERCOM5 ) ;

Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
Uart Serial5( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
void SERCOM0_Handler()
{
    19d8:	b510      	push	{r4, lr}
  Serial1.IrqHandler();
    19da:	4802      	ldr	r0, [pc, #8]	; (19e4 <SERCOM0_Handler+0xc>)
    19dc:	f000 f9a0 	bl	1d20 <_ZN4Uart10IrqHandlerEv>
}
    19e0:	bd10      	pop	{r4, pc}
    19e2:	46c0      	nop			; (mov r8, r8)
    19e4:	2000070c 	.word	0x2000070c

000019e8 <SERCOM5_Handler>:

void SERCOM5_Handler()
{
    19e8:	b510      	push	{r4, lr}
  Serial5.IrqHandler();
    19ea:	4802      	ldr	r0, [pc, #8]	; (19f4 <SERCOM5_Handler+0xc>)
    19ec:	f000 f998 	bl	1d20 <_ZN4Uart10IrqHandlerEv>
}
    19f0:	bd10      	pop	{r4, pc}
    19f2:	46c0      	nop			; (mov r8, r8)
    19f4:	200007d0 	.word	0x200007d0

000019f8 <_GLOBAL__sub_I_g_APinDescription>:
    19f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    19fa:	2401      	movs	r4, #1
    19fc:	2603      	movs	r6, #3
SERCOM sercom0( SERCOM0 ) ;
    19fe:	4f15      	ldr	r7, [pc, #84]	; (1a54 <_GLOBAL__sub_I_g_APinDescription+0x5c>)
    1a00:	4915      	ldr	r1, [pc, #84]	; (1a58 <_GLOBAL__sub_I_g_APinDescription+0x60>)
    1a02:	0038      	movs	r0, r7
    1a04:	f000 f846 	bl	1a94 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    1a08:	4914      	ldr	r1, [pc, #80]	; (1a5c <_GLOBAL__sub_I_g_APinDescription+0x64>)
    1a0a:	4815      	ldr	r0, [pc, #84]	; (1a60 <_GLOBAL__sub_I_g_APinDescription+0x68>)
    1a0c:	f000 f842 	bl	1a94 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    1a10:	4914      	ldr	r1, [pc, #80]	; (1a64 <_GLOBAL__sub_I_g_APinDescription+0x6c>)
    1a12:	4815      	ldr	r0, [pc, #84]	; (1a68 <_GLOBAL__sub_I_g_APinDescription+0x70>)
    1a14:	f000 f83e 	bl	1a94 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    1a18:	4914      	ldr	r1, [pc, #80]	; (1a6c <_GLOBAL__sub_I_g_APinDescription+0x74>)
    1a1a:	4815      	ldr	r0, [pc, #84]	; (1a70 <_GLOBAL__sub_I_g_APinDescription+0x78>)
    1a1c:	f000 f83a 	bl	1a94 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    1a20:	4914      	ldr	r1, [pc, #80]	; (1a74 <_GLOBAL__sub_I_g_APinDescription+0x7c>)
    1a22:	4815      	ldr	r0, [pc, #84]	; (1a78 <_GLOBAL__sub_I_g_APinDescription+0x80>)
    1a24:	f000 f836 	bl	1a94 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    1a28:	4d14      	ldr	r5, [pc, #80]	; (1a7c <_GLOBAL__sub_I_g_APinDescription+0x84>)
    1a2a:	4915      	ldr	r1, [pc, #84]	; (1a80 <_GLOBAL__sub_I_g_APinDescription+0x88>)
    1a2c:	0028      	movs	r0, r5
    1a2e:	f000 f831 	bl	1a94 <_ZN6SERCOMC1EP6Sercom>
Uart Serial1( &sercom0, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    1a32:	0039      	movs	r1, r7
    1a34:	9600      	str	r6, [sp, #0]
    1a36:	0023      	movs	r3, r4
    1a38:	9401      	str	r4, [sp, #4]
    1a3a:	2200      	movs	r2, #0
    1a3c:	4811      	ldr	r0, [pc, #68]	; (1a84 <_GLOBAL__sub_I_g_APinDescription+0x8c>)
    1a3e:	f000 f949 	bl	1cd4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial5( &sercom5, PIN_SERIAL_RX, PIN_SERIAL_TX, PAD_SERIAL_RX, PAD_SERIAL_TX ) ;
    1a42:	9600      	str	r6, [sp, #0]
    1a44:	0029      	movs	r1, r5
    1a46:	9401      	str	r4, [sp, #4]
    1a48:	231e      	movs	r3, #30
    1a4a:	221f      	movs	r2, #31
    1a4c:	480e      	ldr	r0, [pc, #56]	; (1a88 <_GLOBAL__sub_I_g_APinDescription+0x90>)
    1a4e:	f000 f941 	bl	1cd4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
}
    1a52:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1a54:	20000894 	.word	0x20000894
    1a58:	42000800 	.word	0x42000800
    1a5c:	42000c00 	.word	0x42000c00
    1a60:	20000898 	.word	0x20000898
    1a64:	42001000 	.word	0x42001000
    1a68:	2000089c 	.word	0x2000089c
    1a6c:	42001400 	.word	0x42001400
    1a70:	200008a0 	.word	0x200008a0
    1a74:	42001800 	.word	0x42001800
    1a78:	200008a4 	.word	0x200008a4
    1a7c:	200008a8 	.word	0x200008a8
    1a80:	42001c00 	.word	0x42001c00
    1a84:	2000070c 	.word	0x2000070c
    1a88:	200007d0 	.word	0x200007d0

00001a8c <_Znwj>:
    1a8c:	b510      	push	{r4, lr}
    1a8e:	f000 fb41 	bl	2114 <malloc>
    1a92:	bd10      	pop	{r4, pc}

00001a94 <_ZN6SERCOMC1EP6Sercom>:
#include "SERCOM.h"
#include "variant.h"

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    1a94:	6001      	str	r1, [r0, #0]
}
    1a96:	4770      	bx	lr

00001a98 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}
void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    1a98:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a9a:	ac05      	add	r4, sp, #20
    1a9c:	7825      	ldrb	r5, [r4, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    1a9e:	6804      	ldr	r4, [r0, #0]
    1aa0:	1e98      	subs	r0, r3, #2
    1aa2:	1e47      	subs	r7, r0, #1
    1aa4:	41b8      	sbcs	r0, r7
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    1aa6:	6826      	ldr	r6, [r4, #0]
    1aa8:	0792      	lsls	r2, r2, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    1aaa:	0600      	lsls	r0, r0, #24
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    1aac:	4332      	orrs	r2, r6
    1aae:	4302      	orrs	r2, r0

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    1ab0:	2007      	movs	r0, #7
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    1ab2:	6022      	str	r2, [r4, #0]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    1ab4:	4001      	ands	r1, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    1ab6:	01ad      	lsls	r5, r5, #6
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    1ab8:	6862      	ldr	r2, [r4, #4]
    1aba:	4329      	orrs	r1, r5
    1abc:	2000      	movs	r0, #0
    1abe:	2b02      	cmp	r3, #2
    1ac0:	d000      	beq.n	1ac4 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x2c>
    1ac2:	0358      	lsls	r0, r3, #13
    1ac4:	4311      	orrs	r1, r2
    1ac6:	4301      	orrs	r1, r0
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    1ac8:	6061      	str	r1, [r4, #4]
}
    1aca:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001acc <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    1acc:	b510      	push	{r4, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    1ace:	24c0      	movs	r4, #192	; 0xc0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    1ad0:	6803      	ldr	r3, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    1ad2:	03a4      	lsls	r4, r4, #14
    1ad4:	6818      	ldr	r0, [r3, #0]
    1ad6:	0512      	lsls	r2, r2, #20
    1ad8:	4022      	ands	r2, r4
    1ada:	4302      	orrs	r2, r0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    1adc:	20c0      	movs	r0, #192	; 0xc0
    1ade:	0409      	lsls	r1, r1, #16
    1ae0:	0280      	lsls	r0, r0, #10
    1ae2:	4001      	ands	r1, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    1ae4:	4311      	orrs	r1, r2
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    1ae6:	6019      	str	r1, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    1ae8:	685a      	ldr	r2, [r3, #4]
    1aea:	4310      	orrs	r0, r2
    1aec:	6058      	str	r0, [r3, #4]
}
    1aee:	bd10      	pop	{r4, pc}

00001af0 <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    1af0:	2201      	movs	r2, #1
    1af2:	6803      	ldr	r3, [r0, #0]
    1af4:	6819      	ldr	r1, [r3, #0]
    1af6:	430a      	orrs	r2, r1
    1af8:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    1afa:	681a      	ldr	r2, [r3, #0]
    1afc:	07d2      	lsls	r2, r2, #31
    1afe:	d4fc      	bmi.n	1afa <_ZN6SERCOM9resetUARTEv+0xa>
    1b00:	69da      	ldr	r2, [r3, #28]
    1b02:	07d2      	lsls	r2, r2, #31
    1b04:	d4f9      	bmi.n	1afa <_ZN6SERCOM9resetUARTEv+0xa>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    1b06:	4770      	bx	lr

00001b08 <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    1b08:	2202      	movs	r2, #2
    1b0a:	6803      	ldr	r3, [r0, #0]
    1b0c:	6819      	ldr	r1, [r3, #0]
    1b0e:	430a      	orrs	r2, r1
    1b10:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    1b12:	69da      	ldr	r2, [r3, #28]
    1b14:	0792      	lsls	r2, r2, #30
    1b16:	d4fc      	bmi.n	1b12 <_ZN6SERCOM10enableUARTEv+0xa>
}
    1b18:	4770      	bx	lr

00001b1a <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    1b1a:	6803      	ldr	r3, [r0, #0]
    1b1c:	7e1a      	ldrb	r2, [r3, #24]
  if(isDataRegisterEmptyUART())
    1b1e:	07d2      	lsls	r2, r2, #31
    1b20:	d402      	bmi.n	1b28 <_ZN6SERCOM9flushUARTEv+0xe>
  while(!sercom->USART.INTFLAG.bit.TXC);
    1b22:	7e1a      	ldrb	r2, [r3, #24]
    1b24:	0792      	lsls	r2, r2, #30
    1b26:	d5fc      	bpl.n	1b22 <_ZN6SERCOM9flushUARTEv+0x8>
}
    1b28:	4770      	bx	lr

00001b2a <_ZN6SERCOM15clearStatusUARTEv>:
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    1b2a:	2200      	movs	r2, #0
    1b2c:	6803      	ldr	r3, [r0, #0]
    1b2e:	835a      	strh	r2, [r3, #26]
}
    1b30:	4770      	bx	lr

00001b32 <_ZN6SERCOM17availableDataUARTEv>:
  return sercom->USART.INTFLAG.bit.RXC;
    1b32:	6803      	ldr	r3, [r0, #0]
    1b34:	7e18      	ldrb	r0, [r3, #24]
    1b36:	0740      	lsls	r0, r0, #29
    1b38:	0fc0      	lsrs	r0, r0, #31
}
    1b3a:	4770      	bx	lr

00001b3c <_ZN6SERCOM11isUARTErrorEv>:
  return sercom->USART.INTFLAG.bit.ERROR;
    1b3c:	6803      	ldr	r3, [r0, #0]
    1b3e:	7e18      	ldrb	r0, [r3, #24]
    1b40:	09c0      	lsrs	r0, r0, #7
}
    1b42:	4770      	bx	lr

00001b44 <_ZN6SERCOM20acknowledgeUARTErrorEv>:
  sercom->USART.INTFLAG.bit.ERROR = 1;
    1b44:	2380      	movs	r3, #128	; 0x80
    1b46:	6802      	ldr	r2, [r0, #0]
    1b48:	425b      	negs	r3, r3
    1b4a:	7e11      	ldrb	r1, [r2, #24]
    1b4c:	430b      	orrs	r3, r1
    1b4e:	7613      	strb	r3, [r2, #24]
}
    1b50:	4770      	bx	lr

00001b52 <_ZN6SERCOM12readDataUARTEv>:
}

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    1b52:	6803      	ldr	r3, [r0, #0]
    1b54:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    1b56:	b2c0      	uxtb	r0, r0
}
    1b58:	4770      	bx	lr

00001b5a <_ZN6SERCOM13writeDataUARTEh>:
  return sercom->USART.INTFLAG.bit.DRE;
    1b5a:	6803      	ldr	r3, [r0, #0]
    1b5c:	7e1a      	ldrb	r2, [r3, #24]

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    1b5e:	07d2      	lsls	r2, r2, #31
    1b60:	d5fc      	bpl.n	1b5c <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    1b62:	b289      	uxth	r1, r1
  return 1;
}
    1b64:	2001      	movs	r0, #1
  sercom->USART.DATA.reg = (uint16_t)data;
    1b66:	8519      	strh	r1, [r3, #40]	; 0x28
}
    1b68:	4770      	bx	lr
	...

00001b6c <_ZN6SERCOM13initClockNVICEv>:
void SERCOM::initClockNVIC( void )
{
  uint8_t clockId = 0;
  IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later

  if(sercom == SERCOM0)
    1b6c:	6803      	ldr	r3, [r0, #0]
    1b6e:	4a21      	ldr	r2, [pc, #132]	; (1bf4 <_ZN6SERCOM13initClockNVICEv+0x88>)
{
    1b70:	b530      	push	{r4, r5, lr}
  if(sercom == SERCOM0)
    1b72:	4293      	cmp	r3, r2
    1b74:	d011      	beq.n	1b9a <_ZN6SERCOM13initClockNVICEv+0x2e>
  {
    clockId = GCM_SERCOM0_CORE;
    IdNvic = SERCOM0_IRQn;
  }
  else if(sercom == SERCOM1)
    1b76:	4a20      	ldr	r2, [pc, #128]	; (1bf8 <_ZN6SERCOM13initClockNVICEv+0x8c>)
    1b78:	4293      	cmp	r3, r2
    1b7a:	d02f      	beq.n	1bdc <_ZN6SERCOM13initClockNVICEv+0x70>
  {
    clockId = GCM_SERCOM1_CORE;
    IdNvic = SERCOM1_IRQn;
  }
  else if(sercom == SERCOM2)
    1b7c:	4a1f      	ldr	r2, [pc, #124]	; (1bfc <_ZN6SERCOM13initClockNVICEv+0x90>)
    1b7e:	4293      	cmp	r3, r2
    1b80:	d02f      	beq.n	1be2 <_ZN6SERCOM13initClockNVICEv+0x76>
  {
    clockId = GCM_SERCOM2_CORE;
    IdNvic = SERCOM2_IRQn;
  }
  else if(sercom == SERCOM3)
    1b82:	4a1f      	ldr	r2, [pc, #124]	; (1c00 <_ZN6SERCOM13initClockNVICEv+0x94>)
    1b84:	4293      	cmp	r3, r2
    1b86:	d02f      	beq.n	1be8 <_ZN6SERCOM13initClockNVICEv+0x7c>
  {
    clockId = GCM_SERCOM3_CORE;
    IdNvic = SERCOM3_IRQn;
  }
#if defined(SERCOM4)
  else if(sercom == SERCOM4)
    1b88:	4a1e      	ldr	r2, [pc, #120]	; (1c04 <_ZN6SERCOM13initClockNVICEv+0x98>)
    1b8a:	4293      	cmp	r3, r2
    1b8c:	d02f      	beq.n	1bee <_ZN6SERCOM13initClockNVICEv+0x82>
    clockId = GCM_SERCOM4_CORE;
    IdNvic = SERCOM4_IRQn;
  }
#endif
#if defined(SERCOM5)
  else if(sercom == SERCOM5)
    1b8e:	4a1e      	ldr	r2, [pc, #120]	; (1c08 <_ZN6SERCOM13initClockNVICEv+0x9c>)
    1b90:	4293      	cmp	r3, r2
    1b92:	d122      	bne.n	1bda <_ZN6SERCOM13initClockNVICEv+0x6e>
  {
    clockId = GCM_SERCOM5_CORE;
    IdNvic = SERCOM5_IRQn;
    1b94:	230e      	movs	r3, #14
    clockId = GCM_SERCOM5_CORE;
    1b96:	2219      	movs	r2, #25
    1b98:	e001      	b.n	1b9e <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM0_IRQn;
    1b9a:	2309      	movs	r3, #9
    clockId = GCM_SERCOM0_CORE;
    1b9c:	2214      	movs	r2, #20
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1b9e:	2101      	movs	r1, #1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1ba0:	2503      	movs	r5, #3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1ba2:	4099      	lsls	r1, r3
    1ba4:	4819      	ldr	r0, [pc, #100]	; (1c0c <_ZN6SERCOM13initClockNVICEv+0xa0>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1ba6:	24c0      	movs	r4, #192	; 0xc0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1ba8:	6001      	str	r1, [r0, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1baa:	0899      	lsrs	r1, r3, #2
    1bac:	402b      	ands	r3, r5
    1bae:	40ab      	lsls	r3, r5
    1bb0:	35fc      	adds	r5, #252	; 0xfc
    1bb2:	409d      	lsls	r5, r3
    1bb4:	0089      	lsls	r1, r1, #2
    1bb6:	1809      	adds	r1, r1, r0
    1bb8:	00a4      	lsls	r4, r4, #2
    1bba:	5908      	ldr	r0, [r1, r4]
    1bbc:	43a8      	bics	r0, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    1bbe:	25c0      	movs	r5, #192	; 0xc0
    1bc0:	409d      	lsls	r5, r3
    1bc2:	002b      	movs	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1bc4:	4303      	orrs	r3, r0
    1bc6:	510b      	str	r3, [r1, r4]
  NVIC_EnableIRQ(IdNvic);
  NVIC_SetPriority (IdNvic, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority */

  //Setting clock
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
                      GCLK_CLKCTRL_GEN_GCLK0 | // Generic Clock Generator 0 is source
    1bc8:	2380      	movs	r3, #128	; 0x80
    1bca:	01db      	lsls	r3, r3, #7
    1bcc:	431a      	orrs	r2, r3
  GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID( clockId ) | // Generic Clock 0 (SERCOMx)
    1bce:	4b10      	ldr	r3, [pc, #64]	; (1c10 <_ZN6SERCOM13initClockNVICEv+0xa4>)
    1bd0:	805a      	strh	r2, [r3, #2]
                      GCLK_CLKCTRL_CLKEN ;

  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY )
    1bd2:	785a      	ldrb	r2, [r3, #1]
    1bd4:	b252      	sxtb	r2, r2
    1bd6:	2a00      	cmp	r2, #0
    1bd8:	dbfb      	blt.n	1bd2 <_ZN6SERCOM13initClockNVICEv+0x66>
  {
    /* Wait for synchronization */
  }
}
    1bda:	bd30      	pop	{r4, r5, pc}
    IdNvic = SERCOM1_IRQn;
    1bdc:	230a      	movs	r3, #10
    clockId = GCM_SERCOM1_CORE;
    1bde:	2215      	movs	r2, #21
    1be0:	e7dd      	b.n	1b9e <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM2_IRQn;
    1be2:	230b      	movs	r3, #11
    clockId = GCM_SERCOM2_CORE;
    1be4:	2216      	movs	r2, #22
    1be6:	e7da      	b.n	1b9e <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM3_IRQn;
    1be8:	230c      	movs	r3, #12
    clockId = GCM_SERCOM3_CORE;
    1bea:	2217      	movs	r2, #23
    1bec:	e7d7      	b.n	1b9e <_ZN6SERCOM13initClockNVICEv+0x32>
    IdNvic = SERCOM4_IRQn;
    1bee:	230d      	movs	r3, #13
    clockId = GCM_SERCOM4_CORE;
    1bf0:	2218      	movs	r2, #24
    1bf2:	e7d4      	b.n	1b9e <_ZN6SERCOM13initClockNVICEv+0x32>
    1bf4:	42000800 	.word	0x42000800
    1bf8:	42000c00 	.word	0x42000c00
    1bfc:	42001000 	.word	0x42001000
    1c00:	42001400 	.word	0x42001400
    1c04:	42001800 	.word	0x42001800
    1c08:	42001c00 	.word	0x42001c00
    1c0c:	e000e100 	.word	0xe000e100
    1c10:	40000c00 	.word	0x40000c00

00001c14 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
{
    1c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c16:	0004      	movs	r4, r0
    1c18:	0016      	movs	r6, r2
    1c1a:	000f      	movs	r7, r1
    1c1c:	001d      	movs	r5, r3
  initClockNVIC();
    1c1e:	f7ff ffa5 	bl	1b6c <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    1c22:	0020      	movs	r0, r4
    1c24:	f7ff ff64 	bl	1af0 <_ZN6SERCOM9resetUARTEv>
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    1c28:	221c      	movs	r2, #28
    1c2a:	00bb      	lsls	r3, r7, #2
    1c2c:	4013      	ands	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    1c2e:	0772      	lsls	r2, r6, #29
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    1c30:	6824      	ldr	r4, [r4, #0]
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    1c32:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    1c34:	4313      	orrs	r3, r2
    1c36:	6023      	str	r3, [r4, #0]
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    1c38:	2384      	movs	r3, #132	; 0x84
    1c3a:	75a3      	strb	r3, [r4, #22]
  if ( mode == UART_INT_CLOCK )
    1c3c:	2f01      	cmp	r7, #1
    1c3e:	d118      	bne.n	1c72 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x5e>
      sampleRateValue = 16;
    1c40:	2110      	movs	r1, #16
    if (sampleRate == SAMPLE_RATE_x16) {
    1c42:	2e01      	cmp	r6, #1
    1c44:	d000      	beq.n	1c48 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x34>
      sampleRateValue = 8;
    1c46:	3908      	subs	r1, #8
    uint32_t baudTimes8 = (SystemCoreClock * 8) / (sampleRateValue * baudrate);
    1c48:	4b0a      	ldr	r3, [pc, #40]	; (1c74 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x60>)
    1c4a:	4369      	muls	r1, r5
    1c4c:	6818      	ldr	r0, [r3, #0]
    1c4e:	00c0      	lsls	r0, r0, #3
    1c50:	f000 f9b0 	bl	1fb4 <__udivsi3>
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    1c54:	2207      	movs	r2, #7
    1c56:	89a3      	ldrh	r3, [r4, #12]
    1c58:	4002      	ands	r2, r0
    1c5a:	04db      	lsls	r3, r3, #19
    1c5c:	0352      	lsls	r2, r2, #13
    1c5e:	0cdb      	lsrs	r3, r3, #19
    1c60:	4313      	orrs	r3, r2
    1c62:	81a3      	strh	r3, [r4, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    1c64:	0403      	lsls	r3, r0, #16
    1c66:	89a0      	ldrh	r0, [r4, #12]
    1c68:	0cdb      	lsrs	r3, r3, #19
    1c6a:	0b40      	lsrs	r0, r0, #13
    1c6c:	0340      	lsls	r0, r0, #13
    1c6e:	4318      	orrs	r0, r3
    1c70:	81a0      	strh	r0, [r4, #12]
}
    1c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c74:	20000080 	.word	0x20000080

00001c78 <_ZN4UartcvbEv>:
    size_t write(const uint8_t data);
    using Print::write; // pull in write(str) and write(buf, size) from Print

    void IrqHandler();

    operator bool() { return true; }
    1c78:	2001      	movs	r0, #1
    1c7a:	4770      	bx	lr

00001c7c <_ZN4Uart5beginEm>:
  uc_padRX=_padRX ;
  uc_padTX=_padTX;
}

void Uart::begin(unsigned long baudrate)
{
    1c7c:	b510      	push	{r4, lr}
  begin(baudrate, SERIAL_8N1);
    1c7e:	6803      	ldr	r3, [r0, #0]
    1c80:	4a01      	ldr	r2, [pc, #4]	; (1c88 <_ZN4Uart5beginEm+0xc>)
    1c82:	69db      	ldr	r3, [r3, #28]
    1c84:	4798      	blx	r3
}
    1c86:	bd10      	pop	{r4, pc}
    1c88:	00000413 	.word	0x00000413

00001c8c <_ZN4Uart3endEv>:

  sercom->enableUART();
}

void Uart::end()
{
    1c8c:	b510      	push	{r4, lr}
    1c8e:	0004      	movs	r4, r0
  sercom->resetUART();
    1c90:	6900      	ldr	r0, [r0, #16]
    1c92:	f7ff ff2d 	bl	1af0 <_ZN6SERCOM9resetUARTEv>
  rxBuffer.clear();
    1c96:	0020      	movs	r0, r4
    1c98:	3014      	adds	r0, #20
    1c9a:	f000 f94e 	bl	1f3a <_ZN10RingBuffer5clearEv>
}
    1c9e:	bd10      	pop	{r4, pc}

00001ca0 <_ZN4Uart5flushEv>:

void Uart::flush()
{
    1ca0:	b510      	push	{r4, lr}
  sercom->flushUART();
    1ca2:	6900      	ldr	r0, [r0, #16]
    1ca4:	f7ff ff39 	bl	1b1a <_ZN6SERCOM9flushUARTEv>
}
    1ca8:	bd10      	pop	{r4, pc}

00001caa <_ZN4Uart9availableEv>:
    sercom->clearStatusUART();
  }
}

int Uart::available()
{
    1caa:	b510      	push	{r4, lr}
  return rxBuffer.available();
    1cac:	3014      	adds	r0, #20
    1cae:	f000 f95f 	bl	1f70 <_ZN10RingBuffer9availableEv>
}
    1cb2:	bd10      	pop	{r4, pc}

00001cb4 <_ZN4Uart4peekEv>:
{
  return (sercom->isDataRegisterEmptyUART() ? 1 : 0);
}

int Uart::peek()
{
    1cb4:	b510      	push	{r4, lr}
  return rxBuffer.peek();
    1cb6:	3014      	adds	r0, #20
    1cb8:	f000 f964 	bl	1f84 <_ZN10RingBuffer4peekEv>
}
    1cbc:	bd10      	pop	{r4, pc}

00001cbe <_ZN4Uart4readEv>:

int Uart::read()
{
    1cbe:	b510      	push	{r4, lr}
  return rxBuffer.read_char();
    1cc0:	3014      	adds	r0, #20
    1cc2:	f000 f941 	bl	1f48 <_ZN10RingBuffer9read_charEv>
}
    1cc6:	bd10      	pop	{r4, pc}

00001cc8 <_ZN4Uart5writeEh>:

size_t Uart::write(const uint8_t data)
{
    1cc8:	b510      	push	{r4, lr}
  sercom->writeDataUART(data);
    1cca:	6900      	ldr	r0, [r0, #16]
    1ccc:	f7ff ff45 	bl	1b5a <_ZN6SERCOM13writeDataUARTEh>
  return 1;
}
    1cd0:	2001      	movs	r0, #1
    1cd2:	bd10      	pop	{r4, pc}

00001cd4 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX)
    1cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1cd6:	001d      	movs	r5, r3
    1cd8:	ab08      	add	r3, sp, #32
    1cda:	781b      	ldrb	r3, [r3, #0]
    1cdc:	0004      	movs	r4, r0
    1cde:	9300      	str	r3, [sp, #0]
    1ce0:	ab09      	add	r3, sp, #36	; 0x24
    1ce2:	781b      	ldrb	r3, [r3, #0]
    1ce4:	0016      	movs	r6, r2
    1ce6:	9301      	str	r3, [sp, #4]
    1ce8:	2300      	movs	r3, #0
    1cea:	6043      	str	r3, [r0, #4]
    1cec:	23fa      	movs	r3, #250	; 0xfa
    1cee:	009b      	lsls	r3, r3, #2
    1cf0:	6083      	str	r3, [r0, #8]
    1cf2:	4b0a      	ldr	r3, [pc, #40]	; (1d1c <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x48>)
    1cf4:	000f      	movs	r7, r1
    1cf6:	3308      	adds	r3, #8
    1cf8:	6003      	str	r3, [r0, #0]
    1cfa:	3014      	adds	r0, #20
    1cfc:	f000 f8fe 	bl	1efc <_ZN10RingBufferC1Ev>
  uc_padRX=_padRX ;
    1d00:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
    1d02:	0023      	movs	r3, r4
  uc_padRX=_padRX ;
    1d04:	7812      	ldrb	r2, [r2, #0]
  uc_pinRX = _pinRX;
    1d06:	33c0      	adds	r3, #192	; 0xc0
  sercom = _s;
    1d08:	6127      	str	r7, [r4, #16]
  uc_padRX=_padRX ;
    1d0a:	709a      	strb	r2, [r3, #2]
  uc_padTX=_padTX;
    1d0c:	466a      	mov	r2, sp
    1d0e:	7912      	ldrb	r2, [r2, #4]
  uc_pinRX = _pinRX;
    1d10:	701e      	strb	r6, [r3, #0]
  uc_pinTX = _pinTX;
    1d12:	705d      	strb	r5, [r3, #1]
}
    1d14:	0020      	movs	r0, r4
  uc_padTX=_padTX;
    1d16:	70da      	strb	r2, [r3, #3]
}
    1d18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1d1a:	46c0      	nop			; (mov r8, r8)
    1d1c:	00002728 	.word	0x00002728

00001d20 <_ZN4Uart10IrqHandlerEv>:
{
    1d20:	b510      	push	{r4, lr}
    1d22:	0004      	movs	r4, r0
  if (sercom->availableDataUART()) {
    1d24:	6900      	ldr	r0, [r0, #16]
    1d26:	f7ff ff04 	bl	1b32 <_ZN6SERCOM17availableDataUARTEv>
    1d2a:	2800      	cmp	r0, #0
    1d2c:	d007      	beq.n	1d3e <_ZN4Uart10IrqHandlerEv+0x1e>
    rxBuffer.store_char(sercom->readDataUART());
    1d2e:	6920      	ldr	r0, [r4, #16]
    1d30:	f7ff ff0f 	bl	1b52 <_ZN6SERCOM12readDataUARTEv>
    1d34:	0001      	movs	r1, r0
    1d36:	0020      	movs	r0, r4
    1d38:	3014      	adds	r0, #20
    1d3a:	f000 f8ec 	bl	1f16 <_ZN10RingBuffer10store_charEh>
  if (sercom->isUARTError()) {
    1d3e:	6920      	ldr	r0, [r4, #16]
    1d40:	f7ff fefc 	bl	1b3c <_ZN6SERCOM11isUARTErrorEv>
    1d44:	2800      	cmp	r0, #0
    1d46:	d005      	beq.n	1d54 <_ZN4Uart10IrqHandlerEv+0x34>
    sercom->acknowledgeUARTError();
    1d48:	6920      	ldr	r0, [r4, #16]
    1d4a:	f7ff fefb 	bl	1b44 <_ZN6SERCOM20acknowledgeUARTErrorEv>
    sercom->clearStatusUART();
    1d4e:	6920      	ldr	r0, [r4, #16]
    1d50:	f7ff feeb 	bl	1b2a <_ZN6SERCOM15clearStatusUARTEv>
}
    1d54:	bd10      	pop	{r4, pc}

00001d56 <_ZN4Uart16extractNbStopBitEt>:

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
    1d56:	20f0      	movs	r0, #240	; 0xf0
    1d58:	4001      	ands	r1, r0
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    1d5a:	3930      	subs	r1, #48	; 0x30
    1d5c:	4248      	negs	r0, r1
    1d5e:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
    1d60:	4770      	bx	lr

00001d62 <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    1d62:	23f0      	movs	r3, #240	; 0xf0
    1d64:	011b      	lsls	r3, r3, #4
    1d66:	4019      	ands	r1, r3
    1d68:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    1d6a:	2006      	movs	r0, #6
  switch(config & HARDSER_DATA_MASK)
    1d6c:	009b      	lsls	r3, r3, #2
    1d6e:	4299      	cmp	r1, r3
    1d70:	d00a      	beq.n	1d88 <_ZN4Uart15extractCharSizeEt+0x26>
    1d72:	3301      	adds	r3, #1
    1d74:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    1d76:	3001      	adds	r0, #1
  switch(config & HARDSER_DATA_MASK)
    1d78:	4299      	cmp	r1, r3
    1d7a:	d005      	beq.n	1d88 <_ZN4Uart15extractCharSizeEt+0x26>
    1d7c:	2380      	movs	r3, #128	; 0x80
      return UART_CHAR_SIZE_5_BITS;
    1d7e:	3802      	subs	r0, #2
  switch(config & HARDSER_DATA_MASK)
    1d80:	005b      	lsls	r3, r3, #1
    1d82:	4299      	cmp	r1, r3
    1d84:	d000      	beq.n	1d88 <_ZN4Uart15extractCharSizeEt+0x26>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    1d86:	2000      	movs	r0, #0

  }
}
    1d88:	4770      	bx	lr

00001d8a <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    1d8a:	200f      	movs	r0, #15
    1d8c:	4001      	ands	r1, r0
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    1d8e:	2000      	movs	r0, #0
  switch(config & HARDSER_PARITY_MASK)
    1d90:	2901      	cmp	r1, #1
    1d92:	d003      	beq.n	1d9c <_ZN4Uart13extractParityEt+0x12>
      return SERCOM_NO_PARITY;
    1d94:	3902      	subs	r1, #2
    1d96:	1e48      	subs	r0, r1, #1
    1d98:	4181      	sbcs	r1, r0
    1d9a:	1c48      	adds	r0, r1, #1

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
    1d9c:	4770      	bx	lr
	...

00001da0 <_ZN4Uart5beginEmt>:
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1da0:	0003      	movs	r3, r0
{
    1da2:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1da4:	2618      	movs	r6, #24
{
    1da6:	b085      	sub	sp, #20
    1da8:	9103      	str	r1, [sp, #12]
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1daa:	33c0      	adds	r3, #192	; 0xc0
{
    1dac:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1dae:	7818      	ldrb	r0, [r3, #0]
    1db0:	0033      	movs	r3, r6
    1db2:	2108      	movs	r1, #8
    1db4:	4343      	muls	r3, r0
    1db6:	4d1b      	ldr	r5, [pc, #108]	; (1e24 <_ZN4Uart5beginEmt+0x84>)
{
    1db8:	0017      	movs	r7, r2
  pinPeripheral(uc_pinRX, g_APinDescription[uc_pinRX].ulPinType);
    1dba:	18eb      	adds	r3, r5, r3
    1dbc:	5659      	ldrsb	r1, [r3, r1]
    1dbe:	f7ff fd89 	bl	18d4 <pinPeripheral>
  pinPeripheral(uc_pinTX, g_APinDescription[uc_pinTX].ulPinType);
    1dc2:	0023      	movs	r3, r4
    1dc4:	2108      	movs	r1, #8
    1dc6:	33c1      	adds	r3, #193	; 0xc1
    1dc8:	7818      	ldrb	r0, [r3, #0]
    1dca:	4346      	muls	r6, r0
    1dcc:	19ad      	adds	r5, r5, r6
    1dce:	5669      	ldrsb	r1, [r5, r1]
    1dd0:	f7ff fd80 	bl	18d4 <pinPeripheral>
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    1dd4:	2201      	movs	r2, #1
    1dd6:	9b03      	ldr	r3, [sp, #12]
    1dd8:	0011      	movs	r1, r2
    1dda:	6920      	ldr	r0, [r4, #16]
    1ddc:	f7ff ff1a 	bl	1c14 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    1de0:	0039      	movs	r1, r7
    1de2:	0020      	movs	r0, r4
    1de4:	f7ff ffbd 	bl	1d62 <_ZN4Uart15extractCharSizeEt>
    1de8:	0039      	movs	r1, r7
    1dea:	0005      	movs	r5, r0
    1dec:	0020      	movs	r0, r4
    1dee:	f7ff ffcc 	bl	1d8a <_ZN4Uart13extractParityEt>
    1df2:	0039      	movs	r1, r7
    1df4:	0006      	movs	r6, r0
    1df6:	0020      	movs	r0, r4
    1df8:	f7ff ffad 	bl	1d56 <_ZN4Uart16extractNbStopBitEt>
    1dfc:	0033      	movs	r3, r6
    1dfe:	9000      	str	r0, [sp, #0]
    1e00:	0029      	movs	r1, r5
    1e02:	6920      	ldr	r0, [r4, #16]
    1e04:	2201      	movs	r2, #1
    1e06:	f7ff fe47 	bl	1a98 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    1e0a:	0023      	movs	r3, r4
    1e0c:	33c2      	adds	r3, #194	; 0xc2
    1e0e:	781a      	ldrb	r2, [r3, #0]
    1e10:	7859      	ldrb	r1, [r3, #1]
    1e12:	6920      	ldr	r0, [r4, #16]
    1e14:	f7ff fe5a 	bl	1acc <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
    1e18:	6920      	ldr	r0, [r4, #16]
    1e1a:	f7ff fe75 	bl	1b08 <_ZN6SERCOM10enableUARTEv>
}
    1e1e:	b005      	add	sp, #20
    1e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e22:	46c0      	nop			; (mov r8, r8)
    1e24:	000022d8 	.word	0x000022d8

00001e28 <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    1e28:	b570      	push	{r4, r5, r6, lr}
    1e2a:	000e      	movs	r6, r1
	int sent = 0;
    1e2c:	2500      	movs	r5, #0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1e2e:	6844      	ldr	r4, [r0, #4]
    1e30:	2c00      	cmp	r4, #0
    1e32:	d00b      	beq.n	1e4c <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
		int res = node->getInterface(interfaceCount);
    1e34:	6823      	ldr	r3, [r4, #0]
    1e36:	0031      	movs	r1, r6
    1e38:	685b      	ldr	r3, [r3, #4]
    1e3a:	0020      	movs	r0, r4
    1e3c:	4798      	blx	r3
		if (res < 0)
    1e3e:	2800      	cmp	r0, #0
    1e40:	db02      	blt.n	1e48 <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
			return -1;
		sent += res;
    1e42:	182d      	adds	r5, r5, r0
	for (node = rootNode; node; node = node->next) {
    1e44:	68e4      	ldr	r4, [r4, #12]
    1e46:	e7f3      	b.n	1e30 <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
			return -1;
    1e48:	2501      	movs	r5, #1
    1e4a:	426d      	negs	r5, r5
	}
	return sent;
}
    1e4c:	0028      	movs	r0, r5
    1e4e:	bd70      	pop	{r4, r5, r6, pc}

00001e50 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    1e50:	b570      	push	{r4, r5, r6, lr}
    1e52:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1e54:	6844      	ldr	r4, [r0, #4]
    1e56:	2c00      	cmp	r4, #0
    1e58:	d008      	beq.n	1e6c <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
		int ret = node->getDescriptor(setup);
    1e5a:	6823      	ldr	r3, [r4, #0]
    1e5c:	0029      	movs	r1, r5
    1e5e:	689b      	ldr	r3, [r3, #8]
    1e60:	0020      	movs	r0, r4
    1e62:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
    1e64:	2800      	cmp	r0, #0
    1e66:	d102      	bne.n	1e6e <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    1e68:	68e4      	ldr	r4, [r4, #12]
    1e6a:	e7f4      	b.n	1e56 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
			return ret;
	}
	return 0;
    1e6c:	0020      	movs	r0, r4
}
    1e6e:	bd70      	pop	{r4, r5, r6, pc}

00001e70 <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    1e70:	b570      	push	{r4, r5, r6, lr}
    1e72:	000d      	movs	r5, r1
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    1e74:	6844      	ldr	r4, [r0, #4]
    1e76:	2c00      	cmp	r4, #0
    1e78:	d007      	beq.n	1e8a <_ZN13PluggableUSB_12getShortNameEPc+0x1a>
               iSerialNum += node->getShortName(iSerialNum);
    1e7a:	6823      	ldr	r3, [r4, #0]
    1e7c:	0029      	movs	r1, r5
    1e7e:	0020      	movs	r0, r4
    1e80:	68db      	ldr	r3, [r3, #12]
    1e82:	4798      	blx	r3
       for (node = rootNode; node; node = node->next) {
    1e84:	68e4      	ldr	r4, [r4, #12]
               iSerialNum += node->getShortName(iSerialNum);
    1e86:	182d      	adds	r5, r5, r0
       for (node = rootNode; node; node = node->next) {
    1e88:	e7f5      	b.n	1e76 <_ZN13PluggableUSB_12getShortNameEPc+0x6>
       }
       *iSerialNum = 0;
    1e8a:	702c      	strb	r4, [r5, #0]
}
    1e8c:	bd70      	pop	{r4, r5, r6, pc}

00001e8e <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    1e8e:	b570      	push	{r4, r5, r6, lr}
    1e90:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1e92:	6844      	ldr	r4, [r0, #4]
    1e94:	2c00      	cmp	r4, #0
    1e96:	d008      	beq.n	1eaa <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
		if (node->setup(setup)) {
    1e98:	6823      	ldr	r3, [r4, #0]
    1e9a:	0029      	movs	r1, r5
    1e9c:	681b      	ldr	r3, [r3, #0]
    1e9e:	0020      	movs	r0, r4
    1ea0:	4798      	blx	r3
    1ea2:	2800      	cmp	r0, #0
    1ea4:	d102      	bne.n	1eac <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    1ea6:	68e4      	ldr	r4, [r4, #12]
    1ea8:	e7f4      	b.n	1e94 <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
			return true;
		}
	}
	return false;
    1eaa:	0020      	movs	r0, r4
}
    1eac:	bd70      	pop	{r4, r5, r6, pc}
	...

00001eb0 <_Z12PluggableUSBv>:
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    1eb0:	2101      	movs	r1, #1
    1eb2:	4a06      	ldr	r2, [pc, #24]	; (1ecc <_Z12PluggableUSBv+0x1c>)
{
    1eb4:	b510      	push	{r4, lr}
	static PluggableUSB_ obj;
    1eb6:	6813      	ldr	r3, [r2, #0]
    1eb8:	4805      	ldr	r0, [pc, #20]	; (1ed0 <_Z12PluggableUSBv+0x20>)
    1eba:	400b      	ands	r3, r1
    1ebc:	d105      	bne.n	1eca <_Z12PluggableUSBv+0x1a>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    1ebe:	2402      	movs	r4, #2
    1ec0:	7004      	strb	r4, [r0, #0]
    1ec2:	1924      	adds	r4, r4, r4
    1ec4:	7044      	strb	r4, [r0, #1]
    1ec6:	6043      	str	r3, [r0, #4]
	static PluggableUSB_ obj;
    1ec8:	6011      	str	r1, [r2, #0]
}
    1eca:	bd10      	pop	{r4, pc}
    1ecc:	200008ac 	.word	0x200008ac
    1ed0:	200008b0 	.word	0x200008b0

00001ed4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    1ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1ed6:	0006      	movs	r6, r0
    1ed8:	000d      	movs	r5, r1
    1eda:	000c      	movs	r4, r1
    1edc:	188b      	adds	r3, r1, r2
    1ede:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
    1ee0:	9b01      	ldr	r3, [sp, #4]
    1ee2:	1b67      	subs	r7, r4, r5
    1ee4:	429c      	cmp	r4, r3
    1ee6:	d007      	beq.n	1ef8 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    1ee8:	6833      	ldr	r3, [r6, #0]
    1eea:	7821      	ldrb	r1, [r4, #0]
    1eec:	681b      	ldr	r3, [r3, #0]
    1eee:	0030      	movs	r0, r6
    1ef0:	4798      	blx	r3
    1ef2:	3401      	adds	r4, #1
    1ef4:	2800      	cmp	r0, #0
    1ef6:	d1f3      	bne.n	1ee0 <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
    1ef8:	0038      	movs	r0, r7
    1efa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00001efc <_ZN10RingBufferC1Ev>:
*/

#include "RingBuffer.h"
#include <string.h>

RingBuffer::RingBuffer( void )
    1efc:	b510      	push	{r4, lr}
    1efe:	0004      	movs	r4, r0
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    1f00:	22a4      	movs	r2, #164	; 0xa4
    1f02:	2100      	movs	r1, #0
    1f04:	f000 f919 	bl	213a <memset>
  }
}

void RingBuffer::clear()
{
	_iHead = 0;
    1f08:	0022      	movs	r2, r4
    1f0a:	2300      	movs	r3, #0
    1f0c:	32a4      	adds	r2, #164	; 0xa4
}
    1f0e:	0020      	movs	r0, r4
	_iHead = 0;
    1f10:	6013      	str	r3, [r2, #0]
	_iTail = 0;
    1f12:	6053      	str	r3, [r2, #4]
}
    1f14:	bd10      	pop	{r4, pc}

00001f16 <_ZN10RingBuffer10store_charEh>:
{
    1f16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int i = nextIndex(_iHead);
    1f18:	0005      	movs	r5, r0
{
    1f1a:	0004      	movs	r4, r0
  int i = nextIndex(_iHead);
    1f1c:	35a4      	adds	r5, #164	; 0xa4
    1f1e:	682e      	ldr	r6, [r5, #0]
{
    1f20:	000f      	movs	r7, r1
	return _aucBuffer[_iTail];
}

int RingBuffer::nextIndex(int index)
{
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    1f22:	1c70      	adds	r0, r6, #1
    1f24:	21a4      	movs	r1, #164	; 0xa4
    1f26:	f000 f8cb 	bl	20c0 <__aeabi_uidivmod>
  if ( i != _iTail )
    1f2a:	0023      	movs	r3, r4
    1f2c:	33a8      	adds	r3, #168	; 0xa8
    1f2e:	681b      	ldr	r3, [r3, #0]
    1f30:	428b      	cmp	r3, r1
    1f32:	d001      	beq.n	1f38 <_ZN10RingBuffer10store_charEh+0x22>
    _aucBuffer[_iHead] = c ;
    1f34:	55a7      	strb	r7, [r4, r6]
    _iHead = i ;
    1f36:	6029      	str	r1, [r5, #0]
}
    1f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001f3a <_ZN10RingBuffer5clearEv>:
	_iHead = 0;
    1f3a:	0002      	movs	r2, r0
    1f3c:	2300      	movs	r3, #0
    1f3e:	32a4      	adds	r2, #164	; 0xa4
	_iTail = 0;
    1f40:	30a8      	adds	r0, #168	; 0xa8
	_iHead = 0;
    1f42:	6013      	str	r3, [r2, #0]
	_iTail = 0;
    1f44:	6003      	str	r3, [r0, #0]
}
    1f46:	4770      	bx	lr

00001f48 <_ZN10RingBuffer9read_charEv>:
{
    1f48:	b570      	push	{r4, r5, r6, lr}
	if(_iTail == _iHead)
    1f4a:	0002      	movs	r2, r0
    1f4c:	0005      	movs	r5, r0
    1f4e:	32a4      	adds	r2, #164	; 0xa4
    1f50:	35a8      	adds	r5, #168	; 0xa8
    1f52:	682b      	ldr	r3, [r5, #0]
    1f54:	6812      	ldr	r2, [r2, #0]
    1f56:	4293      	cmp	r3, r2
    1f58:	d007      	beq.n	1f6a <_ZN10RingBuffer9read_charEv+0x22>
	uint8_t value = _aucBuffer[_iTail];
    1f5a:	5cc4      	ldrb	r4, [r0, r3]
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    1f5c:	21a4      	movs	r1, #164	; 0xa4
    1f5e:	1c58      	adds	r0, r3, #1
    1f60:	f000 f8ae 	bl	20c0 <__aeabi_uidivmod>
	return value;
    1f64:	0020      	movs	r0, r4
	_iTail = nextIndex(_iTail);
    1f66:	6029      	str	r1, [r5, #0]
}
    1f68:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1f6a:	2001      	movs	r0, #1
    1f6c:	4240      	negs	r0, r0
    1f6e:	e7fb      	b.n	1f68 <_ZN10RingBuffer9read_charEv+0x20>

00001f70 <_ZN10RingBuffer9availableEv>:
	int delta = _iHead - _iTail;
    1f70:	0002      	movs	r2, r0
    1f72:	0003      	movs	r3, r0
    1f74:	32a4      	adds	r2, #164	; 0xa4
    1f76:	33a8      	adds	r3, #168	; 0xa8
    1f78:	6810      	ldr	r0, [r2, #0]
    1f7a:	681b      	ldr	r3, [r3, #0]
    1f7c:	1ac0      	subs	r0, r0, r3
	if(delta < 0)
    1f7e:	d500      	bpl.n	1f82 <_ZN10RingBuffer9availableEv+0x12>
		return SERIAL_BUFFER_SIZE + delta;
    1f80:	30a4      	adds	r0, #164	; 0xa4
}
    1f82:	4770      	bx	lr

00001f84 <_ZN10RingBuffer4peekEv>:
	if(_iTail == _iHead)
    1f84:	0003      	movs	r3, r0
    1f86:	0002      	movs	r2, r0
    1f88:	33a8      	adds	r3, #168	; 0xa8
    1f8a:	32a4      	adds	r2, #164	; 0xa4
    1f8c:	681b      	ldr	r3, [r3, #0]
    1f8e:	6812      	ldr	r2, [r2, #0]
    1f90:	4293      	cmp	r3, r2
    1f92:	d001      	beq.n	1f98 <_ZN10RingBuffer4peekEv+0x14>
	return _aucBuffer[_iTail];
    1f94:	5cc0      	ldrb	r0, [r0, r3]
}
    1f96:	4770      	bx	lr
		return -1;
    1f98:	2001      	movs	r0, #1
    1f9a:	4240      	negs	r0, r0
    1f9c:	e7fb      	b.n	1f96 <_ZN10RingBuffer4peekEv+0x12>
	...

00001fa0 <__gnu_thumb1_case_uqi>:
    1fa0:	b402      	push	{r1}
    1fa2:	4671      	mov	r1, lr
    1fa4:	0849      	lsrs	r1, r1, #1
    1fa6:	0049      	lsls	r1, r1, #1
    1fa8:	5c09      	ldrb	r1, [r1, r0]
    1faa:	0049      	lsls	r1, r1, #1
    1fac:	448e      	add	lr, r1
    1fae:	bc02      	pop	{r1}
    1fb0:	4770      	bx	lr
    1fb2:	46c0      	nop			; (mov r8, r8)

00001fb4 <__udivsi3>:
    1fb4:	2200      	movs	r2, #0
    1fb6:	0843      	lsrs	r3, r0, #1
    1fb8:	428b      	cmp	r3, r1
    1fba:	d374      	bcc.n	20a6 <__udivsi3+0xf2>
    1fbc:	0903      	lsrs	r3, r0, #4
    1fbe:	428b      	cmp	r3, r1
    1fc0:	d35f      	bcc.n	2082 <__udivsi3+0xce>
    1fc2:	0a03      	lsrs	r3, r0, #8
    1fc4:	428b      	cmp	r3, r1
    1fc6:	d344      	bcc.n	2052 <__udivsi3+0x9e>
    1fc8:	0b03      	lsrs	r3, r0, #12
    1fca:	428b      	cmp	r3, r1
    1fcc:	d328      	bcc.n	2020 <__udivsi3+0x6c>
    1fce:	0c03      	lsrs	r3, r0, #16
    1fd0:	428b      	cmp	r3, r1
    1fd2:	d30d      	bcc.n	1ff0 <__udivsi3+0x3c>
    1fd4:	22ff      	movs	r2, #255	; 0xff
    1fd6:	0209      	lsls	r1, r1, #8
    1fd8:	ba12      	rev	r2, r2
    1fda:	0c03      	lsrs	r3, r0, #16
    1fdc:	428b      	cmp	r3, r1
    1fde:	d302      	bcc.n	1fe6 <__udivsi3+0x32>
    1fe0:	1212      	asrs	r2, r2, #8
    1fe2:	0209      	lsls	r1, r1, #8
    1fe4:	d065      	beq.n	20b2 <__udivsi3+0xfe>
    1fe6:	0b03      	lsrs	r3, r0, #12
    1fe8:	428b      	cmp	r3, r1
    1fea:	d319      	bcc.n	2020 <__udivsi3+0x6c>
    1fec:	e000      	b.n	1ff0 <__udivsi3+0x3c>
    1fee:	0a09      	lsrs	r1, r1, #8
    1ff0:	0bc3      	lsrs	r3, r0, #15
    1ff2:	428b      	cmp	r3, r1
    1ff4:	d301      	bcc.n	1ffa <__udivsi3+0x46>
    1ff6:	03cb      	lsls	r3, r1, #15
    1ff8:	1ac0      	subs	r0, r0, r3
    1ffa:	4152      	adcs	r2, r2
    1ffc:	0b83      	lsrs	r3, r0, #14
    1ffe:	428b      	cmp	r3, r1
    2000:	d301      	bcc.n	2006 <__udivsi3+0x52>
    2002:	038b      	lsls	r3, r1, #14
    2004:	1ac0      	subs	r0, r0, r3
    2006:	4152      	adcs	r2, r2
    2008:	0b43      	lsrs	r3, r0, #13
    200a:	428b      	cmp	r3, r1
    200c:	d301      	bcc.n	2012 <__udivsi3+0x5e>
    200e:	034b      	lsls	r3, r1, #13
    2010:	1ac0      	subs	r0, r0, r3
    2012:	4152      	adcs	r2, r2
    2014:	0b03      	lsrs	r3, r0, #12
    2016:	428b      	cmp	r3, r1
    2018:	d301      	bcc.n	201e <__udivsi3+0x6a>
    201a:	030b      	lsls	r3, r1, #12
    201c:	1ac0      	subs	r0, r0, r3
    201e:	4152      	adcs	r2, r2
    2020:	0ac3      	lsrs	r3, r0, #11
    2022:	428b      	cmp	r3, r1
    2024:	d301      	bcc.n	202a <__udivsi3+0x76>
    2026:	02cb      	lsls	r3, r1, #11
    2028:	1ac0      	subs	r0, r0, r3
    202a:	4152      	adcs	r2, r2
    202c:	0a83      	lsrs	r3, r0, #10
    202e:	428b      	cmp	r3, r1
    2030:	d301      	bcc.n	2036 <__udivsi3+0x82>
    2032:	028b      	lsls	r3, r1, #10
    2034:	1ac0      	subs	r0, r0, r3
    2036:	4152      	adcs	r2, r2
    2038:	0a43      	lsrs	r3, r0, #9
    203a:	428b      	cmp	r3, r1
    203c:	d301      	bcc.n	2042 <__udivsi3+0x8e>
    203e:	024b      	lsls	r3, r1, #9
    2040:	1ac0      	subs	r0, r0, r3
    2042:	4152      	adcs	r2, r2
    2044:	0a03      	lsrs	r3, r0, #8
    2046:	428b      	cmp	r3, r1
    2048:	d301      	bcc.n	204e <__udivsi3+0x9a>
    204a:	020b      	lsls	r3, r1, #8
    204c:	1ac0      	subs	r0, r0, r3
    204e:	4152      	adcs	r2, r2
    2050:	d2cd      	bcs.n	1fee <__udivsi3+0x3a>
    2052:	09c3      	lsrs	r3, r0, #7
    2054:	428b      	cmp	r3, r1
    2056:	d301      	bcc.n	205c <__udivsi3+0xa8>
    2058:	01cb      	lsls	r3, r1, #7
    205a:	1ac0      	subs	r0, r0, r3
    205c:	4152      	adcs	r2, r2
    205e:	0983      	lsrs	r3, r0, #6
    2060:	428b      	cmp	r3, r1
    2062:	d301      	bcc.n	2068 <__udivsi3+0xb4>
    2064:	018b      	lsls	r3, r1, #6
    2066:	1ac0      	subs	r0, r0, r3
    2068:	4152      	adcs	r2, r2
    206a:	0943      	lsrs	r3, r0, #5
    206c:	428b      	cmp	r3, r1
    206e:	d301      	bcc.n	2074 <__udivsi3+0xc0>
    2070:	014b      	lsls	r3, r1, #5
    2072:	1ac0      	subs	r0, r0, r3
    2074:	4152      	adcs	r2, r2
    2076:	0903      	lsrs	r3, r0, #4
    2078:	428b      	cmp	r3, r1
    207a:	d301      	bcc.n	2080 <__udivsi3+0xcc>
    207c:	010b      	lsls	r3, r1, #4
    207e:	1ac0      	subs	r0, r0, r3
    2080:	4152      	adcs	r2, r2
    2082:	08c3      	lsrs	r3, r0, #3
    2084:	428b      	cmp	r3, r1
    2086:	d301      	bcc.n	208c <__udivsi3+0xd8>
    2088:	00cb      	lsls	r3, r1, #3
    208a:	1ac0      	subs	r0, r0, r3
    208c:	4152      	adcs	r2, r2
    208e:	0883      	lsrs	r3, r0, #2
    2090:	428b      	cmp	r3, r1
    2092:	d301      	bcc.n	2098 <__udivsi3+0xe4>
    2094:	008b      	lsls	r3, r1, #2
    2096:	1ac0      	subs	r0, r0, r3
    2098:	4152      	adcs	r2, r2
    209a:	0843      	lsrs	r3, r0, #1
    209c:	428b      	cmp	r3, r1
    209e:	d301      	bcc.n	20a4 <__udivsi3+0xf0>
    20a0:	004b      	lsls	r3, r1, #1
    20a2:	1ac0      	subs	r0, r0, r3
    20a4:	4152      	adcs	r2, r2
    20a6:	1a41      	subs	r1, r0, r1
    20a8:	d200      	bcs.n	20ac <__udivsi3+0xf8>
    20aa:	4601      	mov	r1, r0
    20ac:	4152      	adcs	r2, r2
    20ae:	4610      	mov	r0, r2
    20b0:	4770      	bx	lr
    20b2:	e7ff      	b.n	20b4 <__udivsi3+0x100>
    20b4:	b501      	push	{r0, lr}
    20b6:	2000      	movs	r0, #0
    20b8:	f000 f806 	bl	20c8 <__aeabi_idiv0>
    20bc:	bd02      	pop	{r1, pc}
    20be:	46c0      	nop			; (mov r8, r8)

000020c0 <__aeabi_uidivmod>:
    20c0:	2900      	cmp	r1, #0
    20c2:	d0f7      	beq.n	20b4 <__udivsi3+0x100>
    20c4:	e776      	b.n	1fb4 <__udivsi3>
    20c6:	4770      	bx	lr

000020c8 <__aeabi_idiv0>:
    20c8:	4770      	bx	lr
    20ca:	46c0      	nop			; (mov r8, r8)

000020cc <__libc_init_array>:
    20cc:	b570      	push	{r4, r5, r6, lr}
    20ce:	2600      	movs	r6, #0
    20d0:	4d0c      	ldr	r5, [pc, #48]	; (2104 <__libc_init_array+0x38>)
    20d2:	4c0d      	ldr	r4, [pc, #52]	; (2108 <__libc_init_array+0x3c>)
    20d4:	1b64      	subs	r4, r4, r5
    20d6:	10a4      	asrs	r4, r4, #2
    20d8:	42a6      	cmp	r6, r4
    20da:	d109      	bne.n	20f0 <__libc_init_array+0x24>
    20dc:	2600      	movs	r6, #0
    20de:	f000 f8bd 	bl	225c <_init>
    20e2:	4d0a      	ldr	r5, [pc, #40]	; (210c <__libc_init_array+0x40>)
    20e4:	4c0a      	ldr	r4, [pc, #40]	; (2110 <__libc_init_array+0x44>)
    20e6:	1b64      	subs	r4, r4, r5
    20e8:	10a4      	asrs	r4, r4, #2
    20ea:	42a6      	cmp	r6, r4
    20ec:	d105      	bne.n	20fa <__libc_init_array+0x2e>
    20ee:	bd70      	pop	{r4, r5, r6, pc}
    20f0:	00b3      	lsls	r3, r6, #2
    20f2:	58eb      	ldr	r3, [r5, r3]
    20f4:	4798      	blx	r3
    20f6:	3601      	adds	r6, #1
    20f8:	e7ee      	b.n	20d8 <__libc_init_array+0xc>
    20fa:	00b3      	lsls	r3, r6, #2
    20fc:	58eb      	ldr	r3, [r5, r3]
    20fe:	4798      	blx	r3
    2100:	3601      	adds	r6, #1
    2102:	e7f2      	b.n	20ea <__libc_init_array+0x1e>
    2104:	200000f0 	.word	0x200000f0
    2108:	200000f0 	.word	0x200000f0
    210c:	200000f0 	.word	0x200000f0
    2110:	20000100 	.word	0x20000100

00002114 <malloc>:
    2114:	b510      	push	{r4, lr}
    2116:	4b03      	ldr	r3, [pc, #12]	; (2124 <malloc+0x10>)
    2118:	0001      	movs	r1, r0
    211a:	6818      	ldr	r0, [r3, #0]
    211c:	f000 f816 	bl	214c <_malloc_r>
    2120:	bd10      	pop	{r4, pc}
    2122:	46c0      	nop			; (mov r8, r8)
    2124:	2000008c 	.word	0x2000008c

00002128 <memcpy>:
    2128:	2300      	movs	r3, #0
    212a:	b510      	push	{r4, lr}
    212c:	429a      	cmp	r2, r3
    212e:	d100      	bne.n	2132 <memcpy+0xa>
    2130:	bd10      	pop	{r4, pc}
    2132:	5ccc      	ldrb	r4, [r1, r3]
    2134:	54c4      	strb	r4, [r0, r3]
    2136:	3301      	adds	r3, #1
    2138:	e7f8      	b.n	212c <memcpy+0x4>

0000213a <memset>:
    213a:	0003      	movs	r3, r0
    213c:	1882      	adds	r2, r0, r2
    213e:	4293      	cmp	r3, r2
    2140:	d100      	bne.n	2144 <memset+0xa>
    2142:	4770      	bx	lr
    2144:	7019      	strb	r1, [r3, #0]
    2146:	3301      	adds	r3, #1
    2148:	e7f9      	b.n	213e <memset+0x4>
	...

0000214c <_malloc_r>:
    214c:	2303      	movs	r3, #3
    214e:	b570      	push	{r4, r5, r6, lr}
    2150:	1ccd      	adds	r5, r1, #3
    2152:	439d      	bics	r5, r3
    2154:	3508      	adds	r5, #8
    2156:	0006      	movs	r6, r0
    2158:	2d0c      	cmp	r5, #12
    215a:	d21e      	bcs.n	219a <_malloc_r+0x4e>
    215c:	250c      	movs	r5, #12
    215e:	42a9      	cmp	r1, r5
    2160:	d81d      	bhi.n	219e <_malloc_r+0x52>
    2162:	0030      	movs	r0, r6
    2164:	f000 f869 	bl	223a <__malloc_lock>
    2168:	4a25      	ldr	r2, [pc, #148]	; (2200 <_malloc_r+0xb4>)
    216a:	6814      	ldr	r4, [r2, #0]
    216c:	0021      	movs	r1, r4
    216e:	2900      	cmp	r1, #0
    2170:	d119      	bne.n	21a6 <_malloc_r+0x5a>
    2172:	4c24      	ldr	r4, [pc, #144]	; (2204 <_malloc_r+0xb8>)
    2174:	6823      	ldr	r3, [r4, #0]
    2176:	2b00      	cmp	r3, #0
    2178:	d103      	bne.n	2182 <_malloc_r+0x36>
    217a:	0030      	movs	r0, r6
    217c:	f000 f844 	bl	2208 <_sbrk_r>
    2180:	6020      	str	r0, [r4, #0]
    2182:	0029      	movs	r1, r5
    2184:	0030      	movs	r0, r6
    2186:	f000 f83f 	bl	2208 <_sbrk_r>
    218a:	1c43      	adds	r3, r0, #1
    218c:	d12c      	bne.n	21e8 <_malloc_r+0x9c>
    218e:	230c      	movs	r3, #12
    2190:	0030      	movs	r0, r6
    2192:	6033      	str	r3, [r6, #0]
    2194:	f000 f852 	bl	223c <__malloc_unlock>
    2198:	e003      	b.n	21a2 <_malloc_r+0x56>
    219a:	2d00      	cmp	r5, #0
    219c:	dadf      	bge.n	215e <_malloc_r+0x12>
    219e:	230c      	movs	r3, #12
    21a0:	6033      	str	r3, [r6, #0]
    21a2:	2000      	movs	r0, #0
    21a4:	bd70      	pop	{r4, r5, r6, pc}
    21a6:	680b      	ldr	r3, [r1, #0]
    21a8:	1b5b      	subs	r3, r3, r5
    21aa:	d41a      	bmi.n	21e2 <_malloc_r+0x96>
    21ac:	2b0b      	cmp	r3, #11
    21ae:	d903      	bls.n	21b8 <_malloc_r+0x6c>
    21b0:	600b      	str	r3, [r1, #0]
    21b2:	18cc      	adds	r4, r1, r3
    21b4:	6025      	str	r5, [r4, #0]
    21b6:	e003      	b.n	21c0 <_malloc_r+0x74>
    21b8:	428c      	cmp	r4, r1
    21ba:	d10e      	bne.n	21da <_malloc_r+0x8e>
    21bc:	6863      	ldr	r3, [r4, #4]
    21be:	6013      	str	r3, [r2, #0]
    21c0:	0030      	movs	r0, r6
    21c2:	f000 f83b 	bl	223c <__malloc_unlock>
    21c6:	0020      	movs	r0, r4
    21c8:	2207      	movs	r2, #7
    21ca:	300b      	adds	r0, #11
    21cc:	1d23      	adds	r3, r4, #4
    21ce:	4390      	bics	r0, r2
    21d0:	1ac3      	subs	r3, r0, r3
    21d2:	d0e7      	beq.n	21a4 <_malloc_r+0x58>
    21d4:	425a      	negs	r2, r3
    21d6:	50e2      	str	r2, [r4, r3]
    21d8:	e7e4      	b.n	21a4 <_malloc_r+0x58>
    21da:	684b      	ldr	r3, [r1, #4]
    21dc:	6063      	str	r3, [r4, #4]
    21de:	000c      	movs	r4, r1
    21e0:	e7ee      	b.n	21c0 <_malloc_r+0x74>
    21e2:	000c      	movs	r4, r1
    21e4:	6849      	ldr	r1, [r1, #4]
    21e6:	e7c2      	b.n	216e <_malloc_r+0x22>
    21e8:	2303      	movs	r3, #3
    21ea:	1cc4      	adds	r4, r0, #3
    21ec:	439c      	bics	r4, r3
    21ee:	42a0      	cmp	r0, r4
    21f0:	d0e0      	beq.n	21b4 <_malloc_r+0x68>
    21f2:	1a21      	subs	r1, r4, r0
    21f4:	0030      	movs	r0, r6
    21f6:	f000 f807 	bl	2208 <_sbrk_r>
    21fa:	1c43      	adds	r3, r0, #1
    21fc:	d1da      	bne.n	21b4 <_malloc_r+0x68>
    21fe:	e7c6      	b.n	218e <_malloc_r+0x42>
    2200:	200008b8 	.word	0x200008b8
    2204:	200008bc 	.word	0x200008bc

00002208 <_sbrk_r>:
    2208:	2300      	movs	r3, #0
    220a:	b570      	push	{r4, r5, r6, lr}
    220c:	4c06      	ldr	r4, [pc, #24]	; (2228 <_sbrk_r+0x20>)
    220e:	0005      	movs	r5, r0
    2210:	0008      	movs	r0, r1
    2212:	6023      	str	r3, [r4, #0]
    2214:	f000 f814 	bl	2240 <_sbrk>
    2218:	1c43      	adds	r3, r0, #1
    221a:	d103      	bne.n	2224 <_sbrk_r+0x1c>
    221c:	6823      	ldr	r3, [r4, #0]
    221e:	2b00      	cmp	r3, #0
    2220:	d000      	beq.n	2224 <_sbrk_r+0x1c>
    2222:	602b      	str	r3, [r5, #0]
    2224:	bd70      	pop	{r4, r5, r6, pc}
    2226:	46c0      	nop			; (mov r8, r8)
    2228:	200008c4 	.word	0x200008c4

0000222c <strlen>:
    222c:	2300      	movs	r3, #0
    222e:	5cc2      	ldrb	r2, [r0, r3]
    2230:	3301      	adds	r3, #1
    2232:	2a00      	cmp	r2, #0
    2234:	d1fb      	bne.n	222e <strlen+0x2>
    2236:	1e58      	subs	r0, r3, #1
    2238:	4770      	bx	lr

0000223a <__malloc_lock>:
    223a:	4770      	bx	lr

0000223c <__malloc_unlock>:
    223c:	4770      	bx	lr
	...

00002240 <_sbrk>:
    2240:	4a04      	ldr	r2, [pc, #16]	; (2254 <_sbrk+0x14>)
    2242:	6813      	ldr	r3, [r2, #0]
    2244:	2b00      	cmp	r3, #0
    2246:	d003      	beq.n	2250 <_sbrk+0x10>
    2248:	1818      	adds	r0, r3, r0
    224a:	6010      	str	r0, [r2, #0]
    224c:	0018      	movs	r0, r3
    224e:	4770      	bx	lr
    2250:	4b01      	ldr	r3, [pc, #4]	; (2258 <_sbrk+0x18>)
    2252:	e7f9      	b.n	2248 <_sbrk+0x8>
    2254:	200008c0 	.word	0x200008c0
    2258:	200008c8 	.word	0x200008c8

0000225c <_init>:
    225c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    225e:	46c0      	nop			; (mov r8, r8)
    2260:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2262:	bc08      	pop	{r3}
    2264:	469e      	mov	lr, r3
    2266:	4770      	bx	lr

00002268 <_fini>:
    2268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    226a:	46c0      	nop			; (mov r8, r8)
    226c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    226e:	bc08      	pop	{r3}
    2270:	469e      	mov	lr, r3
    2272:	4770      	bx	lr

00002274 <_ZTV7Serial_>:
	...
    227c:	052d 0000 0559 0000 0541 0000 0591 0000     -...Y...A.......
    228c:	0575 0000 054d 0000 0529 0000               u...M...)...

00002298 <_ZTV26DoubleBufferedEPOutHandler>:
	...
    22a0:	099f 0000 0881 0000 07dd 0000               ............

000022ac <_ZL14STRING_PRODUCT>:
    22ac:	6546 7461 6568 2072 304d 0000               Feather M0..

000022b8 <_ZL15STRING_LANGUAGE>:
    22b8:	0304 0409                                   ....

000022bc <_ZL19STRING_MANUFACTURER>:
    22bc:	6441 6661 7572 7469 1200                         Adafruit.

000022c5 <_ZL21USB_DeviceDescriptorB>:
    22c5:	0112 0200 02ef 4001 239a 800b 0100 0201     .......@.#......
    22d5:	0103 0000                                        ...

000022d8 <g_APinDescription>:
    22d8:	0000 0000 000b 0000 0002 0000 0004 0000     ................
    22e8:	00ff ffff ffff 000b 0000 0000 000a 0000     ................
    22f8:	0002 0000 0004 0000 00ff ffff ffff 000a     ................
    2308:	0000 0000 000e 0000 0008 0000 0004 0000     ................
    2318:	00ff ffff ffff 000e 0000 0000 0009 0000     ................
    2328:	0004 0000 001c 0000 00ff 0001 0001 0009     ................
    2338:	0000 0000 0008 0000 0004 0000 001c 0000     ................
    2348:	00ff 0000 0000 0010 0000 0000 000f 0000     ................
    2358:	0004 0000 001c 0000 00ff 0301 0301 000f     ................
    2368:	0000 0000 0014 0000 0005 0000 002c 0000     ............,...
    2378:	00ff 0002 0002 0004 0000 0000 0015 0000     ................
    2388:	0008 0000 0004 0000 00ff ffff ffff 0005     ................
    2398:	0000 0000 0006 0000 0004 0000 001c 0000     ................
    23a8:	0006 0100 0100 0006 0000 0000 0007 0000     ................
    23b8:	0004 0000 001c 0000 0007 0101 0101 0007     ................
    23c8:	0000 0000 0012 0000 0004 0000 001c 0000     ................
    23d8:	00ff 0300 0300 0002 0000 0000 0010 0000     ................
    23e8:	0004 0000 001c 0000 00ff 0200 0200 0000     ................
    23f8:	0000 0000 0013 0000 0005 0000 002c 0000     ............,...
    2408:	00ff 0003 0003 0003 0000 0000 0011 0000     ................
    2418:	0004 0000 001c 0000 00ff 0201 0201 0001     ................
    2428:	0000 0000 0002 0000 0001 0000 0002 0000     ................
    2438:	0000 ffff ffff 0002 0001 0000 0008 0000     ................
    2448:	0001 0000 0018 0000 0002 0400 0400 0008     ................
    2458:	0001 0000 0009 0000 0001 0000 0018 0000     ................
    2468:	0003 0401 0401 0009 0000 0000 0004 0000     ................
    2478:	0001 0000 0000 0000 0004 ffff ffff 0004     ................
    2488:	0000 0000 0005 0000 0001 0000 0000 0000     ................
    2498:	0005 ffff ffff 0005 0001 0000 0002 0000     ................
    24a8:	0001 0000 0000 0000 000a ffff ffff 0002     ................
    24b8:	0000 0000 0016 0000 0002 0000 0004 0000     ................
    24c8:	00ff ffff ffff 0006 0000 0000 0017 0000     ................
    24d8:	0002 0000 0004 0000 00ff ffff ffff 0007     ................
    24e8:	0000 0000 000c 0000 0003 0000 0004 0000     ................
    24f8:	00ff ffff ffff 000c 0001 0000 000a 0000     ................
    2508:	0003 0000 0004 0000 00ff ffff ffff 000a     ................
    2518:	0001 0000 000b 0000 0003 0000 0004 0000     ................
    2528:	00ff ffff ffff 000b 0001 0000 0003 0000     ................
    2538:	000b 0000 0004 0000 00ff ffff ffff 00ff     ................
    2548:	0000 0000 001b 0000 000b 0000 0004 0000     ................
    2558:	00ff ffff ffff 00ff 0000 0000 001c 0000     ................
    2568:	0006 0000 0000 0000 00ff ffff ffff 00ff     ................
    2578:	0000 0000 0018 0000 0006 0000 0000 0000     ................
    2588:	00ff ffff ffff 00ff 0000 0000 0019 0000     ................
    2598:	0006 0000 0000 0000 00ff ffff ffff 00ff     ................
    25a8:	0001 0000 0016 0000 0003 0000 0000 0000     ................
    25b8:	00ff ffff ffff 00ff 0001 0000 0017 0000     ................
    25c8:	0003 0000 0000 0000 00ff ffff ffff 00ff     ................
    25d8:	0000 0000 0016 0000 0002 0000 0000 0000     ................
    25e8:	00ff ffff ffff 00ff 0000 0000 0017 0000     ................
    25f8:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    2608:	0000 0000 0013 0000 0002 0000 0000 0000     ................
    2618:	00ff ffff ffff 00ff 0000 0000 0010 0000     ................
    2628:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    2638:	0000 0000 0012 0000 0002 0000 0000 0000     ................
    2648:	00ff ffff ffff 00ff 0000 0000 0011 0000     ................
    2658:	0002 0000 0000 0000 00ff ffff ffff 00ff     ................
    2668:	0000 0000 000d 0000 0004 0000 000c 0000     ................
    2678:	00ff 0001 ffff 000d 0000 0000 0015 0000     ................
    2688:	0005 0000 000c 0000 00ff 0003 ffff 00ff     ................
    2698:	0000 0000 0006 0000 0004 0000 000c 0000     ................
    26a8:	00ff 0100 ffff 00ff 0000 0000 0007 0000     ................
    26b8:	0004 0000 000c 0000 00ff 0101 ffff 00ff     ................
    26c8:	0000 0000 0003 0000 0001 0000 0002 0000     ................
    26d8:	00ff ffff ffff 00ff 0000 0000 0002 0000     ................
    26e8:	0001 0000 0002 0000 0014 ffff ffff 0002     ................
    26f8:	0000 0000 0006 0000 0001 0000 0002 0000     ................
    2708:	0006 0100 0100 0006 0000 0000 0007 0000     ................
    2718:	0001 0000 0002 0000 0007 0101 0101 0007     ................

00002728 <_ZTV4Uart>:
	...
    2730:	1cc9 0000 1ed5 0000 1cab 0000 1cbf 0000     ................
    2740:	1cb5 0000 1ca1 0000 1c7d 0000 1da1 0000     ........}.......
    2750:	1c8d 0000 1c79 0000                         ....y...

00002758 <__EH_FRAME_BEGIN__>:
    2758:	0000 0000                                   ....
